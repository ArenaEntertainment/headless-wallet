{"version":3,"file":"index.js","sources":["../src/bridge/security.ts","../src/bridge/message-bridge.ts","../src/install.ts","../src/utils/test-isolation.ts","../src/utils/wallet-helpers.ts","../src/fixtures/wallet-fixtures.ts","../src/types.ts","../src/index.ts"],"sourcesContent":["/**\n * @fileoverview Security utilities for Playwright integration\n *\n * This module provides security functions for validating the environment,\n * generating secure tokens, and protecting against production usage.\n */\n\nimport { SecureCrypto } from '@arenaentertainment/wallet-mock-shared';\nimport type {\n  EnvironmentInfo,\n  SecurityLevel,\n  PlaywrightSecurityConfig,\n  SecurityViolationError\n} from '../types.js';\n\n/**\n * Default security configuration\n */\nexport const DEFAULT_SECURITY_CONFIG: PlaywrightSecurityConfig = {\n  level: SecurityLevel.TESTING,\n  checkProduction: true,\n  validateContext: true,\n  secureCleanup: true,\n  maxInstances: 10,\n  sessionTimeout: 30 * 60 * 1000, // 30 minutes\n};\n\n/**\n * Environment detection keywords that indicate production\n */\nconst PRODUCTION_INDICATORS = [\n  'production',\n  'prod',\n  'live',\n  'deploy',\n  'staging',\n  'release'\n];\n\n/**\n * Test environment detection keywords\n */\nconst TEST_INDICATORS = [\n  'test',\n  'testing',\n  'spec',\n  'jest',\n  'mocha',\n  'vitest',\n  'playwright',\n  'cypress',\n  'dev',\n  'development',\n  'local'\n];\n\n/**\n * Detect the current environment\n */\nexport function detectEnvironment(): EnvironmentInfo {\n  const env = process.env;\n  const nodeVersion = process.version;\n\n  // Check for CI environment\n  const isCI = !!(\n    env.CI ||\n    env.GITHUB_ACTIONS ||\n    env.JENKINS_URL ||\n    env.BUILDKITE ||\n    env.CIRCLECI ||\n    env.TRAVIS ||\n    env.GITLAB_CI\n  );\n\n  // Check NODE_ENV\n  const nodeEnv = (env.NODE_ENV || '').toLowerCase();\n\n  // Check for production indicators\n  const isProduction = PRODUCTION_INDICATORS.some(indicator =>\n    nodeEnv.includes(indicator) ||\n    (env.ENVIRONMENT || '').toLowerCase().includes(indicator)\n  );\n\n  // Check for test indicators\n  const isTest = TEST_INDICATORS.some(indicator =>\n    nodeEnv.includes(indicator) ||\n    (env.ENVIRONMENT || '').toLowerCase().includes(indicator)\n  ) || isCI;\n\n  const isDevelopment = nodeEnv === 'development' || (!isProduction && !isTest);\n\n  // Try to detect Playwright version\n  let playwrightVersion: string | undefined;\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const pkg = require('@playwright/test/package.json');\n    playwrightVersion = pkg.version;\n  } catch {\n    // Playwright not available\n  }\n\n  return {\n    isTest,\n    isCI,\n    isDevelopment,\n    isProduction,\n    nodeVersion,\n    playwrightVersion,\n  };\n}\n\n/**\n * Validate that we're not running in production\n */\nexport function validateEnvironment(config: PlaywrightSecurityConfig): void {\n  if (!config.checkProduction) return;\n\n  const env = detectEnvironment();\n\n  if (env.isProduction) {\n    throw new SecurityViolationError(\n      'Wallet mock cannot be used in production environment',\n      { environment: env }\n    );\n  }\n\n  // Additional safety check for common production domains\n  if (typeof window !== 'undefined' && window.location) {\n    const hostname = window.location.hostname;\n    const productionDomains = [\n      'app.com',\n      'wallet.com',\n      'exchange.com',\n      // Add your production domains here\n    ];\n\n    if (productionDomains.some(domain => hostname.includes(domain))) {\n      throw new SecurityViolationError(\n        `Wallet mock cannot be used on production domain: ${hostname}`,\n        { hostname, domain: window.location.href }\n      );\n    }\n  }\n}\n\n/**\n * Generate a secure token for bridge communication\n */\nexport function generateSecureToken(length: number = 32): string {\n  const bytes = SecureCrypto.generateSeed(length);\n  return Array.from(bytes, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n * Generate a session ID\n */\nexport function generateSessionId(): string {\n  const timestamp = Date.now().toString();\n  const random = generateSecureToken(16);\n  // Simple hash implementation since we can't use crypto.createHash\n  let hash = 0;\n  const input = `${timestamp}-${random}`;\n  for (let i = 0; i < input.length; i++) {\n    hash = ((hash << 5) - hash + input.charCodeAt(i)) & 0xffffffff;\n  }\n  return Math.abs(hash).toString(16).substring(0, 16);\n}\n\n/**\n * Validate security token\n */\nexport function validateSecurityToken(token: string): boolean {\n  if (!token || typeof token !== 'string') return false;\n  if (token.length < 16) return false;\n  return /^[a-f0-9]+$/i.test(token);\n}\n\n/**\n * Create a secure message hash\n */\nexport function createMessageHash(messageId: string, payload: any, securityToken: string): string {\n  const content = JSON.stringify({ messageId, payload, securityToken });\n  // Simple hash implementation\n  let hash = 0;\n  for (let i = 0; i < content.length; i++) {\n    hash = ((hash << 5) - hash + content.charCodeAt(i)) & 0xffffffff;\n  }\n  return Math.abs(hash).toString(16).padStart(8, '0');\n}\n\n/**\n * Validate message integrity\n */\nexport function validateMessageIntegrity(\n  messageId: string,\n  payload: any,\n  securityToken: string,\n  expectedHash: string\n): boolean {\n  const actualHash = createMessageHash(messageId, payload, securityToken);\n  return actualHash === expectedHash;\n}\n\n/**\n * Sanitise sensitive data from objects for logging\n */\nexport function sanitiseSensitiveData(obj: any): any {\n  if (!obj || typeof obj !== 'object') return obj;\n\n  const sensitiveKeys = ['privateKey', 'secretKey', 'password', 'token', 'secret'];\n  const sanitised = Array.isArray(obj) ? [] : {};\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (sensitiveKeys.some(sensitive => key.toLowerCase().includes(sensitive))) {\n      (sanitised as any)[key] = '[REDACTED]';\n    } else if (typeof value === 'object' && value !== null) {\n      (sanitised as any)[key] = sanitiseSensitiveData(value);\n    } else {\n      (sanitised as any)[key] = value;\n    }\n  }\n\n  return sanitised;\n}\n\n/**\n * Validate origin against allowed origins\n */\nexport function validateOrigin(origin: string, allowedOrigins?: string[]): boolean {\n  if (!allowedOrigins || allowedOrigins.length === 0) {\n    // If no allowed origins specified, only allow localhost and file:// for testing\n    return origin.includes('localhost') ||\n           origin.includes('127.0.0.1') ||\n           origin.startsWith('file://') ||\n           origin.includes('local.') ||\n           origin.includes('.local');\n  }\n\n  return allowedOrigins.some(allowed => {\n    if (allowed === '*') return true;\n    if (allowed.startsWith('*')) {\n      return origin.endsWith(allowed.substring(1));\n    }\n    return origin === allowed || origin.includes(allowed);\n  });\n}\n\n/**\n * Rate limiting for security operations\n */\nclass RateLimiter {\n  private attempts: Map<string, number[]> = new Map();\n  private readonly maxAttempts: number;\n  private readonly windowMs: number;\n\n  constructor(maxAttempts: number = 10, windowMs: number = 60000) {\n    this.maxAttempts = maxAttempts;\n    this.windowMs = windowMs;\n  }\n\n  isAllowed(key: string): boolean {\n    const now = Date.now();\n    const attempts = this.attempts.get(key) || [];\n\n    // Remove old attempts outside the window\n    const validAttempts = attempts.filter(time => now - time < this.windowMs);\n\n    if (validAttempts.length >= this.maxAttempts) {\n      return false;\n    }\n\n    // Add current attempt\n    validAttempts.push(now);\n    this.attempts.set(key, validAttempts);\n\n    return true;\n  }\n\n  reset(key: string): void {\n    this.attempts.delete(key);\n  }\n\n  clear(): void {\n    this.attempts.clear();\n  }\n}\n\n/**\n * Global rate limiter instance\n */\nexport const securityRateLimiter = new RateLimiter();\n\n/**\n * Security level validation\n */\nexport function validateSecurityLevel(level: SecurityLevel, operation: string): void {\n  const env = detectEnvironment();\n\n  switch (level) {\n    case SecurityLevel.STRICT:\n      if (!env.isTest && !env.isCI) {\n        throw new SecurityViolationError(\n          `Operation '${operation}' requires test environment in strict mode`,\n          { level, operation, environment: env }\n        );\n      }\n      break;\n\n    case SecurityLevel.TESTING:\n      if (env.isProduction) {\n        throw new SecurityViolationError(\n          `Operation '${operation}' not allowed in production`,\n          { level, operation, environment: env }\n        );\n      }\n      break;\n\n    case SecurityLevel.DEVELOPMENT:\n      // Most permissive, but still block production\n      if (env.isProduction) {\n        throw new SecurityViolationError(\n          `Operation '${operation}' not allowed in production`,\n          { level, operation, environment: env }\n        );\n      }\n      break;\n  }\n}\n\n/**\n * Create secure cleanup function\n */\nexport function createSecureCleanup<T>(\n  resource: T,\n  cleanupFn: (resource: T) => Promise<void>\n): () => Promise<void> {\n  return async () => {\n    try {\n      await cleanupFn(resource);\n    } catch (error) {\n      // Log but don't throw - cleanup should be best effort\n      console.warn('Secure cleanup failed:', error);\n    }\n  };\n}","/**\n * @fileoverview Message bridge for secure communication between Node.js and browser\n *\n * This module handles the secure message passing between the Node.js test environment\n * and the browser context where the mock wallet is installed.\n */\n\nimport type { Page } from '@playwright/test';\nimport {\n  generateSecureToken,\n  generateSessionId,\n  validateSecurityToken,\n  createMessageHash,\n  validateMessageIntegrity,\n  sanitiseSensitiveData,\n  securityRateLimiter,\n  validateEnvironment\n} from './security.js';\nimport type {\n  BridgeMessage,\n  BridgeResponse,\n  BridgeMessageType,\n  BridgeSetupConfig,\n  PlaywrightSecurityConfig,\n  BridgeError\n} from '../types.js';\n\n/**\n * Default bridge configuration\n */\nconst DEFAULT_BRIDGE_CONFIG: BridgeSetupConfig = {\n  security: {\n    level: 'testing' as const,\n    checkProduction: true,\n    validateContext: true,\n    secureCleanup: true,\n    maxInstances: 10,\n    sessionTimeout: 30 * 60 * 1000, // 30 minutes\n  },\n  sessionTimeout: 30 * 60 * 1000,\n  maxMessageSize: 10 * 1024 * 1024, // 10MB\n  enableLogging: true,\n  logLevel: 'info',\n};\n\n/**\n * Message bridge class for secure communication\n */\nexport class MessageBridge {\n  private page: Page;\n  private config: BridgeSetupConfig;\n  private sessionId: string;\n  private securityToken: string;\n  private messageCounter = 0;\n  private pendingMessages = new Map<string, {\n    resolve: (value: any) => void;\n    reject: (reason: any) => void;\n    timeout: NodeJS.Timeout;\n  }>();\n\n  constructor(page: Page, config: Partial<BridgeSetupConfig> = {}) {\n    this.page = page;\n    this.config = { ...DEFAULT_BRIDGE_CONFIG, ...config };\n    this.sessionId = generateSessionId();\n    this.securityToken = generateSecureToken();\n\n    // Validate environment security\n    validateEnvironment(this.config.security);\n  }\n\n  /**\n   * Initialize the message bridge\n   */\n  async initialize(): Promise<void> {\n    try {\n      await this.setupBrowserBridge();\n      await this.performHandshake();\n      this.log('info', 'Message bridge initialized successfully', {\n        sessionId: this.sessionId,\n        securityLevel: this.config.security.level\n      });\n    } catch (error) {\n      this.log('error', 'Failed to initialize message bridge', { error });\n      throw new BridgeError('Bridge initialization failed', { error });\n    }\n  }\n\n  /**\n   * Send a message to the browser and wait for response\n   */\n  async sendMessage<TPayload, TResponse>(\n    type: BridgeMessageType,\n    payload: TPayload,\n    timeout: number = 5000\n  ): Promise<TResponse> {\n    // Rate limiting check\n    const rateLimitKey = `${this.sessionId}-${type}`;\n    if (!securityRateLimiter.isAllowed(rateLimitKey)) {\n      throw new BridgeError('Rate limit exceeded for message type', { type });\n    }\n\n    const messageId = this.generateMessageId();\n    const message: BridgeMessage<TPayload> = {\n      id: messageId,\n      type,\n      payload,\n      timestamp: Date.now(),\n      sessionId: this.sessionId,\n      securityToken: this.securityToken,\n    };\n\n    // Validate message size\n    const messageSize = JSON.stringify(message).length;\n    if (messageSize > this.config.maxMessageSize) {\n      throw new BridgeError('Message size exceeds limit', {\n        size: messageSize,\n        limit: this.config.maxMessageSize\n      });\n    }\n\n    this.log('debug', 'Sending message', {\n      messageId,\n      type,\n      payload: sanitiseSensitiveData(payload)\n    });\n\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        this.pendingMessages.delete(messageId);\n        reject(new BridgeError('Message timeout', { messageId, type, timeout }));\n      }, timeout);\n\n      this.pendingMessages.set(messageId, {\n        resolve,\n        reject,\n        timeout: timeoutId,\n      });\n\n      this.page.evaluate((msg) => {\n        // Browser-side message handling\n        if (window.__walletMockBridge) {\n          window.__walletMockBridge.handleMessage(msg);\n        } else {\n          throw new Error('Wallet mock bridge not available in browser');\n        }\n      }, message).catch(error => {\n        clearTimeout(timeoutId);\n        this.pendingMessages.delete(messageId);\n        reject(new BridgeError('Failed to send message to browser', { error, messageId }));\n      });\n    });\n  }\n\n  /**\n   * Setup browser-side bridge code\n   */\n  private async setupBrowserBridge(): Promise<void> {\n    await this.page.addInitScript((config) => {\n      // Browser-side bridge implementation\n      class BrowserBridge {\n        private config = config;\n        private messageHandlers = new Map();\n\n        constructor() {\n          this.setupMessageHandling();\n        }\n\n        private setupMessageHandling() {\n          // Listen for responses from the page\n          window.addEventListener('message', (event) => {\n            if (event.data && event.data.__walletMockResponse) {\n              this.handleResponse(event.data.response);\n            }\n          });\n        }\n\n        async handleMessage(message) {\n          try {\n            // Validate message structure\n            if (!this.validateMessage(message)) {\n              throw new Error('Invalid message structure');\n            }\n\n            // Process the message based on type\n            const response = await this.processMessage(message);\n\n            // Send response back to Node.js\n            this.sendResponse(message.id, { success: true, data: response });\n          } catch (error) {\n            this.sendResponse(message.id, {\n              success: false,\n              error: {\n                message: error.message,\n                code: error.code || 'UNKNOWN_ERROR',\n                stack: error.stack,\n              }\n            });\n          }\n        }\n\n        private validateMessage(message) {\n          if (!message || typeof message !== 'object') return false;\n          if (!message.id || !message.type || !message.sessionId) return false;\n          if (!message.securityToken || message.securityToken.length < 16) return false;\n          return true;\n        }\n\n        private async processMessage(message) {\n          const { type, payload } = message;\n\n          switch (type) {\n            case 'install_wallet':\n              return await this.handleInstallWallet(payload);\n            case 'remove_wallet':\n              return await this.handleRemoveWallet(payload);\n            case 'update_config':\n              return await this.handleUpdateConfig(payload);\n            case 'get_state':\n              return await this.handleGetState(payload);\n            case 'cleanup_all':\n              return await this.handleCleanupAll(payload);\n            case 'security_check':\n              return await this.handleSecurityCheck(payload);\n            case 'heartbeat':\n              return { timestamp: Date.now(), status: 'alive' };\n            default:\n              throw new Error(`Unknown message type: ${type}`);\n          }\n        }\n\n        private async handleInstallWallet(payload) {\n          // Dynamic import of wallet-mock\n          const { createWallet } = await import('@arenaentertainment/wallet-mock');\n\n          // Create wallet instance\n          const wallet = await createWallet(payload.config);\n\n          // Store wallet instance\n          if (!window.__walletMockInstances) {\n            window.__walletMockInstances = new Map();\n          }\n\n          window.__walletMockInstances.set(payload.instanceId, {\n            wallet,\n            installedAt: Date.now(),\n            config: payload.config,\n          });\n\n          // Install wallet providers in window\n          await this.installProviders(wallet, payload);\n\n          return {\n            instanceId: payload.instanceId,\n            installedAt: Date.now(),\n            supportedChains: this.getSupportedChains(wallet),\n          };\n        }\n\n        private async installProviders(wallet, payload) {\n          // Install Ethereum provider if EVM chains are supported\n          if (payload.chainTypes?.includes('evm') || !payload.chainTypes) {\n            const { MockEthereumProvider } = await import('@arenaentertainment/wallet-mock-standards');\n            window.ethereum = new MockEthereumProvider(wallet);\n          }\n\n          // Install Solana wallet if Solana chains are supported\n          if (payload.chainTypes?.includes('solana') || !payload.chainTypes) {\n            const { MockSolanaWallet } = await import('@arenaentertainment/wallet-mock-standards');\n\n            if (!window.solana) window.solana = {};\n\n            // Create wallet adapter\n            const solanaWallet = new MockSolanaWallet(wallet);\n\n            // Register with Solana wallet registry if available\n            if (window.solana) {\n              window.solana.isPhantom = true;\n              Object.assign(window.solana, solanaWallet);\n            }\n          }\n        }\n\n        private getSupportedChains(wallet) {\n          const state = wallet.getState();\n          const chainTypes = new Set();\n\n          state.accounts.forEach(account => {\n            if ('evm' in account) chainTypes.add('evm');\n            if ('solana' in account) chainTypes.add('solana');\n          });\n\n          return Array.from(chainTypes);\n        }\n\n        private async handleRemoveWallet(payload) {\n          const instances = window.__walletMockInstances;\n          if (!instances || !instances.has(payload.instanceId)) {\n            throw new Error(`Wallet instance not found: ${payload.instanceId}`);\n          }\n\n          const instance = instances.get(payload.instanceId);\n\n          // Clean up wallet\n          if (instance.wallet && typeof instance.wallet.destroy === 'function') {\n            await instance.wallet.destroy();\n          }\n\n          // Remove from window if it's the current instance\n          if (window.ethereum && window.ethereum.__instanceId === payload.instanceId) {\n            delete window.ethereum;\n          }\n\n          if (window.solana && window.solana.__instanceId === payload.instanceId) {\n            delete window.solana;\n          }\n\n          instances.delete(payload.instanceId);\n\n          return { removed: true };\n        }\n\n        private async handleUpdateConfig(payload) {\n          const instances = window.__walletMockInstances;\n          if (!instances || !instances.has(payload.instanceId)) {\n            throw new Error(`Wallet instance not found: ${payload.instanceId}`);\n          }\n\n          const instance = instances.get(payload.instanceId);\n\n          // Update wallet configuration\n          if (instance.wallet && typeof instance.wallet.updateConfig === 'function') {\n            await instance.wallet.updateConfig(payload.config);\n          }\n\n          return { updated: true };\n        }\n\n        private async handleGetState(payload) {\n          const instances = window.__walletMockInstances;\n          if (!instances || !instances.has(payload.instanceId)) {\n            return null;\n          }\n\n          const instance = instances.get(payload.instanceId);\n          return instance.wallet.getState();\n        }\n\n        private async handleCleanupAll() {\n          const instances = window.__walletMockInstances;\n          if (!instances) return { cleaned: 0 };\n\n          let cleaned = 0;\n          for (const [instanceId, instance] of instances.entries()) {\n            try {\n              if (instance.wallet && typeof instance.wallet.destroy === 'function') {\n                await instance.wallet.destroy();\n              }\n              cleaned++;\n            } catch (error) {\n              console.warn(`Failed to cleanup wallet instance ${instanceId}:`, error);\n            }\n          }\n\n          // Clear all instances\n          instances.clear();\n\n          // Remove global providers\n          delete window.ethereum;\n          if (window.solana) {\n            delete window.solana;\n          }\n\n          return { cleaned };\n        }\n\n        private handleSecurityCheck() {\n          return {\n            origin: window.location.origin,\n            userAgent: navigator.userAgent,\n            timestamp: Date.now(),\n            hasInstances: !!(window.__walletMockInstances && window.__walletMockInstances.size > 0),\n          };\n        }\n\n        private sendResponse(messageId, response) {\n          // Use postMessage to send response back\n          window.postMessage({\n            __walletMockResponse: true,\n            messageId,\n            response: {\n              ...response,\n              messageId,\n              timestamp: Date.now(),\n            }\n          }, '*');\n        }\n\n        private handleResponse(response) {\n          // This would be handled by the Node.js side\n          console.debug('Bridge response:', response);\n        }\n      }\n\n      // Initialize browser bridge\n      window.__walletMockBridge = new BrowserBridge();\n    }, this.config);\n\n    // Setup response listener\n    await this.page.exposeFunction('__walletMockResponseHandler', (response: BridgeResponse) => {\n      this.handleResponse(response);\n    });\n\n    // Inject response handler\n    await this.page.addInitScript(() => {\n      window.addEventListener('message', (event) => {\n        if (event.data && event.data.__walletMockResponse) {\n          if (window.__walletMockResponseHandler) {\n            window.__walletMockResponseHandler(event.data.response);\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Perform initial handshake with browser\n   */\n  private async performHandshake(): Promise<void> {\n    const response = await this.sendMessage('security_check', {}, 3000);\n\n    this.log('debug', 'Handshake completed', { response });\n  }\n\n  /**\n   * Handle response from browser\n   */\n  private handleResponse(response: BridgeResponse): void {\n    const pending = this.pendingMessages.get(response.messageId);\n    if (!pending) {\n      this.log('warn', 'Received response for unknown message', { messageId: response.messageId });\n      return;\n    }\n\n    clearTimeout(pending.timeout);\n    this.pendingMessages.delete(response.messageId);\n\n    if (response.success) {\n      pending.resolve(response.data);\n    } else {\n      const error = new BridgeError(\n        response.error?.message || 'Unknown error',\n        { code: response.error?.code, messageId: response.messageId }\n      );\n      pending.reject(error);\n    }\n  }\n\n  /**\n   * Generate unique message ID\n   */\n  private generateMessageId(): string {\n    return `msg-${this.sessionId}-${++this.messageCounter}-${Date.now()}`;\n  }\n\n  /**\n   * Log message with proper level\n   */\n  private log(level: 'debug' | 'info' | 'warn' | 'error', message: string, context?: any): void {\n    if (!this.config.enableLogging) return;\n\n    const levels = { debug: 0, info: 1, warn: 2, error: 3 };\n    const currentLevel = levels[this.config.logLevel];\n    const messageLevel = levels[level];\n\n    if (messageLevel >= currentLevel) {\n      const sanitisedContext = context ? sanitiseSensitiveData(context) : undefined;\n      console[level](`[WalletMock Bridge] ${message}`, sanitisedContext);\n    }\n  }\n\n  /**\n   * Cleanup bridge resources\n   */\n  async cleanup(): Promise<void> {\n    try {\n      // Cancel pending messages\n      for (const [messageId, pending] of this.pendingMessages.entries()) {\n        clearTimeout(pending.timeout);\n        pending.reject(new BridgeError('Bridge cleanup', { messageId }));\n      }\n      this.pendingMessages.clear();\n\n      // Send cleanup message to browser\n      await this.sendMessage('cleanup_all', {}, 5000);\n\n      this.log('info', 'Bridge cleanup completed');\n    } catch (error) {\n      this.log('warn', 'Bridge cleanup failed', { error });\n    }\n  }\n\n  /**\n   * Get bridge session information\n   */\n  getSessionInfo() {\n    return {\n      sessionId: this.sessionId,\n      messageCount: this.messageCounter,\n      pendingMessages: this.pendingMessages.size,\n      config: this.config,\n    };\n  }\n}","/**\n * @fileoverview Main wallet installation function for Playwright tests\n *\n * This module provides the primary function for installing mock wallets\n * in Playwright test environments with comprehensive security checks\n * and proper test isolation.\n */\n\nimport type { Page, BrowserContext } from '@playwright/test';\nimport { MessageBridge, validateEnvironment, generateSessionId, detectEnvironment } from './bridge/index.js';\nimport type {\n  InstallMockWalletOptions,\n  WalletInstallationResult,\n  PlaywrightSecurityConfig,\n  SecurityLevel,\n  TestIsolationConfig,\n  InstallationError,\n  SecurityViolationError,\n  ChainType\n} from './types.js';\nimport type { AccountConfig, WalletConfig } from '@arenaentertainment/wallet-mock-shared';\n\n/**\n * Default wallet configuration\n */\nconst DEFAULT_WALLET_CONFIG: Partial<WalletConfig> = {\n  autoConnect: true,\n  security: {\n    enableProductionChecks: true,\n    enableSecureMemory: true,\n    autoCleanup: true,\n  },\n  debug: {\n    enableLogging: true,\n    logLevel: 'info',\n  },\n};\n\n/**\n * Default security configuration\n */\nconst DEFAULT_SECURITY_CONFIG: PlaywrightSecurityConfig = {\n  level: SecurityLevel.TESTING,\n  checkProduction: true,\n  validateContext: true,\n  secureCleanup: true,\n  maxInstances: 10,\n  sessionTimeout: 30 * 60 * 1000, // 30 minutes\n};\n\n/**\n * Default test isolation configuration\n */\nconst DEFAULT_ISOLATION_CONFIG: TestIsolationConfig = {\n  isolatePerTest: true,\n  isolatePerContext: true,\n  cleanupAfterTest: true,\n  cleanupOnFailure: true,\n};\n\n/**\n * Global state tracking for installed wallets\n */\nconst installedWallets = new Map<string, {\n  bridge: MessageBridge;\n  installationResult: WalletInstallationResult;\n  page: Page;\n  context: BrowserContext;\n}>();\n\n/**\n * Install a mock wallet in the Playwright page\n *\n * @param page - Playwright page instance\n * @param options - Installation options\n * @returns Promise resolving to wallet installation result\n *\n * @example\n * ```typescript\n * import { installMockWallet } from '@arenaentertainment/wallet-mock-playwright';\n *\n * test('dApp interaction', async ({ page }) => {\n *   const { wallet } = await installMockWallet(page, {\n *     accounts: [{\n *       type: 'evm_only',\n *       evm: { chainIds: ['1', '137'] }\n *     }],\n *     autoConnect: true\n *   });\n *\n *   await page.goto('https://your-dapp.local');\n *   // Wallet is now available as window.ethereum\n * });\n * ```\n */\nexport async function installMockWallet(\n  page: Page,\n  options: InstallMockWalletOptions = {}\n): Promise<WalletInstallationResult> {\n  try {\n    // Validate environment before proceeding\n    const env = detectEnvironment();\n    if (env.isProduction && (options.security?.checkProduction !== false)) {\n      throw new SecurityViolationError('Cannot install mock wallet in production environment');\n    }\n\n    // Merge configurations\n    const security = { ...DEFAULT_SECURITY_CONFIG, ...options.security };\n    const isolation = { ...DEFAULT_ISOLATION_CONFIG, ...options.isolation };\n    const walletConfig: WalletConfig = {\n      ...DEFAULT_WALLET_CONFIG,\n      ...options.config,\n      accounts: options.accounts || [createDefaultAccount()],\n    };\n\n    // Generate instance ID\n    const instanceId = options.instanceId || generateInstanceId(page);\n\n    // Validate security level\n    validateSecurityConfiguration(security, instanceId);\n\n    // Check for existing installation\n    if (installedWallets.has(instanceId) && !options.config?.accounts) {\n      throw new InstallationError(`Wallet already installed with instance ID: ${instanceId}`);\n    }\n\n    // Get browser context\n    const context = page.context();\n\n    // Validate context\n    await validateBrowserContext(context, security);\n\n    // Create message bridge\n    const bridge = new MessageBridge(page, {\n      security,\n      sessionTimeout: security.sessionTimeout || 30 * 60 * 1000,\n      maxMessageSize: 10 * 1024 * 1024,\n      enableLogging: security.level !== SecurityLevel.STRICT,\n      logLevel: env.isDevelopment ? 'debug' : 'info',\n    });\n\n    // Initialize bridge\n    await bridge.initialize();\n\n    // Determine supported chain types\n    const chainTypes = determineSupportedChainTypes(walletConfig.accounts || []);\n\n    // Install wallet via bridge\n    const installationResult = await bridge.sendMessage('install_wallet', {\n      config: walletConfig,\n      instanceId,\n      override: options.config?.accounts !== undefined,\n      chainTypes,\n    }, options.timeout || 10000);\n\n    // Create wallet installation result\n    const result: WalletInstallationResult = {\n      wallet: createWalletProxy(bridge, instanceId),\n      instanceId,\n      installedAt: installationResult.installedAt,\n      supportedChains: installationResult.supportedChains,\n    };\n\n    // Store installation for cleanup\n    installedWallets.set(instanceId, {\n      bridge,\n      installationResult: result,\n      page,\n      context,\n    });\n\n    // Setup cleanup handlers\n    await setupCleanupHandlers(page, context, instanceId, isolation);\n\n    // Wait for wallet to be ready if requested\n    if (options.waitForReady !== false) {\n      await waitForWalletReady(page, chainTypes, options.timeout || 10000);\n    }\n\n    // Auto-connect if requested\n    if (options.autoConnect !== false && walletConfig.autoConnect !== false) {\n      await autoConnectWallet(result.wallet, chainTypes);\n    }\n\n    return result;\n\n  } catch (error) {\n    if (error instanceof SecurityViolationError || error instanceof InstallationError) {\n      throw error;\n    }\n\n    throw new InstallationError('Failed to install mock wallet', {\n      originalError: error,\n      instanceId: options.instanceId,\n      page: page.url(),\n    });\n  }\n}\n\n/**\n * Remove a mock wallet instance\n *\n * @param instanceId - Instance ID to remove (defaults to page-based ID)\n * @param page - Playwright page (optional, for generating default ID)\n */\nexport async function removeMockWallet(\n  instanceId?: string,\n  page?: Page\n): Promise<void> {\n  const id = instanceId || (page ? generateInstanceId(page) : '');\n  const installation = installedWallets.get(id);\n\n  if (!installation) {\n    throw new InstallationError(`Wallet instance not found: ${id}`);\n  }\n\n  try {\n    // Remove wallet via bridge\n    await installation.bridge.sendMessage('remove_wallet', { instanceId: id });\n\n    // Cleanup bridge\n    await installation.bridge.cleanup();\n\n    // Remove from tracking\n    installedWallets.delete(id);\n  } catch (error) {\n    throw new InstallationError('Failed to remove mock wallet', {\n      originalError: error,\n      instanceId: id,\n    });\n  }\n}\n\n/**\n * Get installed wallet by instance ID\n *\n * @param instanceId - Instance ID (defaults to first installed wallet)\n */\nexport function getInstalledWallet(instanceId?: string): WalletInstallationResult | null {\n  if (instanceId) {\n    const installation = installedWallets.get(instanceId);\n    return installation?.installationResult || null;\n  }\n\n  // Return first installed wallet if no ID specified\n  const first = installedWallets.values().next();\n  return first.value?.installationResult || null;\n}\n\n/**\n * Cleanup all installed wallet instances\n */\nexport async function cleanupAllWallets(): Promise<void> {\n  const cleanupPromises = Array.from(installedWallets.entries()).map(\n    async ([instanceId, installation]) => {\n      try {\n        await installation.bridge.sendMessage('remove_wallet', { instanceId });\n        await installation.bridge.cleanup();\n      } catch (error) {\n        console.warn(`Failed to cleanup wallet instance ${instanceId}:`, error);\n      }\n    }\n  );\n\n  await Promise.allSettled(cleanupPromises);\n  installedWallets.clear();\n}\n\n/**\n * Create default account configuration\n */\nfunction createDefaultAccount(): AccountConfig {\n  return {\n    type: 'evm_only' as const,\n    name: 'Test Account',\n    evm: {\n      chainIds: ['1'], // Ethereum mainnet\n    },\n  };\n}\n\n/**\n * Generate instance ID based on page\n */\nfunction generateInstanceId(page: Page): string {\n  const url = page.url();\n  const timestamp = Date.now();\n  return `wallet-${Buffer.from(url).toString('base64').slice(0, 8)}-${timestamp}`;\n}\n\n/**\n * Validate security configuration\n */\nfunction validateSecurityConfiguration(\n  security: PlaywrightSecurityConfig,\n  instanceId: string\n): void {\n  // Check maximum instances\n  if (security.maxInstances && installedWallets.size >= security.maxInstances) {\n    throw new SecurityViolationError(\n      `Maximum wallet instances exceeded: ${security.maxInstances}`,\n      { currentInstances: installedWallets.size, instanceId }\n    );\n  }\n\n  // Validate environment for security level\n  validateEnvironment(security);\n}\n\n/**\n * Validate browser context\n */\nasync function validateBrowserContext(\n  context: BrowserContext,\n  security: PlaywrightSecurityConfig\n): Promise<void> {\n  if (!security.validateContext) return;\n\n  // Check for incognito mode (recommended for testing)\n  const pages = context.pages();\n  if (pages.length === 0) {\n    throw new SecurityViolationError('Browser context has no pages');\n  }\n\n  // Validate origins if specified\n  if (security.allowedOrigins && security.allowedOrigins.length > 0) {\n    const page = pages[0];\n    const url = page.url();\n    const origin = new URL(url).origin;\n\n    const isAllowed = security.allowedOrigins.some(allowed => {\n      if (allowed === '*') return true;\n      return origin.includes(allowed);\n    });\n\n    if (!isAllowed) {\n      throw new SecurityViolationError(\n        `Origin not allowed: ${origin}`,\n        { origin, allowedOrigins: security.allowedOrigins }\n      );\n    }\n  }\n}\n\n/**\n * Determine supported chain types from account configuration\n */\nfunction determineSupportedChainTypes(accounts: AccountConfig[]): ChainType[] {\n  const chainTypes = new Set<ChainType>();\n\n  for (const account of accounts) {\n    switch (account.type) {\n      case 'evm_only':\n        chainTypes.add('evm');\n        break;\n      case 'solana_only':\n        chainTypes.add('solana');\n        break;\n      case 'dual_chain':\n        chainTypes.add('evm');\n        chainTypes.add('solana');\n        break;\n    }\n  }\n\n  return Array.from(chainTypes);\n}\n\n/**\n * Setup cleanup handlers for test isolation\n */\nasync function setupCleanupHandlers(\n  page: Page,\n  context: BrowserContext,\n  instanceId: string,\n  isolation: TestIsolationConfig\n): Promise<void> {\n  if (!isolation.cleanupAfterTest && !isolation.cleanupOnFailure) return;\n\n  // Setup page close handler\n  page.on('close', async () => {\n    try {\n      await removeMockWallet(instanceId);\n    } catch (error) {\n      console.warn(`Failed to cleanup wallet on page close: ${instanceId}`, error);\n    }\n  });\n\n  // Setup context close handler\n  context.on('close', async () => {\n    try {\n      await removeMockWallet(instanceId);\n    } catch (error) {\n      console.warn(`Failed to cleanup wallet on context close: ${instanceId}`, error);\n    }\n  });\n\n  // Custom cleanup handler\n  if (isolation.customCleanup) {\n    const originalCleanup = isolation.customCleanup;\n    isolation.customCleanup = async () => {\n      try {\n        await removeMockWallet(instanceId);\n      } catch (error) {\n        console.warn(`Failed to cleanup wallet: ${instanceId}`, error);\n      }\n      await originalCleanup();\n    };\n  }\n}\n\n/**\n * Wait for wallet to be ready in the browser\n */\nasync function waitForWalletReady(\n  page: Page,\n  chainTypes: ChainType[],\n  timeout: number\n): Promise<void> {\n  const checkWalletReady = async () => {\n    return await page.evaluate((types) => {\n      const checks = [];\n\n      if (types.includes('evm') && window.ethereum) {\n        checks.push(!!window.ethereum.request);\n      }\n\n      if (types.includes('solana') && window.solana) {\n        checks.push(!!window.solana.connect);\n      }\n\n      return checks.length > 0 && checks.every(check => check);\n    }, chainTypes);\n  };\n\n  await page.waitForFunction(checkWalletReady, { timeout });\n}\n\n/**\n * Auto-connect wallet\n */\nasync function autoConnectWallet(wallet: any, chainTypes: ChainType[]): Promise<void> {\n  try {\n    if (typeof wallet.connect === 'function') {\n      await wallet.connect();\n    }\n  } catch (error) {\n    console.warn('Failed to auto-connect wallet:', error);\n  }\n}\n\n/**\n * Create wallet proxy for bridge communication\n */\nfunction createWalletProxy(bridge: MessageBridge, instanceId: string): any {\n  return new Proxy({}, {\n    get(target, prop) {\n      if (prop === 'getState') {\n        return async () => {\n          return await bridge.sendMessage('get_state', { instanceId });\n        };\n      }\n\n      if (prop === 'connect') {\n        return async () => {\n          // Connection happens in browser context\n          return true;\n        };\n      }\n\n      if (prop === 'disconnect') {\n        return async () => {\n          // Disconnection happens in browser context\n          return true;\n        };\n      }\n\n      if (prop === 'destroy') {\n        return async () => {\n          await removeMockWallet(instanceId);\n        };\n      }\n\n      // For other methods, we would need to implement bridge communication\n      return async (...args: any[]) => {\n        throw new Error(`Method ${String(prop)} not implemented in wallet proxy`);\n      };\n    }\n  });\n}","/**\n * @fileoverview Test isolation utilities for Playwright wallet tests\n *\n * This module provides utilities for proper test isolation, cleanup,\n * and resource management in Playwright test environments.\n */\n\nimport type { Page, BrowserContext, TestInfo } from '@playwright/test';\nimport type {\n  TestIsolationConfig,\n  WalletCleanupResult,\n  PlaywrightWalletManagerState\n} from '../types.js';\nimport { cleanupAllWallets } from '../install.js';\n\n/**\n * Test isolation manager for wallet instances\n */\nexport class TestIsolationManager {\n  private static instance: TestIsolationManager;\n  private testWallets = new Map<string, Set<string>>(); // testId -> instanceIds\n  private contextWallets = new Map<string, Set<string>>(); // contextId -> instanceIds\n  private cleanupHandlers = new Map<string, (() => Promise<void>)[]>();\n\n  private constructor() {\n    // Singleton pattern\n  }\n\n  static getInstance(): TestIsolationManager {\n    if (!TestIsolationManager.instance) {\n      TestIsolationManager.instance = new TestIsolationManager();\n    }\n    return TestIsolationManager.instance;\n  }\n\n  /**\n   * Register a wallet instance for a test\n   */\n  registerWalletForTest(testId: string, instanceId: string, contextId?: string): void {\n    // Register for test cleanup\n    if (!this.testWallets.has(testId)) {\n      this.testWallets.set(testId, new Set());\n    }\n    this.testWallets.get(testId)!.add(instanceId);\n\n    // Register for context cleanup\n    if (contextId) {\n      if (!this.contextWallets.has(contextId)) {\n        this.contextWallets.set(contextId, new Set());\n      }\n      this.contextWallets.get(contextId)!.add(instanceId);\n    }\n  }\n\n  /**\n   * Unregister a wallet instance\n   */\n  unregisterWallet(instanceId: string): void {\n    // Remove from all test mappings\n    for (const [testId, instances] of this.testWallets.entries()) {\n      instances.delete(instanceId);\n      if (instances.size === 0) {\n        this.testWallets.delete(testId);\n      }\n    }\n\n    // Remove from all context mappings\n    for (const [contextId, instances] of this.contextWallets.entries()) {\n      instances.delete(instanceId);\n      if (instances.size === 0) {\n        this.contextWallets.delete(contextId);\n      }\n    }\n  }\n\n  /**\n   * Cleanup wallets for a specific test\n   */\n  async cleanupTest(testId: string): Promise<WalletCleanupResult> {\n    const instanceIds = this.testWallets.get(testId);\n    if (!instanceIds || instanceIds.size === 0) {\n      return { cleanedUpInstances: 0, errors: [], duration: 0 };\n    }\n\n    const startTime = Date.now();\n    const errors: Array<{ instanceId: string; error: Error }> = [];\n    let cleanedUpInstances = 0;\n\n    // Cleanup each instance\n    for (const instanceId of instanceIds) {\n      try {\n        const { removeMockWallet } = await import('../install.js');\n        await removeMockWallet(instanceId);\n        cleanedUpInstances++;\n      } catch (error) {\n        errors.push({\n          instanceId,\n          error: error instanceof Error ? error : new Error(String(error))\n        });\n      }\n    }\n\n    // Remove test from tracking\n    this.testWallets.delete(testId);\n\n    // Run custom cleanup handlers\n    const handlers = this.cleanupHandlers.get(testId) || [];\n    for (const handler of handlers) {\n      try {\n        await handler();\n      } catch (error) {\n        console.warn('Custom cleanup handler failed:', error);\n      }\n    }\n    this.cleanupHandlers.delete(testId);\n\n    return {\n      cleanedUpInstances,\n      errors,\n      duration: Date.now() - startTime\n    };\n  }\n\n  /**\n   * Cleanup wallets for a browser context\n   */\n  async cleanupContext(contextId: string): Promise<WalletCleanupResult> {\n    const instanceIds = this.contextWallets.get(contextId);\n    if (!instanceIds || instanceIds.size === 0) {\n      return { cleanedUpInstances: 0, errors: [], duration: 0 };\n    }\n\n    const startTime = Date.now();\n    const errors: Array<{ instanceId: string; error: Error }> = [];\n    let cleanedUpInstances = 0;\n\n    for (const instanceId of instanceIds) {\n      try {\n        const { removeMockWallet } = await import('../install.js');\n        await removeMockWallet(instanceId);\n        cleanedUpInstances++;\n      } catch (error) {\n        errors.push({\n          instanceId,\n          error: error instanceof Error ? error : new Error(String(error))\n        });\n      }\n    }\n\n    // Remove context from tracking\n    this.contextWallets.delete(contextId);\n\n    return {\n      cleanedUpInstances,\n      errors,\n      duration: Date.now() - startTime\n    };\n  }\n\n  /**\n   * Add custom cleanup handler for a test\n   */\n  addCleanupHandler(testId: string, handler: () => Promise<void>): void {\n    if (!this.cleanupHandlers.has(testId)) {\n      this.cleanupHandlers.set(testId, []);\n    }\n    this.cleanupHandlers.get(testId)!.push(handler);\n  }\n\n  /**\n   * Get all wallet instances for a test\n   */\n  getTestWallets(testId: string): string[] {\n    return Array.from(this.testWallets.get(testId) || []);\n  }\n\n  /**\n   * Get all wallet instances for a context\n   */\n  getContextWallets(contextId: string): string[] {\n    return Array.from(this.contextWallets.get(contextId) || []);\n  }\n\n  /**\n   * Get isolation manager state\n   */\n  getState() {\n    return {\n      testWallets: Object.fromEntries(\n        Array.from(this.testWallets.entries()).map(\n          ([testId, instances]) => [testId, Array.from(instances)]\n        )\n      ),\n      contextWallets: Object.fromEntries(\n        Array.from(this.contextWallets.entries()).map(\n          ([contextId, instances]) => [contextId, Array.from(instances)]\n        )\n      ),\n      cleanupHandlers: Array.from(this.cleanupHandlers.keys()),\n    };\n  }\n\n  /**\n   * Clear all tracking (for testing purposes)\n   */\n  clear(): void {\n    this.testWallets.clear();\n    this.contextWallets.clear();\n    this.cleanupHandlers.clear();\n  }\n}\n\n/**\n * Setup automatic test isolation for a Playwright test\n *\n * @param testInfo - Playwright test info\n * @param page - Page instance\n * @param context - Browser context\n * @param config - Isolation configuration\n */\nexport async function setupTestIsolation(\n  testInfo: TestInfo,\n  page: Page,\n  context: BrowserContext,\n  config: TestIsolationConfig\n): Promise<void> {\n  const isolationManager = TestIsolationManager.getInstance();\n  const testId = getTestId(testInfo);\n  const contextId = getContextId(context);\n\n  // Setup cleanup handlers based on configuration\n  if (config.cleanupAfterTest) {\n    // Add afterEach cleanup - this would typically be done in fixtures\n    isolationManager.addCleanupHandler(testId, async () => {\n      await isolationManager.cleanupTest(testId);\n    });\n  }\n\n  if (config.cleanupOnFailure) {\n    // Monitor test failure and cleanup\n    testInfo.attach('wallet-cleanup-on-failure', {\n      body: JSON.stringify({\n        testId,\n        contextId,\n        timestamp: Date.now(),\n      }),\n      contentType: 'application/json',\n    });\n  }\n\n  // Setup page close handler\n  page.on('close', async () => {\n    if (config.isolatePerTest) {\n      await isolationManager.cleanupTest(testId);\n    }\n  });\n\n  // Setup context close handler\n  context.on('close', async () => {\n    if (config.isolatePerContext) {\n      await isolationManager.cleanupContext(contextId);\n    }\n  });\n\n  // Custom cleanup handler\n  if (config.customCleanup) {\n    isolationManager.addCleanupHandler(testId, config.customCleanup);\n  }\n}\n\n/**\n * Cleanup resources for failed tests\n */\nexport async function cleanupFailedTest(testInfo: TestInfo): Promise<WalletCleanupResult> {\n  const isolationManager = TestIsolationManager.getInstance();\n  const testId = getTestId(testInfo);\n\n  return await isolationManager.cleanupTest(testId);\n}\n\n/**\n * Get unique test identifier\n */\nexport function getTestId(testInfo: TestInfo): string {\n  const titlePath = testInfo.titlePath.join(' > ');\n  const projectName = testInfo.project?.name || 'default';\n  return `${projectName}:${Buffer.from(titlePath).toString('base64')}`;\n}\n\n/**\n * Get unique context identifier\n */\nexport function getContextId(context: BrowserContext): string {\n  // Use a property that's unique to the context\n  return (context as any)._guid || `context-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * Create isolated environment for wallet tests\n */\nexport async function createIsolatedEnvironment(\n  page: Page,\n  options: {\n    clearStorage?: boolean;\n    clearCookies?: boolean;\n    clearCache?: boolean;\n    blockNetworks?: string[];\n  } = {}\n): Promise<void> {\n  const context = page.context();\n\n  // Clear storage if requested\n  if (options.clearStorage) {\n    await context.clearCookies();\n    await page.evaluate(() => {\n      localStorage.clear();\n      sessionStorage.clear();\n    });\n  }\n\n  // Clear cookies if requested\n  if (options.clearCookies) {\n    await context.clearCookies();\n  }\n\n  // Setup network blocking\n  if (options.blockNetworks && options.blockNetworks.length > 0) {\n    await page.route(url => {\n      return options.blockNetworks!.some(pattern => url.includes(pattern));\n    }, route => route.abort());\n  }\n\n  // Inject test markers\n  await page.addInitScript(() => {\n    // Mark as test environment\n    (window as any).__WALLET_MOCK_TEST__ = true;\n    (window as any).__WALLET_MOCK_ISOLATED__ = true;\n  });\n}\n\n/**\n * Validate test environment isolation\n */\nexport async function validateTestIsolation(page: Page): Promise<{\n  isIsolated: boolean;\n  issues: string[];\n}> {\n  const issues: string[] = [];\n\n  // Check for test markers\n  const hasTestMarkers = await page.evaluate(() => {\n    return !!(window as any).__WALLET_MOCK_TEST__ && !!(window as any).__WALLET_MOCK_ISOLATED__;\n  });\n\n  if (!hasTestMarkers) {\n    issues.push('Test environment markers not found');\n  }\n\n  // Check for existing wallet instances that might interfere\n  const hasExistingWallets = await page.evaluate(() => {\n    return !!(window.ethereum && !(window.ethereum as any).__WALLET_MOCK__) ||\n           !!(window.solana && !(window.solana as any).__WALLET_MOCK__);\n  });\n\n  if (hasExistingWallets) {\n    issues.push('Non-mock wallet instances detected');\n  }\n\n  // Check for storage contamination\n  const hasStorageData = await page.evaluate(() => {\n    return localStorage.length > 0 || sessionStorage.length > 0;\n  });\n\n  if (hasStorageData) {\n    issues.push('Storage contains data that might affect tests');\n  }\n\n  return {\n    isIsolated: issues.length === 0,\n    issues,\n  };\n}\n\n/**\n * Wait for isolated environment to be ready\n */\nexport async function waitForIsolatedEnvironment(\n  page: Page,\n  timeout: number = 5000\n): Promise<void> {\n  await page.waitForFunction(() => {\n    return (window as any).__WALLET_MOCK_TEST__ === true;\n  }, { timeout });\n}","/**\n * @fileoverview Wallet helper utilities for Playwright tests\n *\n * This module provides helper functions for common wallet operations\n * and test scenarios in Playwright tests.\n */\n\nimport type { Page, Locator } from '@playwright/test';\nimport type { AccountConfig, ChainType } from '@arenaentertainment/wallet-mock-shared';\n\n/**\n * Common wallet interaction helpers\n */\nexport class WalletHelpers {\n  constructor(private page: Page) {}\n\n  /**\n   * Wait for wallet to be available in the page\n   */\n  async waitForWallet(chainType: ChainType = 'evm', timeout: number = 5000): Promise<void> {\n    const checkWallet = (type: ChainType) => {\n      if (type === 'evm') {\n        return window.ethereum && typeof window.ethereum.request === 'function';\n      } else if (type === 'solana') {\n        return window.solana && typeof window.solana.connect === 'function';\n      }\n      return false;\n    };\n\n    await this.page.waitForFunction(checkWallet, chainType, { timeout });\n  }\n\n  /**\n   * Connect to wallet from the page\n   */\n  async connectWallet(chainType: ChainType = 'evm'): Promise<void> {\n    if (chainType === 'evm') {\n      await this.page.evaluate(async () => {\n        if (window.ethereum) {\n          await window.ethereum.request({ method: 'eth_requestAccounts' });\n        }\n      });\n    } else if (chainType === 'solana') {\n      await this.page.evaluate(async () => {\n        if (window.solana && window.solana.connect) {\n          await window.solana.connect();\n        }\n      });\n    }\n  }\n\n  /**\n   * Disconnect wallet from the page\n   */\n  async disconnectWallet(chainType: ChainType = 'evm'): Promise<void> {\n    if (chainType === 'evm') {\n      // Most EVM wallets don't have a disconnect method, but we can simulate it\n      await this.page.evaluate(() => {\n        if (window.ethereum && (window.ethereum as any).__WALLET_MOCK__) {\n          (window.ethereum as any).disconnect?.();\n        }\n      });\n    } else if (chainType === 'solana') {\n      await this.page.evaluate(async () => {\n        if (window.solana && window.solana.disconnect) {\n          await window.solana.disconnect();\n        }\n      });\n    }\n  }\n\n  /**\n   * Switch to a different chain\n   */\n  async switchChain(chainId: string, chainType: ChainType = 'evm'): Promise<void> {\n    if (chainType === 'evm') {\n      await this.page.evaluate(async (id) => {\n        if (window.ethereum) {\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: id }],\n          });\n        }\n      }, chainId);\n    } else if (chainType === 'solana') {\n      // Solana chain switching would be implementation-specific\n      await this.page.evaluate((cluster) => {\n        if (window.solana && (window.solana as any).switchCluster) {\n          (window.solana as any).switchCluster(cluster);\n        }\n      }, chainId);\n    }\n  }\n\n  /**\n   * Get current account address\n   */\n  async getCurrentAccount(chainType: ChainType = 'evm'): Promise<string | null> {\n    if (chainType === 'evm') {\n      return await this.page.evaluate(async () => {\n        if (window.ethereum) {\n          const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n          return accounts[0] || null;\n        }\n        return null;\n      });\n    } else if (chainType === 'solana') {\n      return await this.page.evaluate(() => {\n        if (window.solana && window.solana.publicKey) {\n          return window.solana.publicKey.toString();\n        }\n        return null;\n      });\n    }\n    return null;\n  }\n\n  /**\n   * Sign a message\n   */\n  async signMessage(message: string, chainType: ChainType = 'evm'): Promise<string> {\n    if (chainType === 'evm') {\n      return await this.page.evaluate(async (msg) => {\n        if (window.ethereum) {\n          const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n          if (accounts.length === 0) {\n            throw new Error('No accounts available');\n          }\n          return await window.ethereum.request({\n            method: 'personal_sign',\n            params: [msg, accounts[0]],\n          });\n        }\n        throw new Error('Ethereum wallet not available');\n      }, message);\n    } else if (chainType === 'solana') {\n      return await this.page.evaluate(async (msg) => {\n        if (window.solana && window.solana.signMessage) {\n          const encodedMessage = new TextEncoder().encode(msg);\n          const signature = await window.solana.signMessage(encodedMessage, 'utf8');\n          return Array.from(signature.signature).map(b => b.toString(16).padStart(2, '0')).join('');\n        }\n        throw new Error('Solana wallet not available');\n      }, message);\n    }\n    throw new Error(`Unsupported chain type: ${chainType}`);\n  }\n\n  /**\n   * Send a transaction\n   */\n  async sendTransaction(\n    to: string,\n    value: string,\n    chainType: ChainType = 'evm'\n  ): Promise<string> {\n    if (chainType === 'evm') {\n      return await this.page.evaluate(async (params) => {\n        if (window.ethereum) {\n          const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n          if (accounts.length === 0) {\n            throw new Error('No accounts available');\n          }\n          return await window.ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [{\n              from: accounts[0],\n              to: params.to,\n              value: params.value,\n            }],\n          });\n        }\n        throw new Error('Ethereum wallet not available');\n      }, { to, value });\n    } else if (chainType === 'solana') {\n      // Solana transaction sending would be more complex and specific to the transaction type\n      return await this.page.evaluate(async (params) => {\n        if (window.solana && window.solana.signAndSendTransaction) {\n          // This is a simplified example - real Solana transactions need proper transaction objects\n          throw new Error('Solana transaction sending not implemented in this example');\n        }\n        throw new Error('Solana wallet not available');\n      }, { to, value });\n    }\n    throw new Error(`Unsupported chain type: ${chainType}`);\n  }\n\n  /**\n   * Check if wallet is connected\n   */\n  async isWalletConnected(chainType: ChainType = 'evm'): Promise<boolean> {\n    if (chainType === 'evm') {\n      return await this.page.evaluate(async () => {\n        if (window.ethereum) {\n          const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n          return accounts.length > 0;\n        }\n        return false;\n      });\n    } else if (chainType === 'solana') {\n      return await this.page.evaluate(() => {\n        return !!(window.solana && window.solana.isConnected);\n      });\n    }\n    return false;\n  }\n\n  /**\n   * Get wallet balance (simplified)\n   */\n  async getBalance(chainType: ChainType = 'evm'): Promise<string> {\n    if (chainType === 'evm') {\n      return await this.page.evaluate(async () => {\n        if (window.ethereum) {\n          const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n          if (accounts.length === 0) {\n            throw new Error('No accounts available');\n          }\n          return await window.ethereum.request({\n            method: 'eth_getBalance',\n            params: [accounts[0], 'latest'],\n          });\n        }\n        throw new Error('Ethereum wallet not available');\n      });\n    } else if (chainType === 'solana') {\n      return await this.page.evaluate(async () => {\n        if (window.solana && window.solana.getBalance) {\n          return await window.solana.getBalance();\n        }\n        throw new Error('Solana wallet not available or getBalance not supported');\n      });\n    }\n    throw new Error(`Unsupported chain type: ${chainType}`);\n  }\n\n  /**\n   * Listen for wallet events\n   */\n  async onWalletEvent(\n    eventName: string,\n    chainType: ChainType = 'evm'\n  ): Promise<void> {\n    if (chainType === 'evm') {\n      await this.page.evaluate((event) => {\n        if (window.ethereum) {\n          window.ethereum.on(event, (...args: any[]) => {\n            console.log(`Wallet event ${event}:`, args);\n          });\n        }\n      }, eventName);\n    } else if (chainType === 'solana') {\n      await this.page.evaluate((event) => {\n        if (window.solana && window.solana.on) {\n          window.solana.on(event, (...args: any[]) => {\n            console.log(`Solana wallet event ${event}:`, args);\n          });\n        }\n      }, eventName);\n    }\n  }\n}\n\n/**\n * Wallet interaction utilities\n */\nexport const walletInteractions = {\n  /**\n   * Click connect button with common selectors\n   */\n  async clickConnect(page: Page): Promise<void> {\n    const connectSelectors = [\n      'button:has-text(\"Connect\")',\n      'button:has-text(\"Connect Wallet\")',\n      '[data-testid=\"connect-wallet\"]',\n      '[data-testid=\"wallet-connect\"]',\n      '.connect-wallet',\n      '.wallet-connect',\n      'button[aria-label=\"Connect wallet\"]',\n    ];\n\n    for (const selector of connectSelectors) {\n      try {\n        const element = page.locator(selector).first();\n        if (await element.isVisible({ timeout: 1000 })) {\n          await element.click();\n          return;\n        }\n      } catch {\n        // Try next selector\n      }\n    }\n\n    throw new Error('Connect button not found');\n  },\n\n  /**\n   * Select wallet from list\n   */\n  async selectWallet(page: Page, walletName: string = 'MetaMask'): Promise<void> {\n    const walletSelectors = [\n      `button:has-text(\"${walletName}\")`,\n      `[data-testid=\"${walletName.toLowerCase()}\"]`,\n      `[data-wallet=\"${walletName.toLowerCase()}\"]`,\n      `.wallet-option:has-text(\"${walletName}\")`,\n    ];\n\n    for (const selector of walletSelectors) {\n      try {\n        const element = page.locator(selector).first();\n        if (await element.isVisible({ timeout: 2000 })) {\n          await element.click();\n          return;\n        }\n      } catch {\n        // Try next selector\n      }\n    }\n\n    throw new Error(`Wallet option \"${walletName}\" not found`);\n  },\n\n  /**\n   * Handle wallet approval modal\n   */\n  async approveConnection(page: Page): Promise<void> {\n    const approveSelectors = [\n      'button:has-text(\"Connect\")',\n      'button:has-text(\"Approve\")',\n      'button:has-text(\"Allow\")',\n      'button:has-text(\"Confirm\")',\n      '[data-testid=\"approve\"]',\n      '[data-testid=\"confirm\"]',\n      '.approve-button',\n      '.confirm-button',\n    ];\n\n    for (const selector of approveSelectors) {\n      try {\n        const element = page.locator(selector).first();\n        if (await element.isVisible({ timeout: 2000 })) {\n          await element.click();\n          return;\n        }\n      } catch {\n        // Try next selector\n      }\n    }\n\n    // If no explicit approval button, just wait a bit for auto-approval\n    await page.waitForTimeout(1000);\n  },\n\n  /**\n   * Reject connection\n   */\n  async rejectConnection(page: Page): Promise<void> {\n    const rejectSelectors = [\n      'button:has-text(\"Reject\")',\n      'button:has-text(\"Cancel\")',\n      'button:has-text(\"Deny\")',\n      '[data-testid=\"reject\"]',\n      '[data-testid=\"cancel\"]',\n      '.reject-button',\n      '.cancel-button',\n    ];\n\n    for (const selector of rejectSelectors) {\n      try {\n        const element = page.locator(selector).first();\n        if (await element.isVisible({ timeout: 2000 })) {\n          await element.click();\n          return;\n        }\n      } catch {\n        // Try next selector\n      }\n    }\n\n    throw new Error('Reject button not found');\n  },\n\n  /**\n   * Wait for wallet connection status\n   */\n  async waitForConnectionStatus(\n    page: Page,\n    connected: boolean,\n    timeout: number = 5000\n  ): Promise<void> {\n    await page.waitForFunction(\n      (expectedConnected) => {\n        const isConnected = !!(\n          (window.ethereum && window.ethereum.selectedAddress) ||\n          (window.solana && window.solana.isConnected)\n        );\n        return isConnected === expectedConnected;\n      },\n      connected,\n      { timeout }\n    );\n  },\n};\n\n/**\n * Create account configuration helpers\n */\nexport const accountHelpers = {\n  /**\n   * Create EVM-only account\n   */\n  createEVMAccount(chainIds: string[] = ['1'], name?: string): AccountConfig {\n    return {\n      type: 'evm_only',\n      name,\n      evm: { chainIds },\n    };\n  },\n\n  /**\n   * Create Solana-only account\n   */\n  createSolanaAccount(clusters: string[] = ['mainnet-beta'], name?: string): AccountConfig {\n    return {\n      type: 'solana_only',\n      name,\n      solana: { clusters },\n    };\n  },\n\n  /**\n   * Create dual-chain account\n   */\n  createDualChainAccount(\n    chainIds: string[] = ['1'],\n    clusters: string[] = ['mainnet-beta'],\n    name?: string\n  ): AccountConfig {\n    return {\n      type: 'dual_chain',\n      name,\n      evm: { chainIds },\n      solana: { clusters },\n    };\n  },\n\n  /**\n   * Create multiple test accounts\n   */\n  createTestAccounts(count: number, type: 'evm_only' | 'solana_only' | 'dual_chain' = 'evm_only'): AccountConfig[] {\n    const accounts: AccountConfig[] = [];\n\n    for (let i = 0; i < count; i++) {\n      const name = `Test Account ${i + 1}`;\n\n      switch (type) {\n        case 'evm_only':\n          accounts.push(this.createEVMAccount(['1'], name));\n          break;\n        case 'solana_only':\n          accounts.push(this.createSolanaAccount(['mainnet-beta'], name));\n          break;\n        case 'dual_chain':\n          accounts.push(this.createDualChainAccount(['1'], ['mainnet-beta'], name));\n          break;\n      }\n    }\n\n    return accounts;\n  },\n};","/**\n * @fileoverview Playwright fixtures for wallet mock integration\n *\n * This module provides Playwright fixtures that automatically handle wallet\n * setup, cleanup, and management for tests with proper isolation.\n */\n\nimport { test as base, expect, type Page, type BrowserContext } from '@playwright/test';\nimport { installMockWallet, cleanupAllWallets, getInstalledWallet } from '../install.js';\nimport {\n  TestIsolationManager,\n  setupTestIsolation,\n  cleanupFailedTest,\n  getTestId,\n  WalletHelpers,\n  createIsolatedEnvironment\n} from '../utils/index.js';\nimport type {\n  PlaywrightWalletContext,\n  InstallMockWalletOptions,\n  PlaywrightFixtureOptions,\n  WalletInstallationResult,\n  TestIsolationConfig,\n  PlaywrightSecurityConfig,\n  SecurityLevel\n} from '../types.js';\nimport type { WalletConfig, WalletState } from '@arenaentertainment/wallet-mock-shared';\n\n/**\n * Default fixture configuration\n */\nconst DEFAULT_FIXTURE_CONFIG: PlaywrightFixtureOptions = {\n  defaultConfig: {\n    autoConnect: true,\n    security: {\n      enableProductionChecks: true,\n      enableSecureMemory: true,\n      autoCleanup: true,\n    },\n    debug: {\n      enableLogging: false,\n      logLevel: 'info',\n    },\n  },\n  defaultSecurity: {\n    level: SecurityLevel.TESTING,\n    checkProduction: true,\n    validateContext: true,\n    secureCleanup: true,\n    maxInstances: 10,\n    sessionTimeout: 30 * 60 * 1000,\n  },\n  defaultIsolation: {\n    isolatePerTest: true,\n    isolatePerContext: false,\n    cleanupAfterTest: true,\n    cleanupOnFailure: true,\n  },\n  autoInstall: false,\n  autoCleanup: true,\n};\n\n/**\n * Extended test context with wallet support\n */\ninterface WalletTestContext extends PlaywrightWalletContext {\n  walletHelpers: WalletHelpers;\n  fixtureConfig: PlaywrightFixtureOptions;\n}\n\n/**\n * Wallet fixture options that can be passed to test configuration\n */\nexport interface WalletFixtureConfig extends Partial<PlaywrightFixtureOptions> {\n  // Additional fixture-specific options\n}\n\n/**\n * Create Playwright fixtures with wallet support\n */\nexport const test = base.extend<WalletTestContext>({\n  /**\n   * Wallet manager fixture - handles wallet lifecycle\n   */\n  walletManager: async ({ page, context }, use, testInfo) => {\n    const isolationManager = TestIsolationManager.getInstance();\n    const testId = getTestId(testInfo);\n\n    // Create a wallet manager instance for this test\n    const walletManager = {\n      async initialize(\n        pageInstance: Page,\n        contextInstance: BrowserContext,\n        options: PlaywrightFixtureOptions = {}\n      ) {\n        const config = { ...DEFAULT_FIXTURE_CONFIG, ...options };\n\n        // Setup test isolation\n        await setupTestIsolation(\n          testInfo,\n          pageInstance,\n          contextInstance,\n          config.defaultIsolation!\n        );\n\n        // Create isolated environment if needed\n        await createIsolatedEnvironment(pageInstance, {\n          clearStorage: true,\n          clearCookies: true,\n        });\n      },\n\n      async installWallet(options: InstallMockWalletOptions = {}) {\n        const result = await installMockWallet(page, options);\n\n        // Register with isolation manager\n        isolationManager.registerWalletForTest(\n          testId,\n          result.instanceId,\n          (context as any)._guid\n        );\n\n        return result;\n      },\n\n      async getWallet(instanceId?: string) {\n        const installation = getInstalledWallet(instanceId);\n        return installation?.wallet || null;\n      },\n\n      async removeWallet(instanceId?: string) {\n        const { removeMockWallet } = await import('../install.js');\n        await removeMockWallet(instanceId, page);\n\n        if (instanceId) {\n          isolationManager.unregisterWallet(instanceId);\n        }\n      },\n\n      async getAllWallets() {\n        // This would need to be implemented in the install module\n        return [];\n      },\n\n      async cleanup() {\n        await isolationManager.cleanupTest(testId);\n      },\n\n      getState() {\n        return {\n          instances: new Map(),\n          session: { id: testId, startedAt: Date.now(), lastActivity: Date.now() },\n          security: {\n            level: SecurityLevel.TESTING,\n            validatedOrigins: new Set(),\n            tokenCache: new Map(),\n          }\n        };\n      },\n\n      async securityCheck() {\n        return true;\n      },\n\n      async dispose() {\n        await this.cleanup();\n      }\n    };\n\n    await walletManager.initialize(page, context);\n\n    await use(walletManager);\n\n    // Cleanup after test\n    await walletManager.cleanup();\n  },\n\n  /**\n   * Install wallet helper function\n   */\n  installWallet: async ({ walletManager }, use) => {\n    const installFunction = async (options: InstallMockWalletOptions = {}) => {\n      return await walletManager.installWallet(options);\n    };\n\n    await use(installFunction);\n  },\n\n  /**\n   * Get wallet helper function\n   */\n  getWallet: async ({ walletManager }, use) => {\n    const getFunction = async (instanceId?: string) => {\n      return await walletManager.getWallet(instanceId);\n    };\n\n    await use(getFunction);\n  },\n\n  /**\n   * Remove wallet helper function\n   */\n  removeWallet: async ({ walletManager }, use) => {\n    const removeFunction = async (instanceId?: string) => {\n      await walletManager.removeWallet(instanceId);\n    };\n\n    await use(removeFunction);\n  },\n\n  /**\n   * Cleanup wallets helper function\n   */\n  cleanupWallets: async ({ walletManager }, use) => {\n    const cleanupFunction = async () => {\n      await walletManager.cleanup();\n    };\n\n    await use(cleanupFunction);\n  },\n\n  /**\n   * Get wallet state helper function\n   */\n  getWalletState: async ({ walletManager }, use) => {\n    const getStateFunction = async (instanceId?: string): Promise<WalletState | null> => {\n      const wallet = await walletManager.getWallet(instanceId);\n      if (!wallet || typeof wallet.getState !== 'function') {\n        return null;\n      }\n      return await wallet.getState();\n    };\n\n    await use(getStateFunction);\n  },\n\n  /**\n   * Wallet helpers utility\n   */\n  walletHelpers: async ({ page }, use) => {\n    const helpers = new WalletHelpers(page);\n    await use(helpers);\n  },\n\n  /**\n   * Fixture configuration\n   */\n  fixtureConfig: async ({}, use) => {\n    await use(DEFAULT_FIXTURE_CONFIG);\n  },\n});\n\n/**\n * Pre-configured test with auto-installed EVM wallet\n */\nexport const testWithEVMWallet = test.extend({\n  /**\n   * Auto-install EVM wallet before test\n   */\n  evmWallet: async ({ installWallet }, use) => {\n    const wallet = await installWallet({\n      accounts: [{\n        type: 'evm_only',\n        name: 'Test Account',\n        evm: { chainIds: ['1', '137'] } // Ethereum + Polygon\n      }],\n      autoConnect: true,\n      waitForReady: true\n    });\n\n    await use(wallet);\n  },\n});\n\n/**\n * Pre-configured test with auto-installed Solana wallet\n */\nexport const testWithSolanaWallet = test.extend({\n  /**\n   * Auto-install Solana wallet before test\n   */\n  solanaWallet: async ({ installWallet }, use) => {\n    const wallet = await installWallet({\n      accounts: [{\n        type: 'solana_only',\n        name: 'Test Account',\n        solana: { clusters: ['mainnet-beta', 'devnet'] }\n      }],\n      autoConnect: true,\n      waitForReady: true\n    });\n\n    await use(wallet);\n  },\n});\n\n/**\n * Pre-configured test with auto-installed multi-chain wallet\n */\nexport const testWithMultiChainWallet = test.extend({\n  /**\n   * Auto-install multi-chain wallet before test\n   */\n  multiChainWallet: async ({ installWallet }, use) => {\n    const wallet = await installWallet({\n      accounts: [{\n        type: 'dual_chain',\n        name: 'Multi-chain Test Account',\n        evm: { chainIds: ['1', '137'] },\n        solana: { clusters: ['mainnet-beta'] }\n      }],\n      autoConnect: true,\n      waitForReady: true\n    });\n\n    await use(wallet);\n  },\n});\n\n/**\n * Test configuration with enhanced error handling\n */\nexport const testWithErrorHandling = test.extend({\n  page: async ({ page, context }, use, testInfo) => {\n    // Setup error monitoring\n    page.on('pageerror', (error) => {\n      console.error('Page error in test:', error);\n      testInfo.attach('page-error', {\n        body: error.stack || error.message,\n        contentType: 'text/plain'\n      });\n    });\n\n    page.on('console', (msg) => {\n      if (msg.type() === 'error') {\n        console.error('Console error:', msg.text());\n        testInfo.attach('console-error', {\n          body: msg.text(),\n          contentType: 'text/plain'\n        });\n      }\n    });\n\n    // Setup uncaught exception handling\n    page.on('requestfailed', (request) => {\n      console.warn('Request failed:', request.url(), request.failure()?.errorText);\n    });\n\n    await use(page);\n\n    // Cleanup on test failure\n    if (testInfo.status === 'failed') {\n      try {\n        await cleanupFailedTest(testInfo);\n\n        // Take screenshot on failure\n        const screenshot = await page.screenshot();\n        testInfo.attach('failure-screenshot', {\n          body: screenshot,\n          contentType: 'image/png'\n        });\n\n        // Collect wallet state on failure\n        const walletState = await page.evaluate(() => {\n          const state: any = {};\n          if (window.ethereum) {\n            state.ethereum = {\n              isConnected: !!(window.ethereum as any).selectedAddress,\n              chainId: (window.ethereum as any).chainId,\n              selectedAddress: (window.ethereum as any).selectedAddress\n            };\n          }\n          if (window.solana) {\n            state.solana = {\n              isConnected: !!(window.solana as any).isConnected,\n              publicKey: (window.solana as any).publicKey?.toString()\n            };\n          }\n          return state;\n        });\n\n        testInfo.attach('wallet-state-on-failure', {\n          body: JSON.stringify(walletState, null, 2),\n          contentType: 'application/json'\n        });\n\n      } catch (cleanupError) {\n        console.warn('Failed to cleanup after test failure:', cleanupError);\n      }\n    }\n  },\n});\n\n/**\n * Custom expect extensions for wallet testing\n */\nexport const expectWallet = expect.extend({\n  /**\n   * Check if wallet is connected\n   */\n  async toBeConnected(page: Page, chainType: 'evm' | 'solana' = 'evm') {\n    const isConnected = await page.evaluate((type) => {\n      if (type === 'evm') {\n        return !!(window.ethereum && (window.ethereum as any).selectedAddress);\n      } else {\n        return !!(window.solana && (window.solana as any).isConnected);\n      }\n    }, chainType);\n\n    return {\n      message: () => `expected wallet to be ${isConnected ? 'disconnected' : 'connected'}`,\n      pass: isConnected,\n    };\n  },\n\n  /**\n   * Check if wallet has specific account\n   */\n  async toHaveAccount(page: Page, expectedAddress: string, chainType: 'evm' | 'solana' = 'evm') {\n    const currentAddress = await page.evaluate((type) => {\n      if (type === 'evm') {\n        return (window.ethereum as any)?.selectedAddress || null;\n      } else {\n        return (window.solana as any)?.publicKey?.toString() || null;\n      }\n    }, chainType);\n\n    const matches = currentAddress === expectedAddress;\n\n    return {\n      message: () =>\n        `expected wallet to have account ${expectedAddress}, but got ${currentAddress}`,\n      pass: matches,\n    };\n  },\n\n  /**\n   * Check if wallet is on specific chain\n   */\n  async toBeOnChain(page: Page, expectedChainId: string) {\n    const currentChainId = await page.evaluate(() => {\n      return (window.ethereum as any)?.chainId || null;\n    });\n\n    const matches = currentChainId === expectedChainId;\n\n    return {\n      message: () =>\n        `expected wallet to be on chain ${expectedChainId}, but got ${currentChainId}`,\n      pass: matches,\n    };\n  },\n});\n\n// Re-export expect with wallet extensions\nexport { expectWallet as expect };","/**\n * @fileoverview TypeScript type definitions for Playwright integration\n *\n * This file defines all the types specific to the Playwright integration\n * of the wallet-mock library, including browser bridge communication,\n * test isolation, and security configuration.\n */\n\nimport type { Page, BrowserContext } from '@playwright/test';\nimport type {\n  WalletConfig,\n  AccountConfig,\n  MockWallet,\n  WalletState,\n  ChainType\n} from '@arenaentertainment/wallet-mock-shared';\n\n/**\n * Security level for the Playwright integration\n */\nexport enum SecurityLevel {\n  /** Development environment - minimal checks */\n  DEVELOPMENT = 'development',\n  /** Testing environment - moderate security */\n  TESTING = 'testing',\n  /** Strict mode - maximum security (recommended for CI) */\n  STRICT = 'strict'\n}\n\n/**\n * Environment detection result\n */\nexport interface EnvironmentInfo {\n  /** Whether we're running in a test environment */\n  isTest: boolean;\n  /** Whether we're running in CI */\n  isCI: boolean;\n  /** Whether we're running in development */\n  isDevelopment: boolean;\n  /** Whether we're running in production (should be false) */\n  isProduction: boolean;\n  /** Node.js version */\n  nodeVersion: string;\n  /** Playwright version */\n  playwrightVersion?: string;\n}\n\n/**\n * Security configuration for Playwright integration\n */\nexport interface PlaywrightSecurityConfig {\n  /** Security level to apply */\n  level: SecurityLevel;\n  /** Whether to perform production environment checks */\n  checkProduction: boolean;\n  /** Whether to validate browser context */\n  validateContext: boolean;\n  /** Whether to enable secure cleanup on test failure */\n  secureCleanup: boolean;\n  /** Allowed origins for wallet installation */\n  allowedOrigins?: string[];\n  /** Maximum number of wallet instances per test */\n  maxInstances?: number;\n  /** Session timeout in milliseconds */\n  sessionTimeout?: number;\n}\n\n/**\n * Bridge message types for secure communication\n */\nexport enum BridgeMessageType {\n  /** Install wallet instance */\n  INSTALL_WALLET = 'install_wallet',\n  /** Remove wallet instance */\n  REMOVE_WALLET = 'remove_wallet',\n  /** Update wallet configuration */\n  UPDATE_CONFIG = 'update_config',\n  /** Request wallet state */\n  GET_STATE = 'get_state',\n  /** Cleanup all instances */\n  CLEANUP_ALL = 'cleanup_all',\n  /** Security check */\n  SECURITY_CHECK = 'security_check',\n  /** Heartbeat for session management */\n  HEARTBEAT = 'heartbeat'\n}\n\n/**\n * Bridge message structure for Node.js to browser communication\n */\nexport interface BridgeMessage<TPayload = any> {\n  /** Unique message ID */\n  id: string;\n  /** Message type */\n  type: BridgeMessageType;\n  /** Message payload */\n  payload: TPayload;\n  /** Timestamp when message was created */\n  timestamp: number;\n  /** Session ID for tracking */\n  sessionId: string;\n  /** Security token */\n  securityToken?: string;\n}\n\n/**\n * Bridge response structure for browser to Node.js communication\n */\nexport interface BridgeResponse<TData = any> {\n  /** Message ID this response is for */\n  messageId: string;\n  /** Whether the operation was successful */\n  success: boolean;\n  /** Response data (on success) */\n  data?: TData;\n  /** Error information (on failure) */\n  error?: {\n    message: string;\n    code?: string;\n    stack?: string;\n  };\n  /** Response timestamp */\n  timestamp: number;\n}\n\n/**\n * Wallet installation request payload\n */\nexport interface InstallWalletPayload {\n  /** Wallet configuration */\n  config: WalletConfig;\n  /** Unique instance ID */\n  instanceId: string;\n  /** Whether to override existing instance */\n  override?: boolean;\n  /** Target chain types */\n  chainTypes?: ChainType[];\n}\n\n/**\n * Wallet installation result\n */\nexport interface WalletInstallationResult {\n  /** Installed wallet instance */\n  wallet: MockWallet;\n  /** Instance ID */\n  instanceId: string;\n  /** Installation timestamp */\n  installedAt: number;\n  /** Supported chain types */\n  supportedChains: ChainType[];\n}\n\n/**\n * Test isolation configuration\n */\nexport interface TestIsolationConfig {\n  /** Whether to isolate wallet instances per test */\n  isolatePerTest: boolean;\n  /** Whether to isolate per browser context */\n  isolatePerContext: boolean;\n  /** Whether to clean up after each test */\n  cleanupAfterTest: boolean;\n  /** Whether to clean up on test failure */\n  cleanupOnFailure: boolean;\n  /** Custom cleanup handler */\n  customCleanup?: () => Promise<void>;\n}\n\n/**\n * Playwright wallet manager state\n */\nexport interface PlaywrightWalletManagerState {\n  /** Active wallet instances */\n  instances: Map<string, WalletInstallationResult>;\n  /** Session information */\n  session: {\n    id: string;\n    startedAt: number;\n    lastActivity: number;\n  };\n  /** Security state */\n  security: {\n    level: SecurityLevel;\n    validatedOrigins: Set<string>;\n    tokenCache: Map<string, { token: string; expiresAt: number }>;\n  };\n}\n\n/**\n * Options for wallet installation in Playwright tests\n */\nexport interface InstallMockWalletOptions {\n  /** Wallet configuration */\n  config?: Partial<WalletConfig>;\n  /** Accounts to create */\n  accounts?: AccountConfig[];\n  /** Security configuration */\n  security?: Partial<PlaywrightSecurityConfig>;\n  /** Test isolation configuration */\n  isolation?: Partial<TestIsolationConfig>;\n  /** Custom instance ID */\n  instanceId?: string;\n  /** Whether to auto-connect after installation */\n  autoConnect?: boolean;\n  /** Whether to wait for wallet to be ready */\n  waitForReady?: boolean;\n  /** Timeout for installation (ms) */\n  timeout?: number;\n}\n\n/**\n * Playwright fixture options\n */\nexport interface PlaywrightFixtureOptions {\n  /** Default wallet configuration */\n  defaultConfig?: WalletConfig;\n  /** Default security settings */\n  defaultSecurity?: PlaywrightSecurityConfig;\n  /** Default isolation settings */\n  defaultIsolation?: TestIsolationConfig;\n  /** Whether to auto-install wallet */\n  autoInstall?: boolean;\n  /** Whether to auto-cleanup */\n  autoCleanup?: boolean;\n}\n\n/**\n * Extended Playwright test context with wallet support\n */\nexport interface PlaywrightWalletContext {\n  /** The Playwright page */\n  page: Page;\n  /** The browser context */\n  context: BrowserContext;\n  /** Wallet manager instance */\n  walletManager: PlaywrightWalletManager;\n  /** Install a mock wallet */\n  installWallet: (options?: InstallMockWalletOptions) => Promise<WalletInstallationResult>;\n  /** Get installed wallet by instance ID */\n  getWallet: (instanceId?: string) => Promise<MockWallet | null>;\n  /** Remove wallet instance */\n  removeWallet: (instanceId?: string) => Promise<void>;\n  /** Clean up all wallet instances */\n  cleanupWallets: () => Promise<void>;\n  /** Get current wallet state */\n  getWalletState: (instanceId?: string) => Promise<WalletState | null>;\n}\n\n/**\n * Playwright wallet manager interface\n */\nexport interface PlaywrightWalletManager {\n  /** Initialize the manager */\n  initialize(page: Page, context: BrowserContext, options?: PlaywrightFixtureOptions): Promise<void>;\n\n  /** Install a wallet instance */\n  installWallet(options: InstallMockWalletOptions): Promise<WalletInstallationResult>;\n\n  /** Get wallet by instance ID */\n  getWallet(instanceId: string): Promise<MockWallet | null>;\n\n  /** Remove wallet instance */\n  removeWallet(instanceId: string): Promise<void>;\n\n  /** Get all wallet instances */\n  getAllWallets(): Promise<WalletInstallationResult[]>;\n\n  /** Clean up all instances */\n  cleanup(): Promise<void>;\n\n  /** Get manager state */\n  getState(): PlaywrightWalletManagerState;\n\n  /** Perform security check */\n  securityCheck(): Promise<boolean>;\n\n  /** Dispose resources */\n  dispose(): Promise<void>;\n}\n\n/**\n * Wallet cleanup result\n */\nexport interface WalletCleanupResult {\n  /** Number of instances cleaned up */\n  cleanedUpInstances: number;\n  /** Any errors that occurred during cleanup */\n  errors: Array<{ instanceId: string; error: Error }>;\n  /** Cleanup duration in milliseconds */\n  duration: number;\n}\n\n/**\n * Bridge setup configuration\n */\nexport interface BridgeSetupConfig {\n  /** Security configuration */\n  security: PlaywrightSecurityConfig;\n  /** Session timeout */\n  sessionTimeout: number;\n  /** Maximum message size */\n  maxMessageSize: number;\n  /** Whether to enable logging */\n  enableLogging: boolean;\n  /** Log level */\n  logLevel: 'debug' | 'info' | 'warn' | 'error';\n}\n\n/**\n * Custom error types for Playwright integration\n */\nexport class PlaywrightWalletError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public context?: Record<string, any>\n  ) {\n    super(message);\n    this.name = 'PlaywrightWalletError';\n  }\n}\n\nexport class SecurityViolationError extends PlaywrightWalletError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, 'SECURITY_VIOLATION', context);\n    this.name = 'SecurityViolationError';\n  }\n}\n\nexport class InstallationError extends PlaywrightWalletError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, 'INSTALLATION_ERROR', context);\n    this.name = 'InstallationError';\n  }\n}\n\nexport class BridgeError extends PlaywrightWalletError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, 'BRIDGE_ERROR', context);\n    this.name = 'BridgeError';\n  }\n}\n\n/**\n * Type guard utilities\n */\nexport const isPlaywrightWalletError = (error: any): error is PlaywrightWalletError => {\n  return error instanceof Error && 'code' in error;\n};\n\nexport const isSecurityViolationError = (error: any): error is SecurityViolationError => {\n  return error instanceof SecurityViolationError;\n};\n\nexport const isInstallationError = (error: any): error is InstallationError => {\n  return error instanceof InstallationError;\n};\n\nexport const isBridgeError = (error: any): error is BridgeError => {\n  return error instanceof BridgeError;\n};","/**\n * @arenaentertainment/wallet-mock-playwright\n *\n * Playwright integration package for the wallet-mock library\n *\n * This package provides comprehensive Playwright testing support for wallet\n * mock functionality, including secure installation, test isolation, fixtures,\n * and helper utilities.\n *\n * Features:\n * - Secure bridge communication between Node.js test environment and browser\n * - Multiple wallet instance support with proper isolation\n * - Production environment protection with security checks\n * - EVM and Solana chain support\n * - Comprehensive fixtures for easy test setup\n * - Helper utilities for common wallet operations\n * - Automatic cleanup and resource management\n * - TypeScript support with full type safety\n *\n * @example Basic Usage\n * ```typescript\n * import { installMockWallet } from '@arenaentertainment/wallet-mock-playwright';\n *\n * test('dApp wallet interaction', async ({ page }) => {\n *   await installMockWallet(page, {\n *     accounts: [{\n *       type: 'evm_only',\n *       evm: { chainIds: ['1', '137'] }\n *     }],\n *     autoConnect: true\n *   });\n *\n *   await page.goto('https://your-dapp.local');\n *   // window.ethereum is now available\n * });\n * ```\n *\n * @example With Fixtures\n * ```typescript\n * import { testWithEVMWallet } from '@arenaentertainment/wallet-mock-playwright';\n *\n * testWithEVMWallet('dApp interaction with auto-setup', async ({\n *   page,\n *   evmWallet,\n *   walletHelpers\n * }) => {\n *   await page.goto('https://your-dapp.local');\n *\n *   // Wallet is already installed and connected\n *   await walletHelpers.waitForWallet();\n *   const account = await walletHelpers.getCurrentAccount();\n *\n *   // Interact with dApp...\n * });\n * ```\n */\n\n// Core installation and management functions\nexport {\n  installMockWallet,\n  removeMockWallet,\n  getInstalledWallet,\n  cleanupAllWallets\n} from './install.js';\n\n// Bridge communication (advanced usage)\nexport {\n  MessageBridge,\n  detectEnvironment,\n  validateEnvironment,\n  generateSecureToken,\n  generateSessionId,\n  validateSecurityToken,\n  sanitiseSensitiveData,\n  validateOrigin,\n  securityRateLimiter,\n  validateSecurityLevel,\n  createSecureCleanup,\n  DEFAULT_SECURITY_CONFIG\n} from './bridge/index.js';\n\n// Test utilities and helpers\nexport {\n  TestIsolationManager,\n  setupTestIsolation,\n  cleanupFailedTest,\n  getTestId,\n  getContextId,\n  createIsolatedEnvironment,\n  validateTestIsolation,\n  waitForIsolatedEnvironment,\n  WalletHelpers,\n  walletInteractions,\n  accountHelpers\n} from './utils/index.js';\n\n// Playwright fixtures and testing utilities\nexport {\n  test,\n  testWithEVMWallet,\n  testWithSolanaWallet,\n  testWithMultiChainWallet,\n  testWithErrorHandling,\n  expect,\n  expectWallet\n} from './fixtures/index.js';\n\n// Type definitions\nexport type {\n  // Core types\n  InstallMockWalletOptions,\n  WalletInstallationResult,\n  PlaywrightWalletManager,\n  PlaywrightWalletContext,\n\n  // Security types\n  SecurityLevel,\n  PlaywrightSecurityConfig,\n  EnvironmentInfo,\n\n  // Bridge types\n  BridgeMessage,\n  BridgeResponse,\n  BridgeMessageType,\n  BridgeSetupConfig,\n  InstallWalletPayload,\n\n  // Test isolation types\n  TestIsolationConfig,\n  WalletCleanupResult,\n  PlaywrightWalletManagerState,\n\n  // Fixture types\n  PlaywrightFixtureOptions,\n  WalletFixtureConfig,\n\n  // Error types\n  PlaywrightWalletError,\n  SecurityViolationError,\n  InstallationError,\n  BridgeError\n} from './types.js';\n\n// Enum exports\nexport {\n  SecurityLevel,\n  BridgeMessageType\n} from './types.js';\n\n// Error classes\nexport {\n  PlaywrightWalletError,\n  SecurityViolationError,\n  InstallationError,\n  BridgeError,\n  isPlaywrightWalletError,\n  isSecurityViolationError,\n  isInstallationError,\n  isBridgeError\n} from './types.js';\n\n// Re-export shared types for convenience\nexport type {\n  // Account and chain types from shared package\n  Account,\n  AccountConfig,\n  AccountType,\n  EVMAccount,\n  SolanaAccount,\n  DualChainAccount,\n  EVMAccountData,\n  SolanaAccountData,\n  ChainType,\n  SupportedChain,\n  EVMChain,\n  SolanaCluster,\n\n  // Wallet types from shared package\n  WalletConfig,\n  WalletState,\n  MockWallet,\n  TransactionRequest,\n  SignatureRequest,\n  WalletEvents,\n  AccountEvents,\n  ChainEvents,\n  EventEmitter\n} from '@arenaentertainment/wallet-mock-shared';\n\n// Re-export enums from shared package\nexport { AccountType, CHAIN_PRESETS } from '@arenaentertainment/wallet-mock-shared';\n\n// Re-export standards types for convenience (these might be used in tests)\nexport type {\n  // EIP-1193 Ethereum Provider\n  EthereumProvider,\n  ProviderRequest,\n  ProviderRpcError,\n  ProviderEvents,\n\n  // Solana Wallet Standard\n  SolanaWallet,\n  WalletAccount,\n  SolanaConnect,\n  SolanaDisconnect,\n  SolanaEvents,\n  SolanaSignTransaction,\n  SolanaSignMessage,\n  SolanaWalletEvents\n} from '@arenaentertainment/wallet-mock-standards';\n\n/**\n * Package version and metadata\n */\nexport const VERSION = '0.1.0';\nexport const PACKAGE_NAME = '@arenaentertainment/wallet-mock-playwright';\n\n/**\n * Default configuration exports for easy access\n */\nexport const DEFAULT_INSTALL_OPTIONS: Partial<InstallMockWalletOptions> = {\n  autoConnect: true,\n  waitForReady: true,\n  timeout: 10000,\n  security: {\n    level: SecurityLevel.TESTING,\n    checkProduction: true,\n    validateContext: true,\n    secureCleanup: true,\n  },\n  isolation: {\n    isolatePerTest: true,\n    isolatePerContext: false,\n    cleanupAfterTest: true,\n    cleanupOnFailure: true,\n  }\n};\n\n/**\n * Quick setup functions for common scenarios\n */\nexport const quickSetup = {\n  /**\n   * Quick EVM wallet setup for tests\n   */\n  async evmWallet(page: any, chainIds: string[] = ['1']) {\n    return await installMockWallet(page, {\n      accounts: [{\n        type: 'evm_only' as const,\n        name: 'Test EVM Account',\n        evm: { chainIds }\n      }],\n      ...DEFAULT_INSTALL_OPTIONS\n    });\n  },\n\n  /**\n   * Quick Solana wallet setup for tests\n   */\n  async solanaWallet(page: any, clusters: string[] = ['mainnet-beta']) {\n    return await installMockWallet(page, {\n      accounts: [{\n        type: 'solana_only' as const,\n        name: 'Test Solana Account',\n        solana: { clusters }\n      }],\n      ...DEFAULT_INSTALL_OPTIONS\n    });\n  },\n\n  /**\n   * Quick multi-chain wallet setup for tests\n   */\n  async multiChainWallet(\n    page: any,\n    chainIds: string[] = ['1'],\n    clusters: string[] = ['mainnet-beta']\n  ) {\n    return await installMockWallet(page, {\n      accounts: [{\n        type: 'dual_chain' as const,\n        name: 'Test Multi-chain Account',\n        evm: { chainIds },\n        solana: { clusters }\n      }],\n      ...DEFAULT_INSTALL_OPTIONS\n    });\n  }\n};\n\n/**\n * Environment validation function for safety checks\n */\nexport function validateTestEnvironment(): void {\n  const env = detectEnvironment();\n\n  if (env.isProduction) {\n    throw new SecurityViolationError(\n      'Wallet mock cannot be used in production environment. ' +\n      'This is a safety measure to prevent accidental usage in production.'\n    );\n  }\n\n  if (!env.isTest && !env.isDevelopment) {\n    console.warn(\n      'Warning: Using wallet mock in unrecognised environment. ' +\n      'Ensure this is intended for testing purposes only.'\n    );\n  }\n}\n\n// Validate environment on import (with error handling)\ntry {\n  validateTestEnvironment();\n} catch (error) {\n  // In production, this will throw, which is the intended behaviour\n  throw error;\n}"],"names":["DEFAULT_SECURITY_CONFIG","detectEnvironment","installMockWallet","removeMockWallet","base","SecurityLevel","BridgeMessageType","SecurityViolationError","InstallationError","BridgeError"],"mappings":";;;;;;AAkBO,MAAMA,4BAAoD;AAAA,EAC/D,OAAO,cAAc;AAAA,EACrB,iBAAiB;AAAA,EACjB,iBAAiB;AAAA,EACjB,eAAe;AAAA,EACf,cAAc;AAAA,EACd,gBAAgB,KAAK,KAAK;AAAA;AAC5B;AAKA,MAAM,wBAAwB;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAKA,MAAM,kBAAkB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAKO,SAASC,sBAAqC;AACnD,QAAM,MAAM,QAAQ;AACpB,QAAM,cAAc,QAAQ;AAG5B,QAAM,OAAO,CAAC,EACZ,IAAI,MACJ,IAAI,kBACJ,IAAI,eACJ,IAAI,aACJ,IAAI,YACJ,IAAI,UACJ,IAAI;AAIN,QAAM,WAAW,IAAI,YAAY,IAAI,YAAA;AAGrC,QAAM,eAAe,sBAAsB;AAAA,IAAK,CAAA,cAC9C,QAAQ,SAAS,SAAS,MACzB,IAAI,eAAe,IAAI,YAAA,EAAc,SAAS,SAAS;AAAA,EAAA;AAI1D,QAAM,SAAS,gBAAgB;AAAA,IAAK,CAAA,cAClC,QAAQ,SAAS,SAAS,MACzB,IAAI,eAAe,IAAI,YAAA,EAAc,SAAS,SAAS;AAAA,EAAA,KACrD;AAEL,QAAM,gBAAgB,YAAY,iBAAkB,CAAC,gBAAgB,CAAC;AAGtE,MAAI;AACJ,MAAI;AAEF,UAAM,MAAM,QAAQ,+BAA+B;AACnD,wBAAoB,IAAI;AAAA,EAC1B,QAAQ;AAAA,EAER;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;AAKO,SAAS,oBAAoB,QAAwC;AAC1E,MAAI,CAAC,OAAO,gBAAiB;AAE7B,QAAM,MAAMA,oBAAA;AAEZ,MAAI,IAAI,cAAc;AACpB,UAAM,IAAI;AAAA,MACR;AAAA,MACA,EAAE,aAAa,IAAA;AAAA,IAAI;AAAA,EAEvB;AAGA,MAAI,OAAO,WAAW,eAAe,OAAO,UAAU;AACpD,UAAM,WAAW,OAAO,SAAS;AACjC,UAAM,oBAAoB;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA;AAAA,IAAA;AAIF,QAAI,kBAAkB,KAAK,CAAA,WAAU,SAAS,SAAS,MAAM,CAAC,GAAG;AAC/D,YAAM,IAAI;AAAA,QACR,oDAAoD,QAAQ;AAAA,QAC5D,EAAE,UAAU,QAAQ,OAAO,SAAS,KAAA;AAAA,MAAK;AAAA,IAE7C;AAAA,EACF;AACF;AAKO,SAAS,oBAAoB,SAAiB,IAAY;AAC/D,QAAM,QAAQ,aAAa,aAAa,MAAM;AAC9C,SAAO,MAAM,KAAK,OAAO,CAAA,SAAQ,KAAK,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC,EAAE,KAAK,EAAE;AAC9E;AAKO,SAAS,oBAA4B;AAC1C,QAAM,YAAY,KAAK,IAAA,EAAM,SAAA;AAC7B,QAAM,SAAS,oBAAoB,EAAE;AAErC,MAAI,OAAO;AACX,QAAM,QAAQ,GAAG,SAAS,IAAI,MAAM;AACpC,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAS,QAAQ,KAAK,OAAO,MAAM,WAAW,CAAC,IAAK;AAAA,EACtD;AACA,SAAO,KAAK,IAAI,IAAI,EAAE,SAAS,EAAE,EAAE,UAAU,GAAG,EAAE;AACpD;AAKO,SAAS,sBAAsB,OAAwB;AAC5D,MAAI,CAAC,SAAS,OAAO,UAAU,SAAU,QAAO;AAChD,MAAI,MAAM,SAAS,GAAI,QAAO;AAC9B,SAAO,eAAe,KAAK,KAAK;AAClC;AA+BO,SAAS,sBAAsB,KAAe;AACnD,MAAI,CAAC,OAAO,OAAO,QAAQ,SAAU,QAAO;AAE5C,QAAM,gBAAgB,CAAC,cAAc,aAAa,YAAY,SAAS,QAAQ;AAC/E,QAAM,YAAY,MAAM,QAAQ,GAAG,IAAI,CAAA,IAAK,CAAA;AAE5C,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,GAAG,GAAG;AAC9C,QAAI,cAAc,KAAK,CAAA,cAAa,IAAI,cAAc,SAAS,SAAS,CAAC,GAAG;AACzE,gBAAkB,GAAG,IAAI;AAAA,IAC5B,WAAW,OAAO,UAAU,YAAY,UAAU,MAAM;AACrD,gBAAkB,GAAG,IAAI,sBAAsB,KAAK;AAAA,IACvD,OAAO;AACJ,gBAAkB,GAAG,IAAI;AAAA,IAC5B;AAAA,EACF;AAEA,SAAO;AACT;AAKO,SAAS,eAAe,QAAgB,gBAAoC;AACjF,MAAI,CAAC,kBAAkB,eAAe,WAAW,GAAG;AAElD,WAAO,OAAO,SAAS,WAAW,KAC3B,OAAO,SAAS,WAAW,KAC3B,OAAO,WAAW,SAAS,KAC3B,OAAO,SAAS,QAAQ,KACxB,OAAO,SAAS,QAAQ;AAAA,EACjC;AAEA,SAAO,eAAe,KAAK,CAAA,YAAW;AACpC,QAAI,YAAY,IAAK,QAAO;AAC5B,QAAI,QAAQ,WAAW,GAAG,GAAG;AAC3B,aAAO,OAAO,SAAS,QAAQ,UAAU,CAAC,CAAC;AAAA,IAC7C;AACA,WAAO,WAAW,WAAW,OAAO,SAAS,OAAO;AAAA,EACtD,CAAC;AACH;AAKA,MAAM,YAAY;AAAA,EAKhB,YAAY,cAAsB,IAAI,WAAmB,KAAO;AAJxD,wDAAsC,IAAA;AAC7B;AACA;AAGf,SAAK,cAAc;AACnB,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,UAAU,KAAsB;AAC9B,UAAM,MAAM,KAAK,IAAA;AACjB,UAAM,WAAW,KAAK,SAAS,IAAI,GAAG,KAAK,CAAA;AAG3C,UAAM,gBAAgB,SAAS,OAAO,UAAQ,MAAM,OAAO,KAAK,QAAQ;AAExE,QAAI,cAAc,UAAU,KAAK,aAAa;AAC5C,aAAO;AAAA,IACT;AAGA,kBAAc,KAAK,GAAG;AACtB,SAAK,SAAS,IAAI,KAAK,aAAa;AAEpC,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,KAAmB;AACvB,SAAK,SAAS,OAAO,GAAG;AAAA,EAC1B;AAAA,EAEA,QAAc;AACZ,SAAK,SAAS,MAAA;AAAA,EAChB;AACF;AAKO,MAAM,sBAAsB,IAAI,YAAA;AAKhC,SAAS,sBAAsB,OAAsB,WAAyB;AACnF,QAAM,MAAMA,oBAAA;AAEZ,UAAQ,OAAA;AAAA,IACN,KAAK,cAAc;AACjB,UAAI,CAAC,IAAI,UAAU,CAAC,IAAI,MAAM;AAC5B,cAAM,IAAI;AAAA,UACR,cAAc,SAAS;AAAA,UACvB,EAAE,OAAO,WAAW,aAAa,IAAA;AAAA,QAAI;AAAA,MAEzC;AACA;AAAA,IAEF,KAAK,cAAc;AACjB,UAAI,IAAI,cAAc;AACpB,cAAM,IAAI;AAAA,UACR,cAAc,SAAS;AAAA,UACvB,EAAE,OAAO,WAAW,aAAa,IAAA;AAAA,QAAI;AAAA,MAEzC;AACA;AAAA,IAEF,KAAK,cAAc;AAEjB,UAAI,IAAI,cAAc;AACpB,cAAM,IAAI;AAAA,UACR,cAAc,SAAS;AAAA,UACvB,EAAE,OAAO,WAAW,aAAa,IAAA;AAAA,QAAI;AAAA,MAEzC;AACA;AAAA,EAAA;AAEN;AAKO,SAAS,oBACd,UACA,WACqB;AACrB,SAAO,YAAY;AACjB,QAAI;AACF,YAAM,UAAU,QAAQ;AAAA,IAC1B,SAAS,OAAO;AAEd,cAAQ,KAAK,0BAA0B,KAAK;AAAA,IAC9C;AAAA,EACF;AACF;AC1TA,MAAM,wBAA2C;AAAA,EAC/C,UAAU;AAAA,IACR,OAAO;AAAA,IACP,iBAAiB;AAAA,IACjB,iBAAiB;AAAA,IACjB,eAAe;AAAA,IACf,cAAc;AAAA,IACd,gBAAgB,KAAK,KAAK;AAAA;AAAA,EAAA;AAAA,EAE5B,gBAAgB,KAAK,KAAK;AAAA,EAC1B,gBAAgB,KAAK,OAAO;AAAA;AAAA,EAC5B,eAAe;AAAA,EACf,UAAU;AACZ;AAKO,MAAM,cAAc;AAAA,EAYzB,YAAY,MAAY,SAAqC,IAAI;AAXzD;AACA;AACA;AACA;AACA,0CAAiB;AACjB,+DAAsB,IAAA;AAO5B,SAAK,OAAO;AACZ,SAAK,SAAS,EAAE,GAAG,uBAAuB,GAAG,OAAA;AAC7C,SAAK,YAAY,kBAAA;AACjB,SAAK,gBAAgB,oBAAA;AAGrB,wBAAoB,KAAK,OAAO,QAAQ;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,aAA4B;AAChC,QAAI;AACF,YAAM,KAAK,mBAAA;AACX,YAAM,KAAK,iBAAA;AACX,WAAK,IAAI,QAAQ,2CAA2C;AAAA,QAC1D,WAAW,KAAK;AAAA,QAChB,eAAe,KAAK,OAAO,SAAS;AAAA,MAAA,CACrC;AAAA,IACH,SAAS,OAAO;AACd,WAAK,IAAI,SAAS,uCAAuC,EAAE,OAAO;AAClE,YAAM,IAAI,YAAY,gCAAgC,EAAE,OAAO;AAAA,IACjE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,YACJ,MACA,SACA,UAAkB,KACE;AAEpB,UAAM,eAAe,GAAG,KAAK,SAAS,IAAI,IAAI;AAC9C,QAAI,CAAC,oBAAoB,UAAU,YAAY,GAAG;AAChD,YAAM,IAAI,YAAY,wCAAwC,EAAE,MAAM;AAAA,IACxE;AAEA,UAAM,YAAY,KAAK,kBAAA;AACvB,UAAM,UAAmC;AAAA,MACvC,IAAI;AAAA,MACJ;AAAA,MACA;AAAA,MACA,WAAW,KAAK,IAAA;AAAA,MAChB,WAAW,KAAK;AAAA,MAChB,eAAe,KAAK;AAAA,IAAA;AAItB,UAAM,cAAc,KAAK,UAAU,OAAO,EAAE;AAC5C,QAAI,cAAc,KAAK,OAAO,gBAAgB;AAC5C,YAAM,IAAI,YAAY,8BAA8B;AAAA,QAClD,MAAM;AAAA,QACN,OAAO,KAAK,OAAO;AAAA,MAAA,CACpB;AAAA,IACH;AAEA,SAAK,IAAI,SAAS,mBAAmB;AAAA,MACnC;AAAA,MACA;AAAA,MACA,SAAS,sBAAsB,OAAO;AAAA,IAAA,CACvC;AAED,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,YAAY,WAAW,MAAM;AACjC,aAAK,gBAAgB,OAAO,SAAS;AACrC,eAAO,IAAI,YAAY,mBAAmB,EAAE,WAAW,MAAM,QAAA,CAAS,CAAC;AAAA,MACzE,GAAG,OAAO;AAEV,WAAK,gBAAgB,IAAI,WAAW;AAAA,QAClC;AAAA,QACA;AAAA,QACA,SAAS;AAAA,MAAA,CACV;AAED,WAAK,KAAK,SAAS,CAAC,QAAQ;AAE1B,YAAI,OAAO,oBAAoB;AAC7B,iBAAO,mBAAmB,cAAc,GAAG;AAAA,QAC7C,OAAO;AACL,gBAAM,IAAI,MAAM,6CAA6C;AAAA,QAC/D;AAAA,MACF,GAAG,OAAO,EAAE,MAAM,CAAA,UAAS;AACzB,qBAAa,SAAS;AACtB,aAAK,gBAAgB,OAAO,SAAS;AACrC,eAAO,IAAI,YAAY,qCAAqC,EAAE,OAAO,UAAA,CAAW,CAAC;AAAA,MACnF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,qBAAoC;AAChD,UAAM,KAAK,KAAK,cAAc,CAAC,WAAW;AAAA,MAExC,MAAM,cAAc;AAAA,QAIlB,cAAc;AAHN,wCAAS;AACT,qEAAsB,IAAA;AAG5B,eAAK,qBAAA;AAAA,QACP;AAAA,QAEQ,uBAAuB;AAE7B,iBAAO,iBAAiB,WAAW,CAAC,UAAU;AAC5C,gBAAI,MAAM,QAAQ,MAAM,KAAK,sBAAsB;AACjD,mBAAK,eAAe,MAAM,KAAK,QAAQ;AAAA,YACzC;AAAA,UACF,CAAC;AAAA,QACH;AAAA,QAEA,MAAM,cAAc,SAAS;AAC3B,cAAI;AAEF,gBAAI,CAAC,KAAK,gBAAgB,OAAO,GAAG;AAClC,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC7C;AAGA,kBAAM,WAAW,MAAM,KAAK,eAAe,OAAO;AAGlD,iBAAK,aAAa,QAAQ,IAAI,EAAE,SAAS,MAAM,MAAM,UAAU;AAAA,UACjE,SAAS,OAAO;AACd,iBAAK,aAAa,QAAQ,IAAI;AAAA,cAC5B,SAAS;AAAA,cACT,OAAO;AAAA,gBACL,SAAS,MAAM;AAAA,gBACf,MAAM,MAAM,QAAQ;AAAA,gBACpB,OAAO,MAAM;AAAA,cAAA;AAAA,YACf,CACD;AAAA,UACH;AAAA,QACF;AAAA,QAEQ,gBAAgB,SAAS;AAC/B,cAAI,CAAC,WAAW,OAAO,YAAY,SAAU,QAAO;AACpD,cAAI,CAAC,QAAQ,MAAM,CAAC,QAAQ,QAAQ,CAAC,QAAQ,UAAW,QAAO;AAC/D,cAAI,CAAC,QAAQ,iBAAiB,QAAQ,cAAc,SAAS,GAAI,QAAO;AACxE,iBAAO;AAAA,QACT;AAAA,QAEA,MAAc,eAAe,SAAS;AACpC,gBAAM,EAAE,MAAM,QAAA,IAAY;AAE1B,kBAAQ,MAAA;AAAA,YACN,KAAK;AACH,qBAAO,MAAM,KAAK,oBAAoB,OAAO;AAAA,YAC/C,KAAK;AACH,qBAAO,MAAM,KAAK,mBAAmB,OAAO;AAAA,YAC9C,KAAK;AACH,qBAAO,MAAM,KAAK,mBAAmB,OAAO;AAAA,YAC9C,KAAK;AACH,qBAAO,MAAM,KAAK,eAAe,OAAO;AAAA,YAC1C,KAAK;AACH,qBAAO,MAAM,KAAK,iBAAiB,OAAO;AAAA,YAC5C,KAAK;AACH,qBAAO,MAAM,KAAK,oBAAoB,OAAO;AAAA,YAC/C,KAAK;AACH,qBAAO,EAAE,WAAW,KAAK,IAAA,GAAO,QAAQ,QAAA;AAAA,YAC1C;AACE,oBAAM,IAAI,MAAM,yBAAyB,IAAI,EAAE;AAAA,UAAA;AAAA,QAErD;AAAA,QAEA,MAAc,oBAAoB,SAAS;AAEzC,gBAAM,EAAE,aAAA,IAAiB,MAAM,OAAO,iCAAiC;AAGvE,gBAAM,SAAS,MAAM,aAAa,QAAQ,MAAM;AAGhD,cAAI,CAAC,OAAO,uBAAuB;AACjC,mBAAO,4CAA4B,IAAA;AAAA,UACrC;AAEA,iBAAO,sBAAsB,IAAI,QAAQ,YAAY;AAAA,YACnD;AAAA,YACA,aAAa,KAAK,IAAA;AAAA,YAClB,QAAQ,QAAQ;AAAA,UAAA,CACjB;AAGD,gBAAM,KAAK,iBAAiB,QAAQ,OAAO;AAE3C,iBAAO;AAAA,YACL,YAAY,QAAQ;AAAA,YACpB,aAAa,KAAK,IAAA;AAAA,YAClB,iBAAiB,KAAK,mBAAmB,MAAM;AAAA,UAAA;AAAA,QAEnD;AAAA,QAEA,MAAc,iBAAiB,QAAQ,SAAS;;AAE9C,gBAAI,aAAQ,eAAR,mBAAoB,SAAS,WAAU,CAAC,QAAQ,YAAY;AAC9D,kBAAM,EAAE,qBAAA,IAAyB,MAAM,OAAO,2CAA2C;AACzF,mBAAO,WAAW,IAAI,qBAAqB,MAAM;AAAA,UACnD;AAGA,gBAAI,aAAQ,eAAR,mBAAoB,SAAS,cAAa,CAAC,QAAQ,YAAY;AACjE,kBAAM,EAAE,iBAAA,IAAqB,MAAM,OAAO,2CAA2C;AAErF,gBAAI,CAAC,OAAO,OAAQ,QAAO,SAAS,CAAA;AAGpC,kBAAM,eAAe,IAAI,iBAAiB,MAAM;AAGhD,gBAAI,OAAO,QAAQ;AACjB,qBAAO,OAAO,YAAY;AAC1B,qBAAO,OAAO,OAAO,QAAQ,YAAY;AAAA,YAC3C;AAAA,UACF;AAAA,QACF;AAAA,QAEQ,mBAAmB,QAAQ;AACjC,gBAAM,QAAQ,OAAO,SAAA;AACrB,gBAAM,iCAAiB,IAAA;AAEvB,gBAAM,SAAS,QAAQ,CAAA,YAAW;AAChC,gBAAI,SAAS,QAAS,YAAW,IAAI,KAAK;AAC1C,gBAAI,YAAY,QAAS,YAAW,IAAI,QAAQ;AAAA,UAClD,CAAC;AAED,iBAAO,MAAM,KAAK,UAAU;AAAA,QAC9B;AAAA,QAEA,MAAc,mBAAmB,SAAS;AACxC,gBAAM,YAAY,OAAO;AACzB,cAAI,CAAC,aAAa,CAAC,UAAU,IAAI,QAAQ,UAAU,GAAG;AACpD,kBAAM,IAAI,MAAM,8BAA8B,QAAQ,UAAU,EAAE;AAAA,UACpE;AAEA,gBAAM,WAAW,UAAU,IAAI,QAAQ,UAAU;AAGjD,cAAI,SAAS,UAAU,OAAO,SAAS,OAAO,YAAY,YAAY;AACpE,kBAAM,SAAS,OAAO,QAAA;AAAA,UACxB;AAGA,cAAI,OAAO,YAAY,OAAO,SAAS,iBAAiB,QAAQ,YAAY;AAC1E,mBAAO,OAAO;AAAA,UAChB;AAEA,cAAI,OAAO,UAAU,OAAO,OAAO,iBAAiB,QAAQ,YAAY;AACtE,mBAAO,OAAO;AAAA,UAChB;AAEA,oBAAU,OAAO,QAAQ,UAAU;AAEnC,iBAAO,EAAE,SAAS,KAAA;AAAA,QACpB;AAAA,QAEA,MAAc,mBAAmB,SAAS;AACxC,gBAAM,YAAY,OAAO;AACzB,cAAI,CAAC,aAAa,CAAC,UAAU,IAAI,QAAQ,UAAU,GAAG;AACpD,kBAAM,IAAI,MAAM,8BAA8B,QAAQ,UAAU,EAAE;AAAA,UACpE;AAEA,gBAAM,WAAW,UAAU,IAAI,QAAQ,UAAU;AAGjD,cAAI,SAAS,UAAU,OAAO,SAAS,OAAO,iBAAiB,YAAY;AACzE,kBAAM,SAAS,OAAO,aAAa,QAAQ,MAAM;AAAA,UACnD;AAEA,iBAAO,EAAE,SAAS,KAAA;AAAA,QACpB;AAAA,QAEA,MAAc,eAAe,SAAS;AACpC,gBAAM,YAAY,OAAO;AACzB,cAAI,CAAC,aAAa,CAAC,UAAU,IAAI,QAAQ,UAAU,GAAG;AACpD,mBAAO;AAAA,UACT;AAEA,gBAAM,WAAW,UAAU,IAAI,QAAQ,UAAU;AACjD,iBAAO,SAAS,OAAO,SAAA;AAAA,QACzB;AAAA,QAEA,MAAc,mBAAmB;AAC/B,gBAAM,YAAY,OAAO;AACzB,cAAI,CAAC,UAAW,QAAO,EAAE,SAAS,EAAA;AAElC,cAAI,UAAU;AACd,qBAAW,CAAC,YAAY,QAAQ,KAAK,UAAU,WAAW;AACxD,gBAAI;AACF,kBAAI,SAAS,UAAU,OAAO,SAAS,OAAO,YAAY,YAAY;AACpE,sBAAM,SAAS,OAAO,QAAA;AAAA,cACxB;AACA;AAAA,YACF,SAAS,OAAO;AACd,sBAAQ,KAAK,qCAAqC,UAAU,KAAK,KAAK;AAAA,YACxE;AAAA,UACF;AAGA,oBAAU,MAAA;AAGV,iBAAO,OAAO;AACd,cAAI,OAAO,QAAQ;AACjB,mBAAO,OAAO;AAAA,UAChB;AAEA,iBAAO,EAAE,QAAA;AAAA,QACX;AAAA,QAEQ,sBAAsB;AAC5B,iBAAO;AAAA,YACL,QAAQ,OAAO,SAAS;AAAA,YACxB,WAAW,UAAU;AAAA,YACrB,WAAW,KAAK,IAAA;AAAA,YAChB,cAAc,CAAC,EAAE,OAAO,yBAAyB,OAAO,sBAAsB,OAAO;AAAA,UAAA;AAAA,QAEzF;AAAA,QAEQ,aAAa,WAAW,UAAU;AAExC,iBAAO,YAAY;AAAA,YACjB,sBAAsB;AAAA,YACtB;AAAA,YACA,UAAU;AAAA,cACR,GAAG;AAAA,cACH;AAAA,cACA,WAAW,KAAK,IAAA;AAAA,YAAI;AAAA,UACtB,GACC,GAAG;AAAA,QACR;AAAA,QAEQ,eAAe,UAAU;AAE/B,kBAAQ,MAAM,oBAAoB,QAAQ;AAAA,QAC5C;AAAA,MAAA;AAIF,aAAO,qBAAqB,IAAI,cAAA;AAAA,IAClC,GAAG,KAAK,MAAM;AAGd,UAAM,KAAK,KAAK,eAAe,+BAA+B,CAAC,aAA6B;AAC1F,WAAK,eAAe,QAAQ;AAAA,IAC9B,CAAC;AAGD,UAAM,KAAK,KAAK,cAAc,MAAM;AAClC,aAAO,iBAAiB,WAAW,CAAC,UAAU;AAC5C,YAAI,MAAM,QAAQ,MAAM,KAAK,sBAAsB;AACjD,cAAI,OAAO,6BAA6B;AACtC,mBAAO,4BAA4B,MAAM,KAAK,QAAQ;AAAA,UACxD;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,mBAAkC;AAC9C,UAAM,WAAW,MAAM,KAAK,YAAY,kBAAkB,CAAA,GAAI,GAAI;AAElE,SAAK,IAAI,SAAS,uBAAuB,EAAE,UAAU;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA,EAKQ,eAAe,UAAgC;;AACrD,UAAM,UAAU,KAAK,gBAAgB,IAAI,SAAS,SAAS;AAC3D,QAAI,CAAC,SAAS;AACZ,WAAK,IAAI,QAAQ,yCAAyC,EAAE,WAAW,SAAS,WAAW;AAC3F;AAAA,IACF;AAEA,iBAAa,QAAQ,OAAO;AAC5B,SAAK,gBAAgB,OAAO,SAAS,SAAS;AAE9C,QAAI,SAAS,SAAS;AACpB,cAAQ,QAAQ,SAAS,IAAI;AAAA,IAC/B,OAAO;AACL,YAAM,QAAQ,IAAI;AAAA,UAChB,cAAS,UAAT,mBAAgB,YAAW;AAAA,QAC3B,EAAE,OAAM,cAAS,UAAT,mBAAgB,MAAM,WAAW,SAAS,UAAA;AAAA,MAAU;AAE9D,cAAQ,OAAO,KAAK;AAAA,IACtB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,oBAA4B;AAClC,WAAO,OAAO,KAAK,SAAS,IAAI,EAAE,KAAK,cAAc,IAAI,KAAK,IAAA,CAAK;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA,EAKQ,IAAI,OAA4C,SAAiB,SAAqB;AAC5F,QAAI,CAAC,KAAK,OAAO,cAAe;AAEhC,UAAM,SAAS,EAAE,OAAO,GAAG,MAAM,GAAG,MAAM,GAAG,OAAO,EAAA;AACpD,UAAM,eAAe,OAAO,KAAK,OAAO,QAAQ;AAChD,UAAM,eAAe,OAAO,KAAK;AAEjC,QAAI,gBAAgB,cAAc;AAChC,YAAM,mBAAmB,UAAU,sBAAsB,OAAO,IAAI;AACpE,cAAQ,KAAK,EAAE,uBAAuB,OAAO,IAAI,gBAAgB;AAAA,IACnE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAyB;AAC7B,QAAI;AAEF,iBAAW,CAAC,WAAW,OAAO,KAAK,KAAK,gBAAgB,WAAW;AACjE,qBAAa,QAAQ,OAAO;AAC5B,gBAAQ,OAAO,IAAI,YAAY,kBAAkB,EAAE,UAAA,CAAW,CAAC;AAAA,MACjE;AACA,WAAK,gBAAgB,MAAA;AAGrB,YAAM,KAAK,YAAY,eAAe,CAAA,GAAI,GAAI;AAE9C,WAAK,IAAI,QAAQ,0BAA0B;AAAA,IAC7C,SAAS,OAAO;AACd,WAAK,IAAI,QAAQ,yBAAyB,EAAE,OAAO;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB;AACf,WAAO;AAAA,MACL,WAAW,KAAK;AAAA,MAChB,cAAc,KAAK;AAAA,MACnB,iBAAiB,KAAK,gBAAgB;AAAA,MACtC,QAAQ,KAAK;AAAA,IAAA;AAAA,EAEjB;AACF;ACveA,MAAM,wBAA+C;AAAA,EACnD,aAAa;AAAA,EACb,UAAU;AAAA,IACR,wBAAwB;AAAA,IACxB,oBAAoB;AAAA,IACpB,aAAa;AAAA,EAAA;AAAA,EAEf,OAAO;AAAA,IACL,eAAe;AAAA,IACf,UAAU;AAAA,EAAA;AAEd;AAKA,MAAM,0BAAoD;AAAA,EACxD,OAAO,cAAc;AAAA,EACrB,iBAAiB;AAAA,EACjB,iBAAiB;AAAA,EACjB,eAAe;AAAA,EACf,cAAc;AAAA,EACd,gBAAgB,KAAK,KAAK;AAAA;AAC5B;AAKA,MAAM,2BAAgD;AAAA,EACpD,gBAAgB;AAAA,EAChB,mBAAmB;AAAA,EACnB,kBAAkB;AAAA,EAClB,kBAAkB;AACpB;AAKA,MAAM,uCAAuB,IAAA;AAgC7B,eAAsBC,oBACpB,MACA,UAAoC,IACD;;AACnC,MAAI;AAEF,UAAM,MAAMD,oBAAA;AACZ,QAAI,IAAI,kBAAiB,aAAQ,aAAR,mBAAkB,qBAAoB,OAAQ;AACrE,YAAM,IAAI,uBAAuB,sDAAsD;AAAA,IACzF;AAGA,UAAM,WAAW,EAAE,GAAG,yBAAyB,GAAG,QAAQ,SAAA;AAC1D,UAAM,YAAY,EAAE,GAAG,0BAA0B,GAAG,QAAQ,UAAA;AAC5D,UAAM,eAA6B;AAAA,MACjC,GAAG;AAAA,MACH,GAAG,QAAQ;AAAA,MACX,UAAU,QAAQ,YAAY,CAAC,sBAAsB;AAAA,IAAA;AAIvD,UAAM,aAAa,QAAQ,cAAc,mBAAmB,IAAI;AAGhE,kCAA8B,UAAU,UAAU;AAGlD,QAAI,iBAAiB,IAAI,UAAU,KAAK,GAAC,aAAQ,WAAR,mBAAgB,WAAU;AACjE,YAAM,IAAI,kBAAkB,8CAA8C,UAAU,EAAE;AAAA,IACxF;AAGA,UAAM,UAAU,KAAK,QAAA;AAGrB,UAAM,uBAAuB,SAAS,QAAQ;AAG9C,UAAM,SAAS,IAAI,cAAc,MAAM;AAAA,MACrC;AAAA,MACA,gBAAgB,SAAS,kBAAkB,KAAK,KAAK;AAAA,MACrD,gBAAgB,KAAK,OAAO;AAAA,MAC5B,eAAe,SAAS,UAAU,cAAc;AAAA,MAChD,UAAU,IAAI,gBAAgB,UAAU;AAAA,IAAA,CACzC;AAGD,UAAM,OAAO,WAAA;AAGb,UAAM,aAAa,6BAA6B,aAAa,YAAY,CAAA,CAAE;AAG3E,UAAM,qBAAqB,MAAM,OAAO,YAAY,kBAAkB;AAAA,MACpE,QAAQ;AAAA,MACR;AAAA,MACA,YAAU,aAAQ,WAAR,mBAAgB,cAAa;AAAA,MACvC;AAAA,IAAA,GACC,QAAQ,WAAW,GAAK;AAG3B,UAAM,SAAmC;AAAA,MACvC,QAAQ,kBAAkB,QAAQ,UAAU;AAAA,MAC5C;AAAA,MACA,aAAa,mBAAmB;AAAA,MAChC,iBAAiB,mBAAmB;AAAA,IAAA;AAItC,qBAAiB,IAAI,YAAY;AAAA,MAC/B;AAAA,MACA,oBAAoB;AAAA,MACpB;AAAA,MACA;AAAA,IAAA,CACD;AAGD,UAAM,qBAAqB,MAAM,SAAS,YAAY,SAAS;AAG/D,QAAI,QAAQ,iBAAiB,OAAO;AAClC,YAAM,mBAAmB,MAAM,YAAY,QAAQ,WAAW,GAAK;AAAA,IACrE;AAGA,QAAI,QAAQ,gBAAgB,SAAS,aAAa,gBAAgB,OAAO;AACvE,YAAM,kBAAkB,OAAO,QAAQ,UAAU;AAAA,IACnD;AAEA,WAAO;AAAA,EAET,SAAS,OAAO;AACd,QAAI,iBAAiB,0BAA0B,iBAAiB,mBAAmB;AACjF,YAAM;AAAA,IACR;AAEA,UAAM,IAAI,kBAAkB,iCAAiC;AAAA,MAC3D,eAAe;AAAA,MACf,YAAY,QAAQ;AAAA,MACpB,MAAM,KAAK,IAAA;AAAA,IAAI,CAChB;AAAA,EACH;AACF;AAQA,eAAsB,iBACpB,YACA,MACe;AACf,QAAM,KAAK,eAAe,OAAO,mBAAmB,IAAI,IAAI;AAC5D,QAAM,eAAe,iBAAiB,IAAI,EAAE;AAE5C,MAAI,CAAC,cAAc;AACjB,UAAM,IAAI,kBAAkB,8BAA8B,EAAE,EAAE;AAAA,EAChE;AAEA,MAAI;AAEF,UAAM,aAAa,OAAO,YAAY,iBAAiB,EAAE,YAAY,IAAI;AAGzE,UAAM,aAAa,OAAO,QAAA;AAG1B,qBAAiB,OAAO,EAAE;AAAA,EAC5B,SAAS,OAAO;AACd,UAAM,IAAI,kBAAkB,gCAAgC;AAAA,MAC1D,eAAe;AAAA,MACf,YAAY;AAAA,IAAA,CACb;AAAA,EACH;AACF;AAOO,SAAS,mBAAmB,YAAsD;;AACvF,MAAI,YAAY;AACd,UAAM,eAAe,iBAAiB,IAAI,UAAU;AACpD,YAAO,6CAAc,uBAAsB;AAAA,EAC7C;AAGA,QAAM,QAAQ,iBAAiB,OAAA,EAAS,KAAA;AACxC,WAAO,WAAM,UAAN,mBAAa,uBAAsB;AAC5C;AAKA,eAAsB,oBAAmC;AACvD,QAAM,kBAAkB,MAAM,KAAK,iBAAiB,QAAA,CAAS,EAAE;AAAA,IAC7D,OAAO,CAAC,YAAY,YAAY,MAAM;AACpC,UAAI;AACF,cAAM,aAAa,OAAO,YAAY,iBAAiB,EAAE,YAAY;AACrE,cAAM,aAAa,OAAO,QAAA;AAAA,MAC5B,SAAS,OAAO;AACd,gBAAQ,KAAK,qCAAqC,UAAU,KAAK,KAAK;AAAA,MACxE;AAAA,IACF;AAAA,EAAA;AAGF,QAAM,QAAQ,WAAW,eAAe;AACxC,mBAAiB,MAAA;AACnB;AAKA,SAAS,uBAAsC;AAC7C,SAAO;AAAA,IACL,MAAM;AAAA,IACN,MAAM;AAAA,IACN,KAAK;AAAA,MACH,UAAU,CAAC,GAAG;AAAA;AAAA,IAAA;AAAA,EAChB;AAEJ;AAKA,SAAS,mBAAmB,MAAoB;AAC9C,QAAM,MAAM,KAAK,IAAA;AACjB,QAAM,YAAY,KAAK,IAAA;AACvB,SAAO,UAAU,OAAO,KAAK,GAAG,EAAE,SAAS,QAAQ,EAAE,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS;AAC/E;AAKA,SAAS,8BACP,UACA,YACM;AAEN,MAAI,SAAS,gBAAgB,iBAAiB,QAAQ,SAAS,cAAc;AAC3E,UAAM,IAAI;AAAA,MACR,sCAAsC,SAAS,YAAY;AAAA,MAC3D,EAAE,kBAAkB,iBAAiB,MAAM,WAAA;AAAA,IAAW;AAAA,EAE1D;AAGA,sBAAoB,QAAQ;AAC9B;AAKA,eAAe,uBACb,SACA,UACe;AACf,MAAI,CAAC,SAAS,gBAAiB;AAG/B,QAAM,QAAQ,QAAQ,MAAA;AACtB,MAAI,MAAM,WAAW,GAAG;AACtB,UAAM,IAAI,uBAAuB,8BAA8B;AAAA,EACjE;AAGA,MAAI,SAAS,kBAAkB,SAAS,eAAe,SAAS,GAAG;AACjE,UAAM,OAAO,MAAM,CAAC;AACpB,UAAM,MAAM,KAAK,IAAA;AACjB,UAAM,SAAS,IAAI,IAAI,GAAG,EAAE;AAE5B,UAAM,YAAY,SAAS,eAAe,KAAK,CAAA,YAAW;AACxD,UAAI,YAAY,IAAK,QAAO;AAC5B,aAAO,OAAO,SAAS,OAAO;AAAA,IAChC,CAAC;AAED,QAAI,CAAC,WAAW;AACd,YAAM,IAAI;AAAA,QACR,uBAAuB,MAAM;AAAA,QAC7B,EAAE,QAAQ,gBAAgB,SAAS,eAAA;AAAA,MAAe;AAAA,IAEtD;AAAA,EACF;AACF;AAKA,SAAS,6BAA6B,UAAwC;AAC5E,QAAM,iCAAiB,IAAA;AAEvB,aAAW,WAAW,UAAU;AAC9B,YAAQ,QAAQ,MAAA;AAAA,MACd,KAAK;AACH,mBAAW,IAAI,KAAK;AACpB;AAAA,MACF,KAAK;AACH,mBAAW,IAAI,QAAQ;AACvB;AAAA,MACF,KAAK;AACH,mBAAW,IAAI,KAAK;AACpB,mBAAW,IAAI,QAAQ;AACvB;AAAA,IAAA;AAAA,EAEN;AAEA,SAAO,MAAM,KAAK,UAAU;AAC9B;AAKA,eAAe,qBACb,MACA,SACA,YACA,WACe;AACf,MAAI,CAAC,UAAU,oBAAoB,CAAC,UAAU,iBAAkB;AAGhE,OAAK,GAAG,SAAS,YAAY;AAC3B,QAAI;AACF,YAAM,iBAAiB,UAAU;AAAA,IACnC,SAAS,OAAO;AACd,cAAQ,KAAK,2CAA2C,UAAU,IAAI,KAAK;AAAA,IAC7E;AAAA,EACF,CAAC;AAGD,UAAQ,GAAG,SAAS,YAAY;AAC9B,QAAI;AACF,YAAM,iBAAiB,UAAU;AAAA,IACnC,SAAS,OAAO;AACd,cAAQ,KAAK,8CAA8C,UAAU,IAAI,KAAK;AAAA,IAChF;AAAA,EACF,CAAC;AAGD,MAAI,UAAU,eAAe;AAC3B,UAAM,kBAAkB,UAAU;AAClC,cAAU,gBAAgB,YAAY;AACpC,UAAI;AACF,cAAM,iBAAiB,UAAU;AAAA,MACnC,SAAS,OAAO;AACd,gBAAQ,KAAK,6BAA6B,UAAU,IAAI,KAAK;AAAA,MAC/D;AACA,YAAM,gBAAA;AAAA,IACR;AAAA,EACF;AACF;AAKA,eAAe,mBACb,MACA,YACA,SACe;AACf,QAAM,mBAAmB,YAAY;AACnC,WAAO,MAAM,KAAK,SAAS,CAAC,UAAU;AACpC,YAAM,SAAS,CAAA;AAEf,UAAI,MAAM,SAAS,KAAK,KAAK,OAAO,UAAU;AAC5C,eAAO,KAAK,CAAC,CAAC,OAAO,SAAS,OAAO;AAAA,MACvC;AAEA,UAAI,MAAM,SAAS,QAAQ,KAAK,OAAO,QAAQ;AAC7C,eAAO,KAAK,CAAC,CAAC,OAAO,OAAO,OAAO;AAAA,MACrC;AAEA,aAAO,OAAO,SAAS,KAAK,OAAO,MAAM,WAAS,KAAK;AAAA,IACzD,GAAG,UAAU;AAAA,EACf;AAEA,QAAM,KAAK,gBAAgB,kBAAkB,EAAE,SAAS;AAC1D;AAKA,eAAe,kBAAkB,QAAa,YAAwC;AACpF,MAAI;AACF,QAAI,OAAO,OAAO,YAAY,YAAY;AACxC,YAAM,OAAO,QAAA;AAAA,IACf;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,KAAK,kCAAkC,KAAK;AAAA,EACtD;AACF;AAKA,SAAS,kBAAkB,QAAuB,YAAyB;AACzE,SAAO,IAAI,MAAM,IAAI;AAAA,IACnB,IAAI,QAAQ,MAAM;AAChB,UAAI,SAAS,YAAY;AACvB,eAAO,YAAY;AACjB,iBAAO,MAAM,OAAO,YAAY,aAAa,EAAE,YAAY;AAAA,QAC7D;AAAA,MACF;AAEA,UAAI,SAAS,WAAW;AACtB,eAAO,YAAY;AAEjB,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,UAAI,SAAS,cAAc;AACzB,eAAO,YAAY;AAEjB,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,UAAI,SAAS,WAAW;AACtB,eAAO,YAAY;AACjB,gBAAM,iBAAiB,UAAU;AAAA,QACnC;AAAA,MACF;AAGA,aAAO,UAAU,SAAgB;AAC/B,cAAM,IAAI,MAAM,UAAU,OAAO,IAAI,CAAC,kCAAkC;AAAA,MAC1E;AAAA,IACF;AAAA,EAAA,CACD;AACH;;;;;;;;ACvdO,MAAM,wBAAN,MAAM,sBAAqB;AAAA,EAMxB,cAAc;AAJd,2DAAkB,IAAA;AAClB;AAAA,8DAAqB,IAAA;AACrB;AAAA,+DAAsB,IAAA;AAAA,EAI9B;AAAA,EAEA,OAAO,cAAoC;AACzC,QAAI,CAAC,sBAAqB,UAAU;AAClC,4BAAqB,WAAW,IAAI,sBAAA;AAAA,IACtC;AACA,WAAO,sBAAqB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,sBAAsB,QAAgB,YAAoB,WAA0B;AAElF,QAAI,CAAC,KAAK,YAAY,IAAI,MAAM,GAAG;AACjC,WAAK,YAAY,IAAI,QAAQ,oBAAI,KAAK;AAAA,IACxC;AACA,SAAK,YAAY,IAAI,MAAM,EAAG,IAAI,UAAU;AAG5C,QAAI,WAAW;AACb,UAAI,CAAC,KAAK,eAAe,IAAI,SAAS,GAAG;AACvC,aAAK,eAAe,IAAI,WAAW,oBAAI,KAAK;AAAA,MAC9C;AACA,WAAK,eAAe,IAAI,SAAS,EAAG,IAAI,UAAU;AAAA,IACpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,YAA0B;AAEzC,eAAW,CAAC,QAAQ,SAAS,KAAK,KAAK,YAAY,WAAW;AAC5D,gBAAU,OAAO,UAAU;AAC3B,UAAI,UAAU,SAAS,GAAG;AACxB,aAAK,YAAY,OAAO,MAAM;AAAA,MAChC;AAAA,IACF;AAGA,eAAW,CAAC,WAAW,SAAS,KAAK,KAAK,eAAe,WAAW;AAClE,gBAAU,OAAO,UAAU;AAC3B,UAAI,UAAU,SAAS,GAAG;AACxB,aAAK,eAAe,OAAO,SAAS;AAAA,MACtC;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,YAAY,QAA8C;AAC9D,UAAM,cAAc,KAAK,YAAY,IAAI,MAAM;AAC/C,QAAI,CAAC,eAAe,YAAY,SAAS,GAAG;AAC1C,aAAO,EAAE,oBAAoB,GAAG,QAAQ,CAAA,GAAI,UAAU,EAAA;AAAA,IACxD;AAEA,UAAM,YAAY,KAAK,IAAA;AACvB,UAAM,SAAsD,CAAA;AAC5D,QAAI,qBAAqB;AAGzB,eAAW,cAAc,aAAa;AACpC,UAAI;AACF,cAAM,EAAE,kBAAAE,kBAAA,IAAqB,MAAM,QAAA,QAAA,EAAA,KAAA,MAAA,OAAA;AACnC,cAAMA,kBAAiB,UAAU;AACjC;AAAA,MACF,SAAS,OAAO;AACd,eAAO,KAAK;AAAA,UACV;AAAA,UACA,OAAO,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AAAA,QAAA,CAChE;AAAA,MACH;AAAA,IACF;AAGA,SAAK,YAAY,OAAO,MAAM;AAG9B,UAAM,WAAW,KAAK,gBAAgB,IAAI,MAAM,KAAK,CAAA;AACrD,eAAW,WAAW,UAAU;AAC9B,UAAI;AACF,cAAM,QAAA;AAAA,MACR,SAAS,OAAO;AACd,gBAAQ,KAAK,kCAAkC,KAAK;AAAA,MACtD;AAAA,IACF;AACA,SAAK,gBAAgB,OAAO,MAAM;AAElC,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,UAAU,KAAK,QAAQ;AAAA,IAAA;AAAA,EAE3B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,eAAe,WAAiD;AACpE,UAAM,cAAc,KAAK,eAAe,IAAI,SAAS;AACrD,QAAI,CAAC,eAAe,YAAY,SAAS,GAAG;AAC1C,aAAO,EAAE,oBAAoB,GAAG,QAAQ,CAAA,GAAI,UAAU,EAAA;AAAA,IACxD;AAEA,UAAM,YAAY,KAAK,IAAA;AACvB,UAAM,SAAsD,CAAA;AAC5D,QAAI,qBAAqB;AAEzB,eAAW,cAAc,aAAa;AACpC,UAAI;AACF,cAAM,EAAE,kBAAAA,kBAAA,IAAqB,MAAM,QAAA,QAAA,EAAA,KAAA,MAAA,OAAA;AACnC,cAAMA,kBAAiB,UAAU;AACjC;AAAA,MACF,SAAS,OAAO;AACd,eAAO,KAAK;AAAA,UACV;AAAA,UACA,OAAO,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AAAA,QAAA,CAChE;AAAA,MACH;AAAA,IACF;AAGA,SAAK,eAAe,OAAO,SAAS;AAEpC,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,UAAU,KAAK,QAAQ;AAAA,IAAA;AAAA,EAE3B;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,QAAgB,SAAoC;AACpE,QAAI,CAAC,KAAK,gBAAgB,IAAI,MAAM,GAAG;AACrC,WAAK,gBAAgB,IAAI,QAAQ,CAAA,CAAE;AAAA,IACrC;AACA,SAAK,gBAAgB,IAAI,MAAM,EAAG,KAAK,OAAO;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,QAA0B;AACvC,WAAO,MAAM,KAAK,KAAK,YAAY,IAAI,MAAM,KAAK,EAAE;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,WAA6B;AAC7C,WAAO,MAAM,KAAK,KAAK,eAAe,IAAI,SAAS,KAAK,EAAE;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AACT,WAAO;AAAA,MACL,aAAa,OAAO;AAAA,QAClB,MAAM,KAAK,KAAK,YAAY,QAAA,CAAS,EAAE;AAAA,UACrC,CAAC,CAAC,QAAQ,SAAS,MAAM,CAAC,QAAQ,MAAM,KAAK,SAAS,CAAC;AAAA,QAAA;AAAA,MACzD;AAAA,MAEF,gBAAgB,OAAO;AAAA,QACrB,MAAM,KAAK,KAAK,eAAe,QAAA,CAAS,EAAE;AAAA,UACxC,CAAC,CAAC,WAAW,SAAS,MAAM,CAAC,WAAW,MAAM,KAAK,SAAS,CAAC;AAAA,QAAA;AAAA,MAC/D;AAAA,MAEF,iBAAiB,MAAM,KAAK,KAAK,gBAAgB,MAAM;AAAA,IAAA;AAAA,EAE3D;AAAA;AAAA;AAAA;AAAA,EAKA,QAAc;AACZ,SAAK,YAAY,MAAA;AACjB,SAAK,eAAe,MAAA;AACpB,SAAK,gBAAgB,MAAA;AAAA,EACvB;AACF;AA/LE,cADW,uBACI;AADV,IAAM,uBAAN;AA0MP,eAAsB,mBACpB,UACA,MACA,SACA,QACe;AACf,QAAM,mBAAmB,qBAAqB,YAAA;AAC9C,QAAM,SAAS,UAAU,QAAQ;AACjC,QAAM,YAAY,aAAa,OAAO;AAGtC,MAAI,OAAO,kBAAkB;AAE3B,qBAAiB,kBAAkB,QAAQ,YAAY;AACrD,YAAM,iBAAiB,YAAY,MAAM;AAAA,IAC3C,CAAC;AAAA,EACH;AAEA,MAAI,OAAO,kBAAkB;AAE3B,aAAS,OAAO,6BAA6B;AAAA,MAC3C,MAAM,KAAK,UAAU;AAAA,QACnB;AAAA,QACA;AAAA,QACA,WAAW,KAAK,IAAA;AAAA,MAAI,CACrB;AAAA,MACD,aAAa;AAAA,IAAA,CACd;AAAA,EACH;AAGA,OAAK,GAAG,SAAS,YAAY;AAC3B,QAAI,OAAO,gBAAgB;AACzB,YAAM,iBAAiB,YAAY,MAAM;AAAA,IAC3C;AAAA,EACF,CAAC;AAGD,UAAQ,GAAG,SAAS,YAAY;AAC9B,QAAI,OAAO,mBAAmB;AAC5B,YAAM,iBAAiB,eAAe,SAAS;AAAA,IACjD;AAAA,EACF,CAAC;AAGD,MAAI,OAAO,eAAe;AACxB,qBAAiB,kBAAkB,QAAQ,OAAO,aAAa;AAAA,EACjE;AACF;AAKA,eAAsB,kBAAkB,UAAkD;AACxF,QAAM,mBAAmB,qBAAqB,YAAA;AAC9C,QAAM,SAAS,UAAU,QAAQ;AAEjC,SAAO,MAAM,iBAAiB,YAAY,MAAM;AAClD;AAKO,SAAS,UAAU,UAA4B;;AACpD,QAAM,YAAY,SAAS,UAAU,KAAK,KAAK;AAC/C,QAAM,gBAAc,cAAS,YAAT,mBAAkB,SAAQ;AAC9C,SAAO,GAAG,WAAW,IAAI,OAAO,KAAK,SAAS,EAAE,SAAS,QAAQ,CAAC;AACpE;AAKO,SAAS,aAAa,SAAiC;AAE5D,SAAQ,QAAgB,SAAS,WAAW,KAAK,IAAA,CAAK,IAAI,KAAK,OAAA,EAAS,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AACnG;AAKA,eAAsB,0BACpB,MACA,UAKI,IACW;AACf,QAAM,UAAU,KAAK,QAAA;AAGrB,MAAI,QAAQ,cAAc;AACxB,UAAM,QAAQ,aAAA;AACd,UAAM,KAAK,SAAS,MAAM;AACxB,mBAAa,MAAA;AACb,qBAAe,MAAA;AAAA,IACjB,CAAC;AAAA,EACH;AAGA,MAAI,QAAQ,cAAc;AACxB,UAAM,QAAQ,aAAA;AAAA,EAChB;AAGA,MAAI,QAAQ,iBAAiB,QAAQ,cAAc,SAAS,GAAG;AAC7D,UAAM,KAAK,MAAM,CAAA,QAAO;AACtB,aAAO,QAAQ,cAAe,KAAK,aAAW,IAAI,SAAS,OAAO,CAAC;AAAA,IACrE,GAAG,CAAA,UAAS,MAAM,MAAA,CAAO;AAAA,EAC3B;AAGA,QAAM,KAAK,cAAc,MAAM;AAE5B,WAAe,uBAAuB;AACtC,WAAe,2BAA2B;AAAA,EAC7C,CAAC;AACH;AAKA,eAAsB,sBAAsB,MAGzC;AACD,QAAM,SAAmB,CAAA;AAGzB,QAAM,iBAAiB,MAAM,KAAK,SAAS,MAAM;AAC/C,WAAO,CAAC,CAAE,OAAe,wBAAwB,CAAC,CAAE,OAAe;AAAA,EACrE,CAAC;AAED,MAAI,CAAC,gBAAgB;AACnB,WAAO,KAAK,oCAAoC;AAAA,EAClD;AAGA,QAAM,qBAAqB,MAAM,KAAK,SAAS,MAAM;AACnD,WAAO,CAAC,EAAE,OAAO,YAAY,CAAE,OAAO,SAAiB,oBAChD,CAAC,EAAE,OAAO,UAAU,CAAE,OAAO,OAAe;AAAA,EACrD,CAAC;AAED,MAAI,oBAAoB;AACtB,WAAO,KAAK,oCAAoC;AAAA,EAClD;AAGA,QAAM,iBAAiB,MAAM,KAAK,SAAS,MAAM;AAC/C,WAAO,aAAa,SAAS,KAAK,eAAe,SAAS;AAAA,EAC5D,CAAC;AAED,MAAI,gBAAgB;AAClB,WAAO,KAAK,+CAA+C;AAAA,EAC7D;AAEA,SAAO;AAAA,IACL,YAAY,OAAO,WAAW;AAAA,IAC9B;AAAA,EAAA;AAEJ;AAKA,eAAsB,2BACpB,MACA,UAAkB,KACH;AACf,QAAM,KAAK,gBAAgB,MAAM;AAC/B,WAAQ,OAAe,yBAAyB;AAAA,EAClD,GAAG,EAAE,SAAS;AAChB;AC5XO,MAAM,cAAc;AAAA,EACzB,YAAoB,MAAY;AAAZ,SAAA,OAAA;AAAA,EAAa;AAAA;AAAA;AAAA;AAAA,EAKjC,MAAM,cAAc,YAAuB,OAAO,UAAkB,KAAqB;AACvF,UAAM,cAAc,CAAC,SAAoB;AACvC,UAAI,SAAS,OAAO;AAClB,eAAO,OAAO,YAAY,OAAO,OAAO,SAAS,YAAY;AAAA,MAC/D,WAAW,SAAS,UAAU;AAC5B,eAAO,OAAO,UAAU,OAAO,OAAO,OAAO,YAAY;AAAA,MAC3D;AACA,aAAO;AAAA,IACT;AAEA,UAAM,KAAK,KAAK,gBAAgB,aAAa,WAAW,EAAE,SAAS;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,YAAuB,OAAsB;AAC/D,QAAI,cAAc,OAAO;AACvB,YAAM,KAAK,KAAK,SAAS,YAAY;AACnC,YAAI,OAAO,UAAU;AACnB,gBAAM,OAAO,SAAS,QAAQ,EAAE,QAAQ,uBAAuB;AAAA,QACjE;AAAA,MACF,CAAC;AAAA,IACH,WAAW,cAAc,UAAU;AACjC,YAAM,KAAK,KAAK,SAAS,YAAY;AACnC,YAAI,OAAO,UAAU,OAAO,OAAO,SAAS;AAC1C,gBAAM,OAAO,OAAO,QAAA;AAAA,QACtB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,YAAuB,OAAsB;AAClE,QAAI,cAAc,OAAO;AAEvB,YAAM,KAAK,KAAK,SAAS,MAAM;;AAC7B,YAAI,OAAO,YAAa,OAAO,SAAiB,iBAAiB;AAC9D,6BAAO,UAAiB,eAAxB;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH,WAAW,cAAc,UAAU;AACjC,YAAM,KAAK,KAAK,SAAS,YAAY;AACnC,YAAI,OAAO,UAAU,OAAO,OAAO,YAAY;AAC7C,gBAAM,OAAO,OAAO,WAAA;AAAA,QACtB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,YAAY,SAAiB,YAAuB,OAAsB;AAC9E,QAAI,cAAc,OAAO;AACvB,YAAM,KAAK,KAAK,SAAS,OAAO,OAAO;AACrC,YAAI,OAAO,UAAU;AACnB,gBAAM,OAAO,SAAS,QAAQ;AAAA,YAC5B,QAAQ;AAAA,YACR,QAAQ,CAAC,EAAE,SAAS,IAAI;AAAA,UAAA,CACzB;AAAA,QACH;AAAA,MACF,GAAG,OAAO;AAAA,IACZ,WAAW,cAAc,UAAU;AAEjC,YAAM,KAAK,KAAK,SAAS,CAAC,YAAY;AACpC,YAAI,OAAO,UAAW,OAAO,OAAe,eAAe;AACxD,iBAAO,OAAe,cAAc,OAAO;AAAA,QAC9C;AAAA,MACF,GAAG,OAAO;AAAA,IACZ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,kBAAkB,YAAuB,OAA+B;AAC5E,QAAI,cAAc,OAAO;AACvB,aAAO,MAAM,KAAK,KAAK,SAAS,YAAY;AAC1C,YAAI,OAAO,UAAU;AACnB,gBAAM,WAAW,MAAM,OAAO,SAAS,QAAQ,EAAE,QAAQ,gBAAgB;AACzE,iBAAO,SAAS,CAAC,KAAK;AAAA,QACxB;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH,WAAW,cAAc,UAAU;AACjC,aAAO,MAAM,KAAK,KAAK,SAAS,MAAM;AACpC,YAAI,OAAO,UAAU,OAAO,OAAO,WAAW;AAC5C,iBAAO,OAAO,OAAO,UAAU,SAAA;AAAA,QACjC;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,YAAY,SAAiB,YAAuB,OAAwB;AAChF,QAAI,cAAc,OAAO;AACvB,aAAO,MAAM,KAAK,KAAK,SAAS,OAAO,QAAQ;AAC7C,YAAI,OAAO,UAAU;AACnB,gBAAM,WAAW,MAAM,OAAO,SAAS,QAAQ,EAAE,QAAQ,gBAAgB;AACzE,cAAI,SAAS,WAAW,GAAG;AACzB,kBAAM,IAAI,MAAM,uBAAuB;AAAA,UACzC;AACA,iBAAO,MAAM,OAAO,SAAS,QAAQ;AAAA,YACnC,QAAQ;AAAA,YACR,QAAQ,CAAC,KAAK,SAAS,CAAC,CAAC;AAAA,UAAA,CAC1B;AAAA,QACH;AACA,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACjD,GAAG,OAAO;AAAA,IACZ,WAAW,cAAc,UAAU;AACjC,aAAO,MAAM,KAAK,KAAK,SAAS,OAAO,QAAQ;AAC7C,YAAI,OAAO,UAAU,OAAO,OAAO,aAAa;AAC9C,gBAAM,iBAAiB,IAAI,cAAc,OAAO,GAAG;AACnD,gBAAM,YAAY,MAAM,OAAO,OAAO,YAAY,gBAAgB,MAAM;AACxE,iBAAO,MAAM,KAAK,UAAU,SAAS,EAAE,IAAI,CAAA,MAAK,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC,EAAE,KAAK,EAAE;AAAA,QAC1F;AACA,cAAM,IAAI,MAAM,6BAA6B;AAAA,MAC/C,GAAG,OAAO;AAAA,IACZ;AACA,UAAM,IAAI,MAAM,2BAA2B,SAAS,EAAE;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gBACJ,IACA,OACA,YAAuB,OACN;AACjB,QAAI,cAAc,OAAO;AACvB,aAAO,MAAM,KAAK,KAAK,SAAS,OAAO,WAAW;AAChD,YAAI,OAAO,UAAU;AACnB,gBAAM,WAAW,MAAM,OAAO,SAAS,QAAQ,EAAE,QAAQ,gBAAgB;AACzE,cAAI,SAAS,WAAW,GAAG;AACzB,kBAAM,IAAI,MAAM,uBAAuB;AAAA,UACzC;AACA,iBAAO,MAAM,OAAO,SAAS,QAAQ;AAAA,YACnC,QAAQ;AAAA,YACR,QAAQ,CAAC;AAAA,cACP,MAAM,SAAS,CAAC;AAAA,cAChB,IAAI,OAAO;AAAA,cACX,OAAO,OAAO;AAAA,YAAA,CACf;AAAA,UAAA,CACF;AAAA,QACH;AACA,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACjD,GAAG,EAAE,IAAI,OAAO;AAAA,IAClB,WAAW,cAAc,UAAU;AAEjC,aAAO,MAAM,KAAK,KAAK,SAAS,OAAO,WAAW;AAChD,YAAI,OAAO,UAAU,OAAO,OAAO,wBAAwB;AAEzD,gBAAM,IAAI,MAAM,4DAA4D;AAAA,QAC9E;AACA,cAAM,IAAI,MAAM,6BAA6B;AAAA,MAC/C,GAAG,EAAE,IAAI,OAAO;AAAA,IAClB;AACA,UAAM,IAAI,MAAM,2BAA2B,SAAS,EAAE;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,kBAAkB,YAAuB,OAAyB;AACtE,QAAI,cAAc,OAAO;AACvB,aAAO,MAAM,KAAK,KAAK,SAAS,YAAY;AAC1C,YAAI,OAAO,UAAU;AACnB,gBAAM,WAAW,MAAM,OAAO,SAAS,QAAQ,EAAE,QAAQ,gBAAgB;AACzE,iBAAO,SAAS,SAAS;AAAA,QAC3B;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH,WAAW,cAAc,UAAU;AACjC,aAAO,MAAM,KAAK,KAAK,SAAS,MAAM;AACpC,eAAO,CAAC,EAAE,OAAO,UAAU,OAAO,OAAO;AAAA,MAC3C,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,WAAW,YAAuB,OAAwB;AAC9D,QAAI,cAAc,OAAO;AACvB,aAAO,MAAM,KAAK,KAAK,SAAS,YAAY;AAC1C,YAAI,OAAO,UAAU;AACnB,gBAAM,WAAW,MAAM,OAAO,SAAS,QAAQ,EAAE,QAAQ,gBAAgB;AACzE,cAAI,SAAS,WAAW,GAAG;AACzB,kBAAM,IAAI,MAAM,uBAAuB;AAAA,UACzC;AACA,iBAAO,MAAM,OAAO,SAAS,QAAQ;AAAA,YACnC,QAAQ;AAAA,YACR,QAAQ,CAAC,SAAS,CAAC,GAAG,QAAQ;AAAA,UAAA,CAC/B;AAAA,QACH;AACA,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACjD,CAAC;AAAA,IACH,WAAW,cAAc,UAAU;AACjC,aAAO,MAAM,KAAK,KAAK,SAAS,YAAY;AAC1C,YAAI,OAAO,UAAU,OAAO,OAAO,YAAY;AAC7C,iBAAO,MAAM,OAAO,OAAO,WAAA;AAAA,QAC7B;AACA,cAAM,IAAI,MAAM,yDAAyD;AAAA,MAC3E,CAAC;AAAA,IACH;AACA,UAAM,IAAI,MAAM,2BAA2B,SAAS,EAAE;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cACJ,WACA,YAAuB,OACR;AACf,QAAI,cAAc,OAAO;AACvB,YAAM,KAAK,KAAK,SAAS,CAAC,UAAU;AAClC,YAAI,OAAO,UAAU;AACnB,iBAAO,SAAS,GAAG,OAAO,IAAI,SAAgB;AAC5C,oBAAQ,IAAI,gBAAgB,KAAK,KAAK,IAAI;AAAA,UAC5C,CAAC;AAAA,QACH;AAAA,MACF,GAAG,SAAS;AAAA,IACd,WAAW,cAAc,UAAU;AACjC,YAAM,KAAK,KAAK,SAAS,CAAC,UAAU;AAClC,YAAI,OAAO,UAAU,OAAO,OAAO,IAAI;AACrC,iBAAO,OAAO,GAAG,OAAO,IAAI,SAAgB;AAC1C,oBAAQ,IAAI,uBAAuB,KAAK,KAAK,IAAI;AAAA,UACnD,CAAC;AAAA,QACH;AAAA,MACF,GAAG,SAAS;AAAA,IACd;AAAA,EACF;AACF;AAKO,MAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA,EAIhC,MAAM,aAAa,MAA2B;AAC5C,UAAM,mBAAmB;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAGF,eAAW,YAAY,kBAAkB;AACvC,UAAI;AACF,cAAM,UAAU,KAAK,QAAQ,QAAQ,EAAE,MAAA;AACvC,YAAI,MAAM,QAAQ,UAAU,EAAE,SAAS,IAAA,CAAM,GAAG;AAC9C,gBAAM,QAAQ,MAAA;AACd;AAAA,QACF;AAAA,MACF,QAAQ;AAAA,MAER;AAAA,IACF;AAEA,UAAM,IAAI,MAAM,0BAA0B;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,aAAa,MAAY,aAAqB,YAA2B;AAC7E,UAAM,kBAAkB;AAAA,MACtB,oBAAoB,UAAU;AAAA,MAC9B,iBAAiB,WAAW,YAAA,CAAa;AAAA,MACzC,iBAAiB,WAAW,YAAA,CAAa;AAAA,MACzC,4BAA4B,UAAU;AAAA,IAAA;AAGxC,eAAW,YAAY,iBAAiB;AACtC,UAAI;AACF,cAAM,UAAU,KAAK,QAAQ,QAAQ,EAAE,MAAA;AACvC,YAAI,MAAM,QAAQ,UAAU,EAAE,SAAS,IAAA,CAAM,GAAG;AAC9C,gBAAM,QAAQ,MAAA;AACd;AAAA,QACF;AAAA,MACF,QAAQ;AAAA,MAER;AAAA,IACF;AAEA,UAAM,IAAI,MAAM,kBAAkB,UAAU,aAAa;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,kBAAkB,MAA2B;AACjD,UAAM,mBAAmB;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAGF,eAAW,YAAY,kBAAkB;AACvC,UAAI;AACF,cAAM,UAAU,KAAK,QAAQ,QAAQ,EAAE,MAAA;AACvC,YAAI,MAAM,QAAQ,UAAU,EAAE,SAAS,IAAA,CAAM,GAAG;AAC9C,gBAAM,QAAQ,MAAA;AACd;AAAA,QACF;AAAA,MACF,QAAQ;AAAA,MAER;AAAA,IACF;AAGA,UAAM,KAAK,eAAe,GAAI;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAA2B;AAChD,UAAM,kBAAkB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAGF,eAAW,YAAY,iBAAiB;AACtC,UAAI;AACF,cAAM,UAAU,KAAK,QAAQ,QAAQ,EAAE,MAAA;AACvC,YAAI,MAAM,QAAQ,UAAU,EAAE,SAAS,IAAA,CAAM,GAAG;AAC9C,gBAAM,QAAQ,MAAA;AACd;AAAA,QACF;AAAA,MACF,QAAQ;AAAA,MAER;AAAA,IACF;AAEA,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,wBACJ,MACA,WACA,UAAkB,KACH;AACf,UAAM,KAAK;AAAA,MACT,CAAC,sBAAsB;AACrB,cAAM,cAAc,CAAC,EAClB,OAAO,YAAY,OAAO,SAAS,mBACnC,OAAO,UAAU,OAAO,OAAO;AAElC,eAAO,gBAAgB;AAAA,MACzB;AAAA,MACA;AAAA,MACA,EAAE,QAAA;AAAA,IAAQ;AAAA,EAEd;AACF;AAKO,MAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAI5B,iBAAiB,WAAqB,CAAC,GAAG,GAAG,MAA8B;AACzE,WAAO;AAAA,MACL,MAAM;AAAA,MACN;AAAA,MACA,KAAK,EAAE,SAAA;AAAA,IAAS;AAAA,EAEpB;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB,WAAqB,CAAC,cAAc,GAAG,MAA8B;AACvF,WAAO;AAAA,MACL,MAAM;AAAA,MACN;AAAA,MACA,QAAQ,EAAE,SAAA;AAAA,IAAS;AAAA,EAEvB;AAAA;AAAA;AAAA;AAAA,EAKA,uBACE,WAAqB,CAAC,GAAG,GACzB,WAAqB,CAAC,cAAc,GACpC,MACe;AACf,WAAO;AAAA,MACL,MAAM;AAAA,MACN;AAAA,MACA,KAAK,EAAE,SAAA;AAAA,MACP,QAAQ,EAAE,SAAA;AAAA,IAAS;AAAA,EAEvB;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB,OAAe,OAAkD,YAA6B;AAC/G,UAAM,WAA4B,CAAA;AAElC,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,YAAM,OAAO,gBAAgB,IAAI,CAAC;AAElC,cAAQ,MAAA;AAAA,QACN,KAAK;AACH,mBAAS,KAAK,KAAK,iBAAiB,CAAC,GAAG,GAAG,IAAI,CAAC;AAChD;AAAA,QACF,KAAK;AACH,mBAAS,KAAK,KAAK,oBAAoB,CAAC,cAAc,GAAG,IAAI,CAAC;AAC9D;AAAA,QACF,KAAK;AACH,mBAAS,KAAK,KAAK,uBAAuB,CAAC,GAAG,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC;AACxE;AAAA,MAAA;AAAA,IAEN;AAEA,WAAO;AAAA,EACT;AACF;ACvbA,MAAM,yBAAmD;AAAA,EACvD,eAAe;AAAA,IACb,aAAa;AAAA,IACb,UAAU;AAAA,MACR,wBAAwB;AAAA,MACxB,oBAAoB;AAAA,MACpB,aAAa;AAAA,IAAA;AAAA,IAEf,OAAO;AAAA,MACL,eAAe;AAAA,MACf,UAAU;AAAA,IAAA;AAAA,EACZ;AAAA,EAEF,iBAAiB;AAAA,IACf,OAAO,cAAc;AAAA,IACrB,iBAAiB;AAAA,IACjB,iBAAiB;AAAA,IACjB,eAAe;AAAA,IACf,cAAc;AAAA,IACd,gBAAgB,KAAK,KAAK;AAAA,EAAA;AAAA,EAE5B,kBAAkB;AAAA,IAChB,gBAAgB;AAAA,IAChB,mBAAmB;AAAA,IACnB,kBAAkB;AAAA,IAClB,kBAAkB;AAAA,EAAA;AAAA,EAEpB,aAAa;AAAA,EACb,aAAa;AACf;AAoBO,MAAM,OAAOC,OAAK,OAA0B;AAAA;AAAA;AAAA;AAAA,EAIjD,eAAe,OAAO,EAAE,MAAM,QAAA,GAAW,KAAK,aAAa;AACzD,UAAM,mBAAmB,qBAAqB,YAAA;AAC9C,UAAM,SAAS,UAAU,QAAQ;AAGjC,UAAM,gBAAgB;AAAA,MACpB,MAAM,WACJ,cACA,iBACA,UAAoC,CAAA,GACpC;AACA,cAAM,SAAS,EAAE,GAAG,wBAAwB,GAAG,QAAA;AAG/C,cAAM;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA,OAAO;AAAA,QAAA;AAIT,cAAM,0BAA0B,cAAc;AAAA,UAC5C,cAAc;AAAA,UACd,cAAc;AAAA,QAAA,CACf;AAAA,MACH;AAAA,MAEA,MAAM,cAAc,UAAoC,IAAI;AAC1D,cAAM,SAAS,MAAMF,oBAAkB,MAAM,OAAO;AAGpD,yBAAiB;AAAA,UACf;AAAA,UACA,OAAO;AAAA,UACN,QAAgB;AAAA,QAAA;AAGnB,eAAO;AAAA,MACT;AAAA,MAEA,MAAM,UAAU,YAAqB;AACnC,cAAM,eAAe,mBAAmB,UAAU;AAClD,gBAAO,6CAAc,WAAU;AAAA,MACjC;AAAA,MAEA,MAAM,aAAa,YAAqB;AACtC,cAAM,EAAE,kBAAAC,kBAAA,IAAqB,MAAM,QAAA,QAAA,EAAA,KAAA,MAAA,OAAA;AACnC,cAAMA,kBAAiB,YAAY,IAAI;AAEvC,YAAI,YAAY;AACd,2BAAiB,iBAAiB,UAAU;AAAA,QAC9C;AAAA,MACF;AAAA,MAEA,MAAM,gBAAgB;AAEpB,eAAO,CAAA;AAAA,MACT;AAAA,MAEA,MAAM,UAAU;AACd,cAAM,iBAAiB,YAAY,MAAM;AAAA,MAC3C;AAAA,MAEA,WAAW;AACT,eAAO;AAAA,UACL,+BAAe,IAAA;AAAA,UACf,SAAS,EAAE,IAAI,QAAQ,WAAW,KAAK,IAAA,GAAO,cAAc,KAAK,MAAI;AAAA,UACrE,UAAU;AAAA,YACR,OAAO,cAAc;AAAA,YACrB,sCAAsB,IAAA;AAAA,YACtB,gCAAgB,IAAA;AAAA,UAAI;AAAA,QACtB;AAAA,MAEJ;AAAA,MAEA,MAAM,gBAAgB;AACpB,eAAO;AAAA,MACT;AAAA,MAEA,MAAM,UAAU;AACd,cAAM,KAAK,QAAA;AAAA,MACb;AAAA,IAAA;AAGF,UAAM,cAAc,WAAW,MAAM,OAAO;AAE5C,UAAM,IAAI,aAAa;AAGvB,UAAM,cAAc,QAAA;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,OAAO,EAAE,cAAA,GAAiB,QAAQ;AAC/C,UAAM,kBAAkB,OAAO,UAAoC,OAAO;AACxE,aAAO,MAAM,cAAc,cAAc,OAAO;AAAA,IAClD;AAEA,UAAM,IAAI,eAAe;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,OAAO,EAAE,cAAA,GAAiB,QAAQ;AAC3C,UAAM,cAAc,OAAO,eAAwB;AACjD,aAAO,MAAM,cAAc,UAAU,UAAU;AAAA,IACjD;AAEA,UAAM,IAAI,WAAW;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,OAAO,EAAE,cAAA,GAAiB,QAAQ;AAC9C,UAAM,iBAAiB,OAAO,eAAwB;AACpD,YAAM,cAAc,aAAa,UAAU;AAAA,IAC7C;AAEA,UAAM,IAAI,cAAc;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,OAAO,EAAE,cAAA,GAAiB,QAAQ;AAChD,UAAM,kBAAkB,YAAY;AAClC,YAAM,cAAc,QAAA;AAAA,IACtB;AAEA,UAAM,IAAI,eAAe;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,OAAO,EAAE,cAAA,GAAiB,QAAQ;AAChD,UAAM,mBAAmB,OAAO,eAAqD;AACnF,YAAM,SAAS,MAAM,cAAc,UAAU,UAAU;AACvD,UAAI,CAAC,UAAU,OAAO,OAAO,aAAa,YAAY;AACpD,eAAO;AAAA,MACT;AACA,aAAO,MAAM,OAAO,SAAA;AAAA,IACtB;AAEA,UAAM,IAAI,gBAAgB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,OAAO,EAAE,KAAA,GAAQ,QAAQ;AACtC,UAAM,UAAU,IAAI,cAAc,IAAI;AACtC,UAAM,IAAI,OAAO;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,OAAO,CAAA,GAAI,QAAQ;AAChC,UAAM,IAAI,sBAAsB;AAAA,EAClC;AACF,CAAC;AAKM,MAAM,oBAAoB,KAAK,OAAO;AAAA;AAAA;AAAA;AAAA,EAI3C,WAAW,OAAO,EAAE,cAAA,GAAiB,QAAQ;AAC3C,UAAM,SAAS,MAAM,cAAc;AAAA,MACjC,UAAU,CAAC;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK,EAAE,UAAU,CAAC,KAAK,KAAK,EAAA;AAAA;AAAA,MAAE,CAC/B;AAAA,MACD,aAAa;AAAA,MACb,cAAc;AAAA,IAAA,CACf;AAED,UAAM,IAAI,MAAM;AAAA,EAClB;AACF,CAAC;AAKM,MAAM,uBAAuB,KAAK,OAAO;AAAA;AAAA;AAAA;AAAA,EAI9C,cAAc,OAAO,EAAE,cAAA,GAAiB,QAAQ;AAC9C,UAAM,SAAS,MAAM,cAAc;AAAA,MACjC,UAAU,CAAC;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,EAAE,UAAU,CAAC,gBAAgB,QAAQ,EAAA;AAAA,MAAE,CAChD;AAAA,MACD,aAAa;AAAA,MACb,cAAc;AAAA,IAAA,CACf;AAED,UAAM,IAAI,MAAM;AAAA,EAClB;AACF,CAAC;AAKM,MAAM,2BAA2B,KAAK,OAAO;AAAA;AAAA;AAAA;AAAA,EAIlD,kBAAkB,OAAO,EAAE,cAAA,GAAiB,QAAQ;AAClD,UAAM,SAAS,MAAM,cAAc;AAAA,MACjC,UAAU,CAAC;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK,EAAE,UAAU,CAAC,KAAK,KAAK,EAAA;AAAA,QAC5B,QAAQ,EAAE,UAAU,CAAC,cAAc,EAAA;AAAA,MAAE,CACtC;AAAA,MACD,aAAa;AAAA,MACb,cAAc;AAAA,IAAA,CACf;AAED,UAAM,IAAI,MAAM;AAAA,EAClB;AACF,CAAC;AAKM,MAAM,wBAAwB,KAAK,OAAO;AAAA,EAC/C,MAAM,OAAO,EAAE,MAAM,QAAA,GAAW,KAAK,aAAa;AAEhD,SAAK,GAAG,aAAa,CAAC,UAAU;AAC9B,cAAQ,MAAM,uBAAuB,KAAK;AAC1C,eAAS,OAAO,cAAc;AAAA,QAC5B,MAAM,MAAM,SAAS,MAAM;AAAA,QAC3B,aAAa;AAAA,MAAA,CACd;AAAA,IACH,CAAC;AAED,SAAK,GAAG,WAAW,CAAC,QAAQ;AAC1B,UAAI,IAAI,KAAA,MAAW,SAAS;AAC1B,gBAAQ,MAAM,kBAAkB,IAAI,KAAA,CAAM;AAC1C,iBAAS,OAAO,iBAAiB;AAAA,UAC/B,MAAM,IAAI,KAAA;AAAA,UACV,aAAa;AAAA,QAAA,CACd;AAAA,MACH;AAAA,IACF,CAAC;AAGD,SAAK,GAAG,iBAAiB,CAAC,YAAY;;AACpC,cAAQ,KAAK,mBAAmB,QAAQ,IAAA,IAAO,aAAQ,QAAA,MAAR,mBAAmB,SAAS;AAAA,IAC7E,CAAC;AAED,UAAM,IAAI,IAAI;AAGd,QAAI,SAAS,WAAW,UAAU;AAChC,UAAI;AACF,cAAM,kBAAkB,QAAQ;AAGhC,cAAM,aAAa,MAAM,KAAK,WAAA;AAC9B,iBAAS,OAAO,sBAAsB;AAAA,UACpC,MAAM;AAAA,UACN,aAAa;AAAA,QAAA,CACd;AAGD,cAAM,cAAc,MAAM,KAAK,SAAS,MAAM;;AAC5C,gBAAM,QAAa,CAAA;AACnB,cAAI,OAAO,UAAU;AACnB,kBAAM,WAAW;AAAA,cACf,aAAa,CAAC,CAAE,OAAO,SAAiB;AAAA,cACxC,SAAU,OAAO,SAAiB;AAAA,cAClC,iBAAkB,OAAO,SAAiB;AAAA,YAAA;AAAA,UAE9C;AACA,cAAI,OAAO,QAAQ;AACjB,kBAAM,SAAS;AAAA,cACb,aAAa,CAAC,CAAE,OAAO,OAAe;AAAA,cACtC,YAAY,YAAO,OAAe,cAAtB,mBAAiC;AAAA,YAAS;AAAA,UAE1D;AACA,iBAAO;AAAA,QACT,CAAC;AAED,iBAAS,OAAO,2BAA2B;AAAA,UACzC,MAAM,KAAK,UAAU,aAAa,MAAM,CAAC;AAAA,UACzC,aAAa;AAAA,QAAA,CACd;AAAA,MAEH,SAAS,cAAc;AACrB,gBAAQ,KAAK,yCAAyC,YAAY;AAAA,MACpE;AAAA,IACF;AAAA,EACF;AACF,CAAC;AAKM,MAAM,eAAe,OAAO,OAAO;AAAA;AAAA;AAAA;AAAA,EAIxC,MAAM,cAAc,MAAY,YAA8B,OAAO;AACnE,UAAM,cAAc,MAAM,KAAK,SAAS,CAAC,SAAS;AAChD,UAAI,SAAS,OAAO;AAClB,eAAO,CAAC,EAAE,OAAO,YAAa,OAAO,SAAiB;AAAA,MACxD,OAAO;AACL,eAAO,CAAC,EAAE,OAAO,UAAW,OAAO,OAAe;AAAA,MACpD;AAAA,IACF,GAAG,SAAS;AAEZ,WAAO;AAAA,MACL,SAAS,MAAM,yBAAyB,cAAc,iBAAiB,WAAW;AAAA,MAClF,MAAM;AAAA,IAAA;AAAA,EAEV;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAY,iBAAyB,YAA8B,OAAO;AAC5F,UAAM,iBAAiB,MAAM,KAAK,SAAS,CAAC,SAAS;;AACnD,UAAI,SAAS,OAAO;AAClB,iBAAQ,YAAO,aAAP,mBAAyB,oBAAmB;AAAA,MACtD,OAAO;AACL,iBAAQ,kBAAO,WAAP,mBAAuB,cAAvB,mBAAkC,eAAc;AAAA,MAC1D;AAAA,IACF,GAAG,SAAS;AAEZ,UAAM,UAAU,mBAAmB;AAEnC,WAAO;AAAA,MACL,SAAS,MACP,mCAAmC,eAAe,aAAa,cAAc;AAAA,MAC/E,MAAM;AAAA,IAAA;AAAA,EAEV;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,YAAY,MAAY,iBAAyB;AACrD,UAAM,iBAAiB,MAAM,KAAK,SAAS,MAAM;;AAC/C,eAAQ,YAAO,aAAP,mBAAyB,YAAW;AAAA,IAC9C,CAAC;AAED,UAAM,UAAU,mBAAmB;AAEnC,WAAO;AAAA,MACL,SAAS,MACP,kCAAkC,eAAe,aAAa,cAAc;AAAA,MAC9E,MAAM;AAAA,IAAA;AAAA,EAEV;AACF,CAAC;AChbM,IAAKE,oCAAAA,mBAAL;AAELA,iBAAA,aAAA,IAAc;AAEdA,iBAAA,SAAA,IAAU;AAEVA,iBAAA,QAAA,IAAS;AANC,SAAAA;AAAA,GAAAA,mBAAA,CAAA,CAAA;AAkDL,IAAK,sCAAAC,uBAAL;AAELA,qBAAA,gBAAA,IAAiB;AAEjBA,qBAAA,eAAA,IAAgB;AAEhBA,qBAAA,eAAA,IAAgB;AAEhBA,qBAAA,WAAA,IAAY;AAEZA,qBAAA,aAAA,IAAc;AAEdA,qBAAA,gBAAA,IAAiB;AAEjBA,qBAAA,WAAA,IAAY;AAdF,SAAAA;AAAA,GAAA,qBAAA,CAAA,CAAA;AAkPL,MAAM,8BAA8B,MAAM;AAAA,EAC/C,YACE,SACO,MACA,SACP;AACA,UAAM,OAAO;AAHN,SAAA,OAAA;AACA,SAAA,UAAA;AAGP,SAAK,OAAO;AAAA,EACd;AACF;+BAEO,MAAMC,gCAA+B,sBAAsB;AAAA,EAChE,YAAY,SAAiB,SAA+B;AAC1D,UAAM,SAAS,sBAAsB,OAAO;AAC5C,SAAK,OAAO;AAAA,EACd;AACF;0BAEO,MAAMC,2BAA0B,sBAAsB;AAAA,EAC3D,YAAY,SAAiB,SAA+B;AAC1D,UAAM,SAAS,sBAAsB,OAAO;AAC5C,SAAK,OAAO;AAAA,EACd;AACF;oBAEO,MAAMC,qBAAoB,sBAAsB;AAAA,EACrD,YAAY,SAAiB,SAA+B;AAC1D,UAAM,SAAS,gBAAgB,OAAO;AACtC,SAAK,OAAO;AAAA,EACd;AACF;AAKO,MAAM,0BAA0B,CAAC,UAA+C;AACrF,SAAO,iBAAiB,SAAS,UAAU;AAC7C;AAEO,MAAM,2BAA2B,CAAC,UAAgD;AACvF,SAAO,iBAAiBF;AAC1B;AAEO,MAAM,sBAAsB,CAAC,UAA2C;AAC7E,SAAO,iBAAiBC;AAC1B;AAEO,MAAM,gBAAgB,CAAC,UAAqC;AACjE,SAAO,iBAAiBC;AAC1B;ACnJO,MAAM,UAAU;AAChB,MAAM,eAAe;AAKrB,MAAM,0BAA6D;AAAA,EACxE,aAAa;AAAA,EACb,cAAc;AAAA,EACd,SAAS;AAAA,EACT,UAAU;AAAA,IACR,OAAO,cAAc;AAAA,IACrB,iBAAiB;AAAA,IACjB,iBAAiB;AAAA,IACjB,eAAe;AAAA,EAAA;AAAA,EAEjB,WAAW;AAAA,IACT,gBAAgB;AAAA,IAChB,mBAAmB;AAAA,IACnB,kBAAkB;AAAA,IAClB,kBAAkB;AAAA,EAAA;AAEtB;AAKO,MAAM,aAAa;AAAA;AAAA;AAAA;AAAA,EAIxB,MAAM,UAAU,MAAW,WAAqB,CAAC,GAAG,GAAG;AACrD,WAAO,MAAM,kBAAkB,MAAM;AAAA,MACnC,UAAU,CAAC;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK,EAAE,SAAA;AAAA,MAAS,CACjB;AAAA,MACD,GAAG;AAAA,IAAA,CACJ;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,aAAa,MAAW,WAAqB,CAAC,cAAc,GAAG;AACnE,WAAO,MAAM,kBAAkB,MAAM;AAAA,MACnC,UAAU,CAAC;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,EAAE,SAAA;AAAA,MAAS,CACpB;AAAA,MACD,GAAG;AAAA,IAAA,CACJ;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBACJ,MACA,WAAqB,CAAC,GAAG,GACzB,WAAqB,CAAC,cAAc,GACpC;AACA,WAAO,MAAM,kBAAkB,MAAM;AAAA,MACnC,UAAU,CAAC;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK,EAAE,SAAA;AAAA,QACP,QAAQ,EAAE,SAAA;AAAA,MAAS,CACpB;AAAA,MACD,GAAG;AAAA,IAAA,CACJ;AAAA,EACH;AACF;AAKO,SAAS,0BAAgC;AAC9C,QAAM,MAAM,kBAAA;AAEZ,MAAI,IAAI,cAAc;AACpB,UAAM,IAAI;AAAA,MACR;AAAA,IAAA;AAAA,EAGJ;AAEA,MAAI,CAAC,IAAI,UAAU,CAAC,IAAI,eAAe;AACrC,YAAQ;AAAA,MACN;AAAA,IAAA;AAAA,EAGJ;AACF;AAGA,IAAI;AACF,0BAAA;AACF,SAAS,OAAO;AAEd,QAAM;AACR;"}