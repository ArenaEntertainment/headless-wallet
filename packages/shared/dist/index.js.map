{"version":3,"file":"index.js","sources":["../src/types/account.ts","../src/types/chain.ts","../src/utils/crypto.ts","../src/utils/logger.ts","../src/utils/validation.ts","../src/constants/errors.ts"],"sourcesContent":["/**\n * Account type enumeration\n */\nexport enum AccountType {\n  EVM_ONLY = 'evm_only',\n  SOLANA_ONLY = 'solana_only',\n  DUAL_CHAIN = 'dual_chain'\n}\n\n/**\n * Chain types supported by the wallet\n */\nexport type ChainType = 'evm' | 'solana';\n\n/**\n * Base account interface\n */\nexport interface BaseAccount {\n  /** Unique identifier for the account */\n  id: string;\n  /** Human-readable name for the account */\n  name?: string;\n  /** Account type */\n  type: AccountType;\n  /** Whether the account is currently active */\n  isActive: boolean;\n  /** Timestamp when account was created */\n  createdAt: number;\n}\n\n/**\n * EVM-specific account data\n */\nexport interface EVMAccountData {\n  /** EVM private key in hex format */\n  privateKey: string;\n  /** EVM address derived from private key */\n  address: string;\n  /** Supported EVM chain IDs */\n  chainIds: string[];\n}\n\n/**\n * Solana-specific account data\n */\nexport interface SolanaAccountData {\n  /** Solana secret key as Uint8Array */\n  secretKey: Uint8Array;\n  /** Solana public key */\n  publicKey: string;\n  /** Supported Solana clusters */\n  clusters: string[];\n}\n\n/**\n * EVM-only account\n */\nexport interface EVMAccount extends BaseAccount {\n  type: AccountType.EVM_ONLY;\n  evm: EVMAccountData;\n}\n\n/**\n * Solana-only account\n */\nexport interface SolanaAccount extends BaseAccount {\n  type: AccountType.SOLANA_ONLY;\n  solana: SolanaAccountData;\n}\n\n/**\n * Dual-chain account supporting both EVM and Solana\n */\nexport interface DualChainAccount extends BaseAccount {\n  type: AccountType.DUAL_CHAIN;\n  evm: EVMAccountData;\n  solana: SolanaAccountData;\n}\n\n/**\n * Union type for all account types\n */\nexport type Account = EVMAccount | SolanaAccount | DualChainAccount;\n\n/**\n * Configuration for creating a new account\n */\nexport interface AccountConfig {\n  /** Account type to create */\n  type: AccountType;\n  /** Optional account name */\n  name?: string;\n  /** EVM configuration (required for EVM_ONLY and DUAL_CHAIN) */\n  evm?: {\n    /** Private key (if not provided, will be generated) */\n    privateKey?: string;\n    /** Chain IDs to support */\n    chainIds: string[];\n  };\n  /** Solana configuration (required for SOLANA_ONLY and DUAL_CHAIN) */\n  solana?: {\n    /** Secret key (if not provided, will be generated) */\n    secretKey?: Uint8Array;\n    /** Clusters to support */\n    clusters: string[];\n  };\n}\n\n/**\n * Account management events\n */\nexport interface AccountEvents {\n  /** Fired when a new account is added */\n  accountAdded: (account: Account) => void;\n  /** Fired when an account is removed */\n  accountRemoved: (accountId: string) => void;\n  /** Fired when the active account changes */\n  accountChanged: (account: Account | null) => void;\n  /** Fired when account data is updated */\n  accountUpdated: (account: Account) => void;\n  /** Index signature for compatibility */\n  [key: string]: (...args: any[]) => void;\n}","/**\n * Chain configuration interface\n */\nexport interface Chain {\n  /** Unique chain identifier */\n  id: string;\n  /** Chain type */\n  type: 'evm' | 'solana';\n  /** Human-readable chain name */\n  name: string;\n  /** Native currency information */\n  nativeCurrency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  /** RPC endpoints */\n  rpcUrls: {\n    default: {\n      http: string[];\n      webSocket?: string[];\n    };\n    public?: {\n      http: string[];\n      webSocket?: string[];\n    };\n  };\n  /** Block explorer URLs */\n  blockExplorers?: {\n    default: {\n      name: string;\n      url: string;\n    };\n  };\n  /** Whether this is a testnet */\n  testnet?: boolean;\n}\n\n/**\n * EVM-specific chain configuration\n */\nexport interface EVMChain extends Chain {\n  type: 'evm';\n  /** Numeric chain ID for EVM networks */\n  chainId: number;\n  /** Hex representation of chain ID */\n  chainIdHex: string;\n}\n\n/**\n * Solana-specific cluster configuration\n */\nexport interface SolanaCluster extends Chain {\n  type: 'solana';\n  /** Solana cluster type */\n  cluster: 'mainnet-beta' | 'testnet' | 'devnet' | 'localnet';\n  /** Cluster endpoint */\n  endpoint: string;\n}\n\n/**\n * Union type for all chain types\n */\nexport type SupportedChain = EVMChain | SolanaCluster;\n\n/**\n * Chain management events\n */\nexport interface ChainEvents {\n  /** Fired when a new chain is added */\n  chainAdded: (chain: SupportedChain) => void;\n  /** Fired when a chain is removed */\n  chainRemoved: (chainId: string) => void;\n  /** Fired when the active chain changes */\n  chainChanged: (chain: SupportedChain) => void;\n  /** Fired when chain configuration is updated */\n  chainUpdated: (chain: SupportedChain) => void;\n  /** Index signature for compatibility */\n  [key: string]: (...args: any[]) => void;\n}\n\n/**\n * Predefined chain configurations\n */\nexport const CHAIN_PRESETS = {\n  ethereum: {\n    id: '1',\n    type: 'evm',\n    chainId: 1,\n    chainIdHex: '0x1',\n    name: 'Ethereum',\n    nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n    rpcUrls: {\n      default: { http: ['https://cloudflare-eth.com'] }\n    },\n    blockExplorers: {\n      default: { name: 'Etherscan', url: 'https://etherscan.io' }\n    }\n  } as EVMChain,\n\n  polygon: {\n    id: '137',\n    type: 'evm',\n    chainId: 137,\n    chainIdHex: '0x89',\n    name: 'Polygon',\n    nativeCurrency: { name: 'MATIC', symbol: 'MATIC', decimals: 18 },\n    rpcUrls: {\n      default: { http: ['https://polygon-rpc.com'] }\n    },\n    blockExplorers: {\n      default: { name: 'PolygonScan', url: 'https://polygonscan.com' }\n    }\n  } as EVMChain,\n\n  localhost: {\n    id: '31337',\n    type: 'evm',\n    chainId: 31337,\n    chainIdHex: '0x7a69',\n    name: 'Localhost',\n    nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n    rpcUrls: {\n      default: { http: ['http://127.0.0.1:8545'] }\n    },\n    testnet: true\n  } as EVMChain,\n\n  solanaMainnet: {\n    id: 'solana-mainnet',\n    type: 'solana',\n    cluster: 'mainnet-beta',\n    name: 'Solana Mainnet',\n    endpoint: 'https://api.mainnet-beta.solana.com',\n    nativeCurrency: { name: 'Solana', symbol: 'SOL', decimals: 9 },\n    rpcUrls: {\n      default: { http: ['https://api.mainnet-beta.solana.com'] }\n    },\n    blockExplorers: {\n      default: { name: 'Solscan', url: 'https://solscan.io' }\n    }\n  } as SolanaCluster,\n\n  solanaDevnet: {\n    id: 'solana-devnet',\n    type: 'solana',\n    cluster: 'devnet',\n    name: 'Solana Devnet',\n    endpoint: 'https://api.devnet.solana.com',\n    nativeCurrency: { name: 'Solana', symbol: 'SOL', decimals: 9 },\n    rpcUrls: {\n      default: { http: ['https://api.devnet.solana.com'] }\n    },\n    blockExplorers: {\n      default: { name: 'Solscan', url: 'https://solscan.io' }\n    },\n    testnet: true\n  } as SolanaCluster\n} as const;","/**\n * Generate random hexadecimal string\n * @param bytesLength - Length in bytes\n * @returns Hex string without 0x prefix\n */\nexport function generateRandomHex(bytesLength: number): string {\n  const bytes = generateRandomBytes(bytesLength);\n  return Array.from(bytes, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n * Generate random bytes\n * @param length - Length in bytes\n * @returns Random bytes as Uint8Array\n */\nexport function generateRandomBytes(length: number): Uint8Array {\n  // Use Web Crypto API if available (browser), otherwise Node.js crypto\n  if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {\n    const array = new Uint8Array(length);\n    window.crypto.getRandomValues(array);\n    return array;\n  } else if (typeof global !== 'undefined' && global.crypto && global.crypto.getRandomValues) {\n    const array = new Uint8Array(length);\n    global.crypto.getRandomValues(array);\n    return array;\n  } else {\n    // Fallback for Node.js environments\n    try {\n      const { randomBytes } = require('crypto');\n      return new Uint8Array(randomBytes(length));\n    } catch (e) {\n      throw new Error('No cryptographically secure random number generator available');\n    }\n  }\n}\n\n/**\n * Security utilities for handling sensitive data\n */\nexport class SecureCrypto {\n  /**\n   * Generate a cryptographically secure random private key\n   * @returns 32-byte private key as hex string\n   */\n  static generatePrivateKey(): string {\n    const key = this.generateSeed(32);\n    return '0x' + Array.from(key, byte => byte.toString(16).padStart(2, '0')).join('');\n  }\n\n  /**\n   * Generate a cryptographically secure random seed\n   * @param length - Length of seed in bytes (default: 32)\n   * @returns Random seed as Uint8Array\n   */\n  static generateSeed(length: number = 32): Uint8Array {\n    // Use Web Crypto API if available (browser), otherwise Node.js crypto\n    if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {\n      const array = new Uint8Array(length);\n      window.crypto.getRandomValues(array);\n      return array;\n    } else if (typeof global !== 'undefined' && global.crypto && global.crypto.getRandomValues) {\n      const array = new Uint8Array(length);\n      global.crypto.getRandomValues(array);\n      return array;\n    } else {\n      // Fallback for Node.js environments\n      try {\n        const { randomBytes } = require('crypto');\n        return new Uint8Array(randomBytes(length));\n      } catch (e) {\n        throw new Error('No cryptographically secure random number generator available');\n      }\n    }\n  }\n\n  /**\n   * Securely clear sensitive data from memory\n   * @param data - Buffer or Uint8Array to clear\n   */\n  static secureClear(data: Uint8Array): void {\n    if (data) {\n      // Overwrite with random data multiple times\n      for (let i = 0; i < 3; i++) {\n        const random = this.generateSeed(data.length);\n        data.set(random);\n      }\n      // Final zero fill\n      data.fill(0);\n    }\n  }\n\n  /**\n   * Generate a test-only private key with clear marking\n   * @param seed - Optional seed string for deterministic generation\n   * @returns Test private key with TEST_ONLY prefix\n   */\n  static generateTestKey(seed?: string): string {\n    const prefix = 'TEST_ONLY_';\n\n    // Create a simple hash function for browser compatibility\n    const seedData = seed ? new TextEncoder().encode(seed) : this.generateSeed(16);\n    const prefixData = new TextEncoder().encode(prefix);\n\n    // Simple hash implementation (not cryptographically secure, but fine for test keys)\n    const combined = new Uint8Array(prefixData.length + seedData.length);\n    combined.set(prefixData);\n    combined.set(seedData, prefixData.length);\n\n    // Generate deterministic key from seed\n    let hash = 0;\n    for (let i = 0; i < combined.length; i++) {\n      hash = ((hash << 5) - hash + combined[i]) & 0xffffffff;\n    }\n\n    // Use hash as seed for deterministic random generation\n    const key = new Uint8Array(32);\n    for (let i = 0; i < 32; i++) {\n      hash = ((hash * 1103515245) + 12345) & 0x7fffffff;\n      key[i] = (hash >> 24) & 0xff;\n    }\n\n    return '0x' + Array.from(key, byte => byte.toString(16).padStart(2, '0')).join('');\n  }\n\n  /**\n   * Validate that a private key is marked as test-only\n   * @param key - Private key to validate\n   * @returns True if key is properly marked for testing\n   */\n  static isTestKey(key: string): boolean {\n    // This is a basic check - real implementation would have more sophisticated validation\n    return key.startsWith('0x') && key.length === 66;\n  }\n}","/**\n * Log levels\n */\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  NONE = 4\n}\n\n/**\n * Logger configuration\n */\nexport interface LoggerConfig {\n  level: LogLevel;\n  prefix: string;\n  enableTimestamp: boolean;\n  enableColors: boolean;\n}\n\n/**\n * Mock wallet logger with security-aware logging\n */\nexport class Logger {\n  private config: LoggerConfig;\n\n  constructor(config: Partial<LoggerConfig> = {}) {\n    this.config = {\n      level: LogLevel.INFO,\n      prefix: '[WalletMock]',\n      enableTimestamp: true,\n      enableColors: true,\n      ...config\n    };\n  }\n\n  /**\n   * Debug level logging\n   */\n  debug(message: string, data?: any): void {\n    if (this.config.level <= LogLevel.DEBUG) {\n      this.log('DEBUG', message, data, '\\x1b[36m'); // Cyan\n    }\n  }\n\n  /**\n   * Info level logging\n   */\n  info(message: string, data?: any): void {\n    if (this.config.level <= LogLevel.INFO) {\n      this.log('INFO', message, data, '\\x1b[32m'); // Green\n    }\n  }\n\n  /**\n   * Warning level logging\n   */\n  warn(message: string, data?: any): void {\n    if (this.config.level <= LogLevel.WARN) {\n      this.log('WARN', message, data, '\\x1b[33m'); // Yellow\n    }\n  }\n\n  /**\n   * Error level logging\n   */\n  error(message: string, error?: Error | any): void {\n    if (this.config.level <= LogLevel.ERROR) {\n      this.log('ERROR', message, error, '\\x1b[31m'); // Red\n    }\n  }\n\n  /**\n   * Security-focused logging that never logs sensitive data\n   */\n  security(level: 'info' | 'warn' | 'error', message: string, metadata?: Record<string, any>): void {\n    const sanitizedMetadata = metadata ? this.sanitizeMetadata(metadata) : undefined;\n\n    switch (level) {\n      case 'info':\n        this.info(`[SECURITY] ${message}`, sanitizedMetadata);\n        break;\n      case 'warn':\n        this.warn(`[SECURITY] ${message}`, sanitizedMetadata);\n        break;\n      case 'error':\n        this.error(`[SECURITY] ${message}`, sanitizedMetadata);\n        break;\n    }\n  }\n\n  /**\n   * Internal logging method\n   */\n  private log(level: string, message: string, data?: any, color?: string): void {\n    const timestamp = this.config.enableTimestamp ? new Date().toISOString() : '';\n    const colorStart = this.config.enableColors && color ? color : '';\n    const colorEnd = this.config.enableColors ? '\\x1b[0m' : '';\n\n    const prefix = [\n      this.config.prefix,\n      timestamp,\n      `[${level}]`\n    ].filter(Boolean).join(' ');\n\n    const fullMessage = `${colorStart}${prefix} ${message}${colorEnd}`;\n\n    console.log(fullMessage);\n\n    if (data !== undefined) {\n      // Sanitize data before logging\n      const sanitizedData = this.sanitizeData(data);\n      console.log(colorStart, sanitizedData, colorEnd);\n    }\n  }\n\n  /**\n   * Sanitize data to prevent logging sensitive information\n   */\n  private sanitizeData(data: any): any {\n    if (typeof data !== 'object' || data === null) {\n      return data;\n    }\n\n    const sensitiveKeys = [\n      'privateKey',\n      'secretKey',\n      'mnemonic',\n      'password',\n      'token',\n      'secret',\n      'key'\n    ];\n\n    if (Array.isArray(data)) {\n      return data.map(item => this.sanitizeData(item));\n    }\n\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(data)) {\n      const lowerKey = key.toLowerCase();\n      const isSensitive = sensitiveKeys.some(sensitive => lowerKey.includes(sensitive));\n\n      if (isSensitive) {\n        sanitized[key] = '[REDACTED]';\n      } else if (typeof value === 'object' && value !== null) {\n        sanitized[key] = this.sanitizeData(value);\n      } else {\n        sanitized[key] = value;\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Sanitize metadata for security logging\n   */\n  private sanitizeMetadata(metadata: Record<string, any>): Record<string, any> {\n    const sanitized: Record<string, any> = {};\n\n    for (const [key, value] of Object.entries(metadata)) {\n      // Only include safe metadata\n      if (['accountId', 'chainId', 'method', 'timestamp', 'error', 'type'].includes(key)) {\n        sanitized[key] = value;\n      }\n    }\n\n    return sanitized;\n  }\n}\n\n// Export default logger instance\nexport const logger = new Logger({\n  level: process.env.NODE_ENV === 'development' ? LogLevel.DEBUG : LogLevel.INFO,\n  prefix: '[WalletMock]'\n});","/**\n * Validation utilities for wallet operations\n */\n\n/**\n * Validate Ethereum private key format\n */\nexport function isValidEthereumPrivateKey(key: string): boolean {\n  if (!key.startsWith('0x')) return false;\n  if (key.length !== 66) return false;\n\n  const hex = key.slice(2);\n  return /^[0-9a-fA-F]{64}$/.test(hex);\n}\n\n/**\n * Validate Ethereum address format\n */\nexport function isValidEthereumAddress(address: string): boolean {\n  if (!address.startsWith('0x')) return false;\n  if (address.length !== 42) return false;\n\n  const hex = address.slice(2);\n  return /^[0-9a-fA-F]{40}$/.test(hex);\n}\n\n/**\n * Validate Solana public key format (Base58)\n */\nexport function isValidSolanaPublicKey(publicKey: string): boolean {\n  // Solana public keys are 32 bytes encoded in Base58, typically 43-44 characters\n  if (publicKey.length < 43 || publicKey.length > 44) return false;\n\n  // Basic Base58 character set validation\n  return /^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$/.test(publicKey);\n}\n\n/**\n * Validate chain ID format\n */\nexport function isValidChainId(chainId: string): boolean {\n  if (!chainId || typeof chainId !== 'string') return false;\n  return chainId.length > 0 && chainId.length < 100;\n}\n\n/**\n * Validate account name\n */\nexport function isValidAccountName(name: string): boolean {\n  if (!name || typeof name !== 'string') return false;\n  if (name.length < 1 || name.length > 100) return false;\n\n  // Allow alphanumeric, spaces, hyphens, underscores\n  return /^[a-zA-Z0-9\\s\\-_]+$/.test(name);\n}\n\n/**\n * Validate RPC URL\n */\nexport function isValidRpcUrl(url: string): boolean {\n  try {\n    const parsed = new URL(url);\n    return ['http:', 'https:', 'ws:', 'wss:'].includes(parsed.protocol);\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Check if running in production environment\n */\nexport function isProductionEnvironment(): boolean {\n  const checks = [\n    () => process.env.NODE_ENV === 'production',\n    () => typeof window !== 'undefined' &&\n         window.location.hostname !== 'localhost' &&\n         !window.location.hostname.includes('127.0.0.1') &&\n         !window.location.hostname.includes('0.0.0.0'),\n    () => typeof window !== 'undefined' &&\n         window.location.protocol === 'https:' &&\n         !window.location.hostname.includes('localhost'),\n    () => typeof document !== 'undefined' &&\n         document.domain &&\n         !['localhost', '127.0.0.1', '0.0.0.0'].includes(document.domain)\n  ];\n\n  return checks.some(check => {\n    try {\n      return check();\n    } catch {\n      return false;\n    }\n  });\n}\n\n/**\n * Validate environment for mock wallet usage\n */\nexport function validateMockWalletEnvironment(): { isValid: boolean; reason?: string } {\n  if (isProductionEnvironment()) {\n    return {\n      isValid: false,\n      reason: 'Mock wallet cannot be used in production environment'\n    };\n  }\n\n  return { isValid: true };\n}\n\n/**\n * Sanitize string for logging (remove sensitive patterns)\n */\nexport function sanitizeForLogging(input: string): string {\n  return input\n    .replace(/0x[a-fA-F0-9]{64}/g, '0x[PRIVATE_KEY]')\n    .replace(/0x[a-fA-F0-9]{40}/g, '0x[ADDRESS]')\n    .replace(/[a-zA-Z0-9]{43,44}/g, '[PUBKEY]'); // Solana public keys\n}","/**\n * Standard error codes for wallet operations\n */\nexport enum WalletErrorCode {\n  // Connection errors\n  NOT_CONNECTED = 4900,\n  CONNECTION_FAILED = 4901,\n  ALREADY_CONNECTED = 4902,\n\n  // Account errors\n  ACCOUNT_NOT_FOUND = 4100,\n  INVALID_ACCOUNT = 4101,\n  ACCOUNT_ALREADY_EXISTS = 4102,\n\n  // Chain errors\n  UNSUPPORTED_CHAIN = 4902,\n  CHAIN_NOT_FOUND = 4903,\n  INVALID_CHAIN = 4904,\n\n  // Transaction errors\n  INVALID_TRANSACTION = 4001,\n  TRANSACTION_REJECTED = 4002,\n  INSUFFICIENT_FUNDS = 4003,\n\n  // Signature errors\n  INVALID_SIGNATURE = 4200,\n  SIGNATURE_REJECTED = 4201,\n\n  // Security errors\n  PRODUCTION_ENVIRONMENT = 5000,\n  UNSAFE_OPERATION = 5001,\n  INVALID_CREDENTIALS = 5002,\n\n  // General errors\n  INVALID_PARAMS = 4000,\n  INTERNAL_ERROR = 5003,\n  NOT_IMPLEMENTED = 5004\n}\n\n/**\n * Base wallet error class\n */\nexport class WalletError extends Error {\n  public readonly code: WalletErrorCode;\n  public readonly data?: any;\n\n  constructor(code: WalletErrorCode, message: string, data?: any) {\n    super(message);\n    this.name = 'WalletError';\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * Connection related errors\n */\nexport class ConnectionError extends WalletError {\n  constructor(message: string, data?: any) {\n    super(WalletErrorCode.CONNECTION_FAILED, message, data);\n    this.name = 'ConnectionError';\n  }\n}\n\n/**\n * Account related errors\n */\nexport class AccountError extends WalletError {\n  constructor(code: WalletErrorCode, message: string, data?: any) {\n    super(code, message, data);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * Chain related errors\n */\nexport class ChainError extends WalletError {\n  constructor(code: WalletErrorCode, message: string, data?: any) {\n    super(code, message, data);\n    this.name = 'ChainError';\n  }\n}\n\n/**\n * Transaction related errors\n */\nexport class TransactionError extends WalletError {\n  constructor(code: WalletErrorCode, message: string, data?: any) {\n    super(code, message, data);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * Security related errors\n */\nexport class SecurityError extends WalletError {\n  constructor(code: WalletErrorCode, message: string, data?: any) {\n    super(code, message, data);\n    this.name = 'SecurityError';\n  }\n}\n\n/**\n * Error factory functions\n */\nexport const WalletErrors = {\n  notConnected: () => new WalletError(\n    WalletErrorCode.NOT_CONNECTED,\n    'Wallet is not connected'\n  ),\n\n  accountNotFound: (accountId: string) => new AccountError(\n    WalletErrorCode.ACCOUNT_NOT_FOUND,\n    `Account not found: ${accountId}`,\n    { accountId }\n  ),\n\n  unsupportedChain: (chainId: string) => new ChainError(\n    WalletErrorCode.UNSUPPORTED_CHAIN,\n    `Unsupported chain: ${chainId}`,\n    { chainId }\n  ),\n\n  invalidTransaction: (reason: string) => new TransactionError(\n    WalletErrorCode.INVALID_TRANSACTION,\n    `Invalid transaction: ${reason}`,\n    { reason }\n  ),\n\n  productionEnvironment: () => new SecurityError(\n    WalletErrorCode.PRODUCTION_ENVIRONMENT,\n    'Mock wallet cannot be used in production environment'\n  ),\n\n  invalidParams: (param: string) => new WalletError(\n    WalletErrorCode.INVALID_PARAMS,\n    `Invalid parameter: ${param}`,\n    { param }\n  ),\n\n  internalError: (message: string) => new WalletError(\n    WalletErrorCode.INTERNAL_ERROR,\n    `Internal error: ${message}`\n  )\n};"],"names":["AccountType","LogLevel","WalletErrorCode"],"mappings":"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"}