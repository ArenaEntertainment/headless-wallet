{"version":3,"file":"index.js","sources":["../src/security/production-guard.ts","../src/state/state-manager.ts","../src/accounts/account-manager.ts","../src/wallet/unified-wallet.ts","../src/factory/wallet-factory.ts"],"sourcesContent":["/**\n * Production environment security guard\n * Prevents wallet mock from being used in production environments\n */\n\nexport interface ProductionGuardConfig {\n  /** Enable production environment checks */\n  enableProductionChecks: boolean;\n  /** Custom production detection logic */\n  customProductionDetector?: () => boolean;\n  /** Allow override for specific use cases */\n  allowProductionOverride?: boolean;\n  /** Environment variable name to check for override */\n  overrideEnvVar?: string;\n}\n\nexport interface ProductionCheckResult {\n  /** Whether environment appears to be production */\n  isProduction: boolean;\n  /** Reasons why environment was flagged as production */\n  reasons: string[];\n  /** Whether override is active */\n  overrideActive: boolean;\n}\n\n/**\n * Production environment detector\n */\nexport class ProductionGuard {\n  private config: Required<ProductionGuardConfig>;\n\n  constructor(config: ProductionGuardConfig) {\n    this.config = {\n      enableProductionChecks: config.enableProductionChecks,\n      customProductionDetector: config.customProductionDetector || this.defaultProductionDetector.bind(this),\n      allowProductionOverride: config.allowProductionOverride ?? false,\n      overrideEnvVar: config.overrideEnvVar || 'WALLET_MOCK_ALLOW_PRODUCTION'\n    };\n  }\n\n  /**\n   * Check if current environment is production and validate if wallet mock should be allowed\n   */\n  checkEnvironment(): ProductionCheckResult {\n    const reasons: string[] = [];\n    let isProduction = false;\n\n    // Check if production checks are disabled\n    if (!this.config.enableProductionChecks) {\n      return {\n        isProduction: false,\n        reasons: ['Production checks disabled'],\n        overrideActive: false\n      };\n    }\n\n    // Check for environment override\n    const overrideActive = this.isOverrideActive();\n    if (overrideActive && this.config.allowProductionOverride) {\n      return {\n        isProduction: false,\n        reasons: ['Production environment detected but override active'],\n        overrideActive: true\n      };\n    }\n\n    // Run production detection\n    try {\n      isProduction = this.config.customProductionDetector();\n      if (isProduction) {\n        reasons.push('Custom production detector flagged environment');\n      }\n    } catch (error) {\n      reasons.push(`Error in custom production detector: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    // Run default production checks\n    const defaultResult = this.runDefaultChecks();\n    if (defaultResult.isProduction) {\n      isProduction = true;\n      reasons.push(...defaultResult.reasons);\n    }\n\n    return {\n      isProduction,\n      reasons,\n      overrideActive\n    };\n  }\n\n  /**\n   * Validate environment and throw if production environment detected without override\n   */\n  validateEnvironment(): void {\n    const result = this.checkEnvironment();\n\n    if (result.isProduction && !result.overrideActive) {\n      const reasonsStr = result.reasons.join(', ');\n      throw new Error(\n        `Wallet mock detected production environment and cannot be used for security reasons. ` +\n        `Reasons: ${reasonsStr}. ` +\n        `To override this check (NOT RECOMMENDED), set ${this.config.overrideEnvVar}=true`\n      );\n    }\n  }\n\n  /**\n   * Default production environment detection logic\n   */\n  private defaultProductionDetector(): boolean {\n    const checks = this.runDefaultChecks();\n    return checks.isProduction;\n  }\n\n  /**\n   * Run default production environment checks\n   */\n  private runDefaultChecks(): { isProduction: boolean; reasons: string[] } {\n    const reasons: string[] = [];\n    let isProduction = false;\n\n    // Check NODE_ENV\n    if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'production') {\n      isProduction = true;\n      reasons.push('NODE_ENV is set to production');\n    }\n\n    // Check for common production environment variables\n    if (typeof process !== 'undefined' && process.env) {\n      const prodEnvVars = [\n        'VERCEL',\n        'NETLIFY',\n        'AWS_LAMBDA_FUNCTION_NAME',\n        'HEROKU_APP_NAME',\n        'RAILWAY_ENVIRONMENT',\n        'RENDER'\n      ];\n\n      for (const envVar of prodEnvVars) {\n        if (process.env[envVar]) {\n          isProduction = true;\n          reasons.push(`Production platform detected: ${envVar}`);\n        }\n      }\n    }\n\n    // Check for production-like hostnames in browser\n    if (typeof window !== 'undefined' && window.location) {\n      const hostname = window.location.hostname;\n      const prodPatterns = [\n        /^(?!localhost)(?!127\\.0\\.0\\.1)(?!192\\.168\\.)(?!10\\.)(?!172\\.(1[6-9]|2\\d|3[01])\\.).*$/,\n        /\\.(com|org|net|io|co|app)$/\n      ];\n\n      for (const pattern of prodPatterns) {\n        if (pattern.test(hostname)) {\n          isProduction = true;\n          reasons.push(`Production hostname detected: ${hostname}`);\n          break;\n        }\n      }\n    }\n\n    // Check for HTTPS in production-like contexts\n    if (typeof window !== 'undefined' && window.location?.protocol === 'https:') {\n      const hostname = window.location.hostname;\n      if (hostname !== 'localhost' && !hostname.startsWith('192.168.') && !hostname.startsWith('10.')) {\n        isProduction = true;\n        reasons.push('HTTPS detected on non-local domain');\n      }\n    }\n\n    return { isProduction, reasons };\n  }\n\n  /**\n   * Check if production override is active\n   */\n  private isOverrideActive(): boolean {\n    if (!this.config.allowProductionOverride) {\n      return false;\n    }\n\n    // Check environment variable\n    if (typeof process !== 'undefined' && process.env?.[this.config.overrideEnvVar] === 'true') {\n      return true;\n    }\n\n    // Check localStorage in browser (for development)\n    if (typeof window !== 'undefined' && window.localStorage) {\n      try {\n        return window.localStorage.getItem(this.config.overrideEnvVar) === 'true';\n      } catch {\n        // localStorage access can fail in some contexts\n        return false;\n      }\n    }\n\n    return false;\n  }\n}\n\n/**\n * Create a default production guard instance\n */\nexport function createProductionGuard(config: Partial<ProductionGuardConfig> = {}): ProductionGuard {\n  return new ProductionGuard({\n    enableProductionChecks: config.enableProductionChecks ?? true,\n    customProductionDetector: config.customProductionDetector,\n    allowProductionOverride: config.allowProductionOverride ?? false,\n    overrideEnvVar: config.overrideEnvVar\n  });\n}","import type {\n  WalletState,\n  WalletConfig,\n  EventEmitter,\n  Account,\n  SupportedChain\n} from '@arenaentertainment/wallet-mock-shared';\n\n/**\n * State change event handler type\n */\nexport type StateChangeHandler = (state: WalletState) => void;\n\n/**\n * State manager configuration\n */\nexport interface StateManagerConfig {\n  /** Initial state */\n  initialState?: Partial<WalletState>;\n  /** Enable state persistence */\n  enablePersistence?: boolean;\n  /** Storage key for persisted state */\n  storageKey?: string;\n  /** State validation function */\n  stateValidator?: (state: WalletState) => boolean;\n  /** Auto-save delay in milliseconds */\n  autoSaveDelay?: number;\n}\n\n/**\n * State manager for wallet state management and persistence\n */\nexport class StateManager {\n  private state: WalletState;\n  private config: Required<StateManagerConfig>;\n  private listeners: Set<StateChangeHandler> = new Set();\n  private saveTimeout?: ReturnType<typeof setTimeout>;\n\n  constructor(config: StateManagerConfig = {}) {\n    this.config = {\n      initialState: config.initialState || {},\n      enablePersistence: config.enablePersistence ?? false,\n      storageKey: config.storageKey || 'wallet-mock-state',\n      stateValidator: config.stateValidator || this.defaultStateValidator,\n      autoSaveDelay: config.autoSaveDelay ?? 500\n    };\n\n    // Initialize state\n    this.state = this.createInitialState();\n\n    // Load persisted state if enabled\n    if (this.config.enablePersistence) {\n      this.loadPersistedState();\n    }\n  }\n\n  /**\n   * Get current wallet state\n   */\n  getState(): WalletState {\n    return { ...this.state }; // Return a copy to prevent external mutations\n  }\n\n  /**\n   * Update wallet state\n   */\n  updateState(updates: Partial<WalletState>): void {\n    const newState = { ...this.state, ...updates };\n\n    // Validate new state\n    if (!this.config.stateValidator(newState)) {\n      throw new Error('Invalid state update');\n    }\n\n    const oldState = this.state;\n    this.state = newState;\n\n    // Emit state change event\n    this.notifyListeners(this.state);\n\n    // Schedule persistence if enabled\n    if (this.config.enablePersistence) {\n      this.schedulePersistence();\n    }\n  }\n\n  /**\n   * Update specific state property\n   */\n  updateStateProperty<K extends keyof WalletState>(\n    key: K,\n    value: WalletState[K]\n  ): void {\n    this.updateState({ [key]: value } as Partial<WalletState>);\n  }\n\n  /**\n   * Reset state to initial values\n   */\n  resetState(): void {\n    this.state = this.createInitialState();\n    this.notifyListeners(this.state);\n\n    if (this.config.enablePersistence) {\n      this.clearPersistedState();\n    }\n  }\n\n  /**\n   * Add state change listener\n   */\n  addStateChangeListener(handler: StateChangeHandler): void {\n    this.listeners.add(handler);\n  }\n\n  /**\n   * Remove state change listener\n   */\n  removeStateChangeListener(handler: StateChangeHandler): void {\n    this.listeners.delete(handler);\n  }\n\n  /**\n   * Remove all state change listeners\n   */\n  removeAllStateChangeListeners(): void {\n    this.listeners.clear();\n  }\n\n  /**\n   * Account management methods\n   */\n  addAccount(account: Account): void {\n    const accounts: Account[] = [...this.state.accounts, account];\n\n    // Set as active if it's the first account\n    const activeAccountIndex = this.state.accounts.length === 0 ? 0 : this.state.activeAccountIndex;\n    const activeAccount: Account | null = activeAccountIndex === accounts.length - 1 ? account : this.state.activeAccount;\n\n    this.updateState({\n      accounts,\n      activeAccountIndex,\n      activeAccount\n    });\n  }\n\n  removeAccount(accountId: string): void {\n    const accountIndex = this.state.accounts.findIndex(account => account.id === accountId);\n    if (accountIndex === -1) {\n      throw new Error(`Account with id ${accountId} not found`);\n    }\n\n    const accounts: Account[] = this.state.accounts.filter((account: Account) => account.id !== accountId);\n    let activeAccountIndex = this.state.activeAccountIndex;\n    let activeAccount = this.state.activeAccount;\n\n    // Adjust active account index if necessary\n    if (accountIndex === this.state.activeAccountIndex) {\n      // Active account was removed\n      if (accounts.length === 0) {\n        activeAccountIndex = 0;\n        activeAccount = null;\n      } else {\n        activeAccountIndex = Math.min(activeAccountIndex, accounts.length - 1);\n        activeAccount = accounts[activeAccountIndex];\n      }\n    } else if (accountIndex < this.state.activeAccountIndex) {\n      // Account before active account was removed\n      activeAccountIndex = this.state.activeAccountIndex - 1;\n    }\n\n    this.updateState({\n      accounts,\n      activeAccountIndex,\n      activeAccount\n    });\n  }\n\n  switchAccount(accountIndex: number): void {\n    if (accountIndex < 0 || accountIndex >= this.state.accounts.length) {\n      throw new Error(`Invalid account index: ${accountIndex}`);\n    }\n\n    const activeAccount = this.state.accounts[accountIndex];\n    this.updateState({\n      activeAccountIndex: accountIndex,\n      activeAccount\n    });\n  }\n\n  /**\n   * Chain management methods\n   */\n  addChain(chain: SupportedChain): void {\n    const chains = {\n      ...this.state.chains,\n      [chain.id]: chain\n    };\n\n    const updates: Partial<WalletState> = { chains };\n\n    // Set as active chain if none exists for this type\n    if (chain.type === 'evm' && !this.state.activeChains.evm) {\n      updates.activeChains = {\n        ...this.state.activeChains,\n        evm: chain\n      };\n    } else if (chain.type === 'solana' && !this.state.activeChains.solana) {\n      updates.activeChains = {\n        ...this.state.activeChains,\n        solana: chain\n      };\n    }\n\n    this.updateState(updates);\n  }\n\n  removeChain(chainId: string): void {\n    const { [chainId]: removedChain, ...chains } = this.state.chains;\n\n    if (!removedChain) {\n      throw new Error(`Chain with id ${chainId} not found`);\n    }\n\n    const updates: Partial<WalletState> = { chains };\n\n    // Update active chain if the removed chain was active\n    if (this.state.activeChains.evm?.id === chainId) {\n      const alternativeChain = Object.values(chains).find((chain: SupportedChain) => chain.type === 'evm');\n      updates.activeChains = {\n        ...this.state.activeChains,\n        evm: alternativeChain\n      };\n    }\n\n    if (this.state.activeChains.solana?.id === chainId) {\n      const alternativeChain = Object.values(chains).find((chain: SupportedChain) => chain.type === 'solana');\n      updates.activeChains = {\n        ...this.state.activeChains,\n        solana: alternativeChain\n      };\n    }\n\n    this.updateState(updates);\n  }\n\n  switchChain(chainId: string): void {\n    const chain = this.state.chains[chainId];\n    if (!chain) {\n      throw new Error(`Chain with id ${chainId} not found`);\n    }\n\n    const activeChains = {\n      ...this.state.activeChains,\n      [chain.type]: chain\n    };\n\n    this.updateState({ activeChains });\n  }\n\n  /**\n   * Connection state management\n   */\n  setConnected(isConnected: boolean): void {\n    this.updateState({ isConnected });\n  }\n\n  setLocked(isLocked: boolean): void {\n    this.updateState({ isLocked });\n  }\n\n  setInitialized(isInitialized: boolean): void {\n    this.updateState({ isInitialized });\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    // Cancel pending saves\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    // Clear listeners\n    this.removeAllStateChangeListeners();\n\n    // Clear persisted state if enabled\n    if (this.config.enablePersistence) {\n      this.clearPersistedState();\n    }\n  }\n\n  /**\n   * Create initial state\n   */\n  private createInitialState(): WalletState {\n    const defaultState: WalletState = {\n      accounts: [],\n      activeAccountIndex: 0,\n      activeAccount: null,\n      chains: {},\n      activeChains: {},\n      isConnected: false,\n      isLocked: false,\n      isInitialized: false\n    };\n\n    return {\n      ...defaultState,\n      ...this.config.initialState\n    };\n  }\n\n  /**\n   * Default state validator\n   */\n  private defaultStateValidator(state: WalletState): boolean {\n    try {\n      // Check required properties exist\n      if (typeof state.accounts === 'undefined' ||\n          typeof state.activeAccountIndex !== 'number' ||\n          typeof state.chains === 'undefined' ||\n          typeof state.activeChains === 'undefined' ||\n          typeof state.isConnected !== 'boolean' ||\n          typeof state.isLocked !== 'boolean' ||\n          typeof state.isInitialized !== 'boolean') {\n        return false;\n      }\n\n      // Check arrays are valid\n      if (!Array.isArray(state.accounts)) {\n        return false;\n      }\n\n      // Check active account index is valid\n      if (state.activeAccountIndex < 0 ||\n          (state.accounts.length > 0 && state.activeAccountIndex >= state.accounts.length)) {\n        return false;\n      }\n\n      // Check active account consistency\n      if (state.accounts.length === 0 && state.activeAccount !== null) {\n        return false;\n      }\n\n      if (state.accounts.length > 0) {\n        const expectedActiveAccount = state.accounts[state.activeAccountIndex];\n        if (state.activeAccount?.id !== expectedActiveAccount?.id) {\n          return false;\n        }\n      }\n\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Notify all state change listeners\n   */\n  private notifyListeners(state: WalletState): void {\n    for (const listener of this.listeners) {\n      try {\n        listener(state);\n      } catch (error) {\n        console.error('Error in state change listener:', error);\n      }\n    }\n  }\n\n  /**\n   * Load persisted state from storage\n   */\n  private loadPersistedState(): void {\n    try {\n      if (typeof window !== 'undefined' && window.localStorage) {\n        const persistedState = localStorage.getItem(this.config.storageKey);\n        if (persistedState) {\n          const parsedState = JSON.parse(persistedState);\n          if (this.config.stateValidator(parsedState)) {\n            this.state = parsedState;\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to load persisted state:', error);\n    }\n  }\n\n  /**\n   * Schedule state persistence\n   */\n  private schedulePersistence(): void {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    this.saveTimeout = setTimeout(() => {\n      this.persistState();\n    }, this.config.autoSaveDelay);\n  }\n\n  /**\n   * Persist current state to storage\n   */\n  private persistState(): void {\n    try {\n      if (typeof window !== 'undefined' && window.localStorage) {\n        localStorage.setItem(this.config.storageKey, JSON.stringify(this.state));\n      }\n    } catch (error) {\n      console.warn('Failed to persist state:', error);\n    }\n  }\n\n  /**\n   * Clear persisted state from storage\n   */\n  private clearPersistedState(): void {\n    try {\n      if (typeof window !== 'undefined' && window.localStorage) {\n        localStorage.removeItem(this.config.storageKey);\n      }\n    } catch (error) {\n      console.warn('Failed to clear persisted state:', error);\n    }\n  }\n}","import type {\n  Account,\n  AccountConfig,\n  EVMAccount,\n  SolanaAccount,\n  DualChainAccount,\n  EventEmitter,\n  WalletEvents\n} from '@arenaentertainment/wallet-mock-shared';\nimport { AccountType } from '@arenaentertainment/wallet-mock-shared';\nimport { generateRandomHex, generateRandomBytes } from '@arenaentertainment/wallet-mock-shared';\n\n/**\n * Account manager configuration\n */\nexport interface AccountManagerConfig {\n  /** Maximum number of accounts allowed */\n  maxAccounts?: number;\n  /** Enable automatic key generation */\n  enableKeyGeneration?: boolean;\n  /** Default account name prefix */\n  defaultNamePrefix?: string;\n  /** Custom account ID generator */\n  accountIdGenerator?: () => string;\n}\n\n/**\n * Account creation result\n */\nexport interface AccountCreationResult {\n  /** Created account */\n  account: Account;\n  /** Generated private keys (if any) */\n  generatedKeys?: {\n    evm?: string;\n    solana?: Uint8Array;\n  };\n}\n\n/**\n * Account manager for handling multi-chain account operations\n */\nexport class AccountManager {\n  private accounts: Map<string, Account> = new Map();\n  private config: Required<AccountManagerConfig>;\n  private eventEmitter?: EventEmitter<WalletEvents>;\n\n  constructor(config: AccountManagerConfig = {}, eventEmitter?: EventEmitter<WalletEvents>) {\n    this.config = {\n      maxAccounts: config.maxAccounts ?? 10,\n      enableKeyGeneration: config.enableKeyGeneration ?? true,\n      defaultNamePrefix: config.defaultNamePrefix || 'Account',\n      accountIdGenerator: config.accountIdGenerator || this.defaultAccountIdGenerator\n    };\n    this.eventEmitter = eventEmitter;\n  }\n\n  /**\n   * Create a new account\n   */\n  async createAccount(accountConfig: AccountConfig): Promise<AccountCreationResult> {\n    // Check account limit\n    if (this.accounts.size >= this.config.maxAccounts) {\n      throw new Error(`Maximum number of accounts reached: ${this.config.maxAccounts}`);\n    }\n\n    // Validate account configuration\n    this.validateAccountConfig(accountConfig);\n\n    // Generate account ID\n    const accountId = this.config.accountIdGenerator();\n\n    // Ensure unique account ID\n    if (this.accounts.has(accountId)) {\n      throw new Error(`Account ID already exists: ${accountId}`);\n    }\n\n    // Generate account name if not provided\n    const accountName = accountConfig.name || `${this.config.defaultNamePrefix} ${this.accounts.size + 1}`;\n\n    const generatedKeys: { evm?: string; solana?: Uint8Array } = {};\n    let account: Account;\n\n    switch (accountConfig.type) {\n      case AccountType.EVM_ONLY:\n        account = await this.createEVMAccount(accountId, accountName, accountConfig, generatedKeys);\n        break;\n      case AccountType.SOLANA_ONLY:\n        account = await this.createSolanaAccount(accountId, accountName, accountConfig, generatedKeys);\n        break;\n      case AccountType.DUAL_CHAIN:\n        account = await this.createDualChainAccount(accountId, accountName, accountConfig, generatedKeys);\n        break;\n      default:\n        throw new Error(`Unsupported account type: ${accountConfig.type}`);\n    }\n\n    // Store account\n    this.accounts.set(accountId, account);\n\n    // Emit account added event\n    this.eventEmitter?.emit('accountAdded', account);\n\n    return {\n      account,\n      generatedKeys: Object.keys(generatedKeys).length > 0 ? generatedKeys : undefined\n    };\n  }\n\n  /**\n   * Remove an account\n   */\n  async removeAccount(accountId: string): Promise<void> {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      throw new Error(`Account not found: ${accountId}`);\n    }\n\n    // Remove account from storage\n    this.accounts.delete(accountId);\n\n    // Clear sensitive data\n    this.clearAccountData(account);\n\n    // Emit account removed event\n    this.eventEmitter?.emit('accountRemoved', accountId);\n  }\n\n  /**\n   * Get account by ID\n   */\n  getAccount(accountId: string): Account | null {\n    return this.accounts.get(accountId) || null;\n  }\n\n  /**\n   * Get all accounts\n   */\n  getAllAccounts(): Account[] {\n    return Array.from(this.accounts.values());\n  }\n\n  /**\n   * Get accounts by type\n   */\n  getAccountsByType(type: AccountType): Account[] {\n    return this.getAllAccounts().filter(account => account.type === type);\n  }\n\n  /**\n   * Get accounts supporting specific chain type\n   */\n  getAccountsByChainType(chainType: 'evm' | 'solana'): Account[] {\n    return this.getAllAccounts().filter(account => {\n      if (chainType === 'evm') {\n        return account.type === AccountType.EVM_ONLY || account.type === AccountType.DUAL_CHAIN;\n      } else {\n        return account.type === AccountType.SOLANA_ONLY || account.type === AccountType.DUAL_CHAIN;\n      }\n    });\n  }\n\n  /**\n   * Update account metadata\n   */\n  async updateAccount(accountId: string, updates: Partial<Pick<Account, 'name' | 'isActive'>>): Promise<Account> {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      throw new Error(`Account not found: ${accountId}`);\n    }\n\n    // Apply updates\n    const updatedAccount: Account = {\n      ...account,\n      ...updates\n    };\n\n    // Store updated account\n    this.accounts.set(accountId, updatedAccount);\n\n    // Emit account updated event\n    this.eventEmitter?.emit('accountUpdated', updatedAccount);\n\n    return updatedAccount;\n  }\n\n  /**\n   * Check if account exists\n   */\n  hasAccount(accountId: string): boolean {\n    return this.accounts.has(accountId);\n  }\n\n  /**\n   * Get account count\n   */\n  getAccountCount(): number {\n    return this.accounts.size;\n  }\n\n  /**\n   * Get EVM address for account\n   */\n  getEVMAddress(accountId: string): string | null {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      return null;\n    }\n\n    if (account.type === AccountType.EVM_ONLY || account.type === AccountType.DUAL_CHAIN) {\n      return account.evm.address;\n    }\n\n    return null;\n  }\n\n  /**\n   * Get Solana public key for account\n   */\n  getSolanaPublicKey(accountId: string): string | null {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      return null;\n    }\n\n    if (account.type === AccountType.SOLANA_ONLY || account.type === AccountType.DUAL_CHAIN) {\n      return account.solana.publicKey;\n    }\n\n    return null;\n  }\n\n  /**\n   * Clear all accounts and sensitive data\n   */\n  async clearAllAccounts(): Promise<void> {\n    for (const account of this.accounts.values()) {\n      this.clearAccountData(account);\n    }\n\n    this.accounts.clear();\n  }\n\n  /**\n   * Create EVM-only account\n   */\n  private async createEVMAccount(\n    accountId: string,\n    accountName: string,\n    config: AccountConfig,\n    generatedKeys: { evm?: string; solana?: Uint8Array }\n  ): Promise<EVMAccount> {\n    if (!config.evm) {\n      throw new Error('EVM configuration required for EVM account');\n    }\n\n    let privateKey: string = config.evm.privateKey || '';\n\n    // Generate private key if not provided\n    if (!privateKey) {\n      if (!this.config.enableKeyGeneration) {\n        throw new Error('Key generation is disabled and no private key provided');\n      }\n      privateKey = generateRandomHex(32);\n      generatedKeys.evm = privateKey;\n    }\n\n    // Derive address from private key (simplified - in real implementation would use proper crypto)\n    const address = this.deriveEVMAddress(privateKey);\n\n    return {\n      id: accountId,\n      name: accountName,\n      type: AccountType.EVM_ONLY,\n      isActive: false,\n      createdAt: Date.now(),\n      evm: {\n        privateKey,\n        address,\n        chainIds: config.evm.chainIds\n      }\n    };\n  }\n\n  /**\n   * Create Solana-only account\n   */\n  private async createSolanaAccount(\n    accountId: string,\n    accountName: string,\n    config: AccountConfig,\n    generatedKeys: { evm?: string; solana?: Uint8Array }\n  ): Promise<SolanaAccount> {\n    if (!config.solana) {\n      throw new Error('Solana configuration required for Solana account');\n    }\n\n    let secretKey: Uint8Array | undefined = config.solana.secretKey;\n\n    // Generate secret key if not provided\n    if (!secretKey) {\n      if (!this.config.enableKeyGeneration) {\n        throw new Error('Key generation is disabled and no secret key provided');\n      }\n      secretKey = generateRandomBytes(64);\n      generatedKeys.solana = secretKey;\n    }\n\n    // At this point secretKey is guaranteed to exist\n    const finalSecretKey: Uint8Array = secretKey!;\n\n    // Derive public key from secret key (simplified - in real implementation would use proper crypto)\n    const publicKey = this.deriveSolanaPublicKey(finalSecretKey);\n\n    return {\n      id: accountId,\n      name: accountName,\n      type: AccountType.SOLANA_ONLY,\n      isActive: false,\n      createdAt: Date.now(),\n      solana: {\n        secretKey: finalSecretKey,\n        publicKey,\n        clusters: config.solana.clusters\n      }\n    };\n  }\n\n  /**\n   * Create dual-chain account\n   */\n  private async createDualChainAccount(\n    accountId: string,\n    accountName: string,\n    config: AccountConfig,\n    generatedKeys: { evm?: string; solana?: Uint8Array }\n  ): Promise<DualChainAccount> {\n    if (!config.evm || !config.solana) {\n      throw new Error('Both EVM and Solana configurations required for dual-chain account');\n    }\n\n    let evmPrivateKey: string = config.evm.privateKey || '';\n    let solanaSecretKey: Uint8Array | undefined = config.solana.secretKey;\n\n    // Generate keys if not provided\n    if (!evmPrivateKey) {\n      if (!this.config.enableKeyGeneration) {\n        throw new Error('Key generation is disabled and no EVM private key provided');\n      }\n      evmPrivateKey = generateRandomHex(32);\n      generatedKeys.evm = evmPrivateKey;\n    }\n\n    if (!solanaSecretKey) {\n      if (!this.config.enableKeyGeneration) {\n        throw new Error('Key generation is disabled and no Solana secret key provided');\n      }\n      solanaSecretKey = generateRandomBytes(64);\n      generatedKeys.solana = solanaSecretKey;\n    }\n\n    // At this point both keys are guaranteed to exist\n    const finalSolanaSecretKey: Uint8Array = solanaSecretKey!;\n\n    // Derive addresses\n    const evmAddress = this.deriveEVMAddress(evmPrivateKey);\n    const solanaPublicKey = this.deriveSolanaPublicKey(finalSolanaSecretKey);\n\n    return {\n      id: accountId,\n      name: accountName,\n      type: AccountType.DUAL_CHAIN,\n      isActive: false,\n      createdAt: Date.now(),\n      evm: {\n        privateKey: evmPrivateKey,\n        address: evmAddress,\n        chainIds: config.evm.chainIds\n      },\n      solana: {\n        secretKey: finalSolanaSecretKey,\n        publicKey: solanaPublicKey,\n        clusters: config.solana.clusters\n      }\n    };\n  }\n\n  /**\n   * Validate account configuration\n   */\n  private validateAccountConfig(config: AccountConfig): void {\n    if (!Object.values(AccountType).includes(config.type)) {\n      throw new Error(`Invalid account type: ${config.type}`);\n    }\n\n    switch (config.type) {\n      case AccountType.EVM_ONLY:\n        if (!config.evm) {\n          throw new Error('EVM configuration required for EVM account');\n        }\n        if (!config.evm.chainIds || config.evm.chainIds.length === 0) {\n          throw new Error('At least one chain ID required for EVM account');\n        }\n        break;\n\n      case AccountType.SOLANA_ONLY:\n        if (!config.solana) {\n          throw new Error('Solana configuration required for Solana account');\n        }\n        if (!config.solana.clusters || config.solana.clusters.length === 0) {\n          throw new Error('At least one cluster required for Solana account');\n        }\n        break;\n\n      case AccountType.DUAL_CHAIN:\n        if (!config.evm || !config.solana) {\n          throw new Error('Both EVM and Solana configurations required for dual-chain account');\n        }\n        if (!config.evm.chainIds || config.evm.chainIds.length === 0) {\n          throw new Error('At least one chain ID required for dual-chain account');\n        }\n        if (!config.solana.clusters || config.solana.clusters.length === 0) {\n          throw new Error('At least one cluster required for dual-chain account');\n        }\n        break;\n    }\n  }\n\n  /**\n   * Clear sensitive account data\n   */\n  private clearAccountData(account: Account): void {\n    try {\n      if (account.type === AccountType.EVM_ONLY || account.type === AccountType.DUAL_CHAIN) {\n        // Clear EVM private key\n        if (account.evm.privateKey) {\n          (account.evm as any).privateKey = '0'.repeat(account.evm.privateKey.length);\n        }\n      }\n\n      if (account.type === AccountType.SOLANA_ONLY || account.type === AccountType.DUAL_CHAIN) {\n        // Clear Solana secret key\n        if (account.solana.secretKey) {\n          account.solana.secretKey.fill(0);\n        }\n      }\n    } catch (error) {\n      console.warn('Error clearing account data:', error);\n    }\n  }\n\n  /**\n   * Generate default account ID\n   */\n  private defaultAccountIdGenerator(): string {\n    return `account-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Derive EVM address from private key (simplified implementation)\n   */\n  private deriveEVMAddress(privateKey: string): string {\n    // In a real implementation, this would use proper cryptographic functions\n    // This is a simplified mock implementation\n    const hash = this.simpleHash(privateKey);\n    return `0x${hash.slice(0, 40)}`;\n  }\n\n  /**\n   * Derive Solana public key from secret key (simplified implementation)\n   */\n  private deriveSolanaPublicKey(secretKey: Uint8Array): string {\n    // In a real implementation, this would use proper ed25519 key derivation\n    // This is a simplified mock implementation\n    const hash = this.simpleHash(Array.from(secretKey).map(b => b.toString(16).padStart(2, '0')).join(''));\n    return hash.slice(0, 44);\n  }\n\n  /**\n   * Simple hash function for mock key derivation\n   */\n  private simpleHash(input: string): string {\n    let hash = 0;\n    for (let i = 0; i < input.length; i++) {\n      const char = input.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash).toString(16).padStart(64, '0');\n  }\n}","import type {\n  MockWallet,\n  WalletState,\n  WalletConfig,\n  WalletEvents,\n  Account,\n  AccountConfig,\n  SupportedChain,\n  EventEmitter\n} from '@arenaentertainment/wallet-mock-shared';\nimport {\n  MockEthereumProvider,\n  type EthereumProvider\n} from '@arenaentertainment/wallet-mock-standards';\nimport {\n  MockSolanaWallet,\n  type SolanaWallet\n} from '@arenaentertainment/wallet-mock-standards';\n\nimport { ProductionGuard, type ProductionGuardConfig } from '../security/production-guard.js';\nimport { StateManager, type StateManagerConfig } from '../state/state-manager.js';\nimport { AccountManager, type AccountManagerConfig } from '../accounts/account-manager.js';\n\n/**\n * Event emitter implementation for the wallet\n */\nclass WalletEventEmitter implements EventEmitter<WalletEvents> {\n  private listeners: Map<keyof WalletEvents, Set<Function>> = new Map();\n\n  on<K extends keyof WalletEvents>(event: K, listener: WalletEvents[K]): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    this.listeners.get(event)!.add(listener);\n  }\n\n  off<K extends keyof WalletEvents>(event: K, listener: WalletEvents[K]): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.delete(listener);\n      if (eventListeners.size === 0) {\n        this.listeners.delete(event);\n      }\n    }\n  }\n\n  once<K extends keyof WalletEvents>(event: K, listener: WalletEvents[K]): void {\n    const onceWrapper = (...args: Parameters<WalletEvents[K]>) => {\n      this.off(event, onceWrapper as WalletEvents[K]);\n      (listener as any)(...args);\n    };\n    this.on(event, onceWrapper as WalletEvents[K]);\n  }\n\n  emit<K extends keyof WalletEvents>(event: K, ...args: Parameters<WalletEvents[K]>): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      for (const listener of eventListeners) {\n        try {\n          (listener as any)(...args);\n        } catch (error) {\n          console.error(`Error in event listener for ${String(event)}:`, error);\n          this.emit('error', error instanceof Error ? error : new Error(String(error)));\n        }\n      }\n    }\n  }\n\n  removeAllListeners<K extends keyof WalletEvents>(event?: K): void {\n    if (event) {\n      this.listeners.delete(event);\n    } else {\n      this.listeners.clear();\n    }\n  }\n}\n\n/**\n * Unified multi-chain wallet implementation\n */\nexport class UnifiedWallet implements MockWallet {\n  private eventEmitter: WalletEventEmitter;\n  private productionGuard: ProductionGuard;\n  private stateManager: StateManager;\n  private accountManager: AccountManager;\n  private ethereumProvider?: MockEthereumProvider;\n  private solanaWallet?: MockSolanaWallet;\n  private config: WalletConfig;\n  private isDestroyed = false;\n\n  constructor(config: WalletConfig = {}) {\n    this.config = config;\n    this.eventEmitter = new WalletEventEmitter();\n\n    // Initialize production guard\n    this.productionGuard = new ProductionGuard({\n      enableProductionChecks: config.security?.enableProductionChecks ?? true,\n      allowProductionOverride: false, // Never allow production override for security\n      overrideEnvVar: 'WALLET_MOCK_ALLOW_PRODUCTION'\n    });\n\n    // Validate environment before proceeding\n    this.productionGuard.validateEnvironment();\n\n    // Initialize state manager\n    this.stateManager = new StateManager({\n      enablePersistence: false, // Disable persistence for security\n      stateValidator: this.validateWalletState.bind(this)\n    });\n\n    // Initialize account manager\n    this.accountManager = new AccountManager({\n      maxAccounts: 10,\n      enableKeyGeneration: true,\n      defaultNamePrefix: 'Account'\n    }, this.eventEmitter);\n\n    // Set up state change listeners\n    this.stateManager.addStateChangeListener(this.handleStateChange.bind(this));\n\n    // Set up cleanup on page unload\n    if (config.security?.autoCleanup !== false && typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', this.handlePageUnload.bind(this));\n      window.addEventListener('unload', this.handlePageUnload.bind(this));\n    }\n\n    // Initialize with default configuration\n    this.initialize();\n  }\n\n  // Event emitter implementation\n  on<K extends keyof WalletEvents>(event: K, listener: WalletEvents[K]): void {\n    this.eventEmitter.on(event, listener);\n  }\n\n  off<K extends keyof WalletEvents>(event: K, listener: WalletEvents[K]): void {\n    this.eventEmitter.off(event, listener);\n  }\n\n  once<K extends keyof WalletEvents>(event: K, listener: WalletEvents[K]): void {\n    this.eventEmitter.once(event, listener);\n  }\n\n  emit<K extends keyof WalletEvents>(event: K, ...args: Parameters<WalletEvents[K]>): void {\n    this.eventEmitter.emit(event, ...args);\n  }\n\n  removeAllListeners<K extends keyof WalletEvents>(event?: K): void {\n    this.eventEmitter.removeAllListeners(event);\n  }\n\n  // State management\n  getState(): WalletState {\n    this.ensureNotDestroyed();\n    return this.stateManager.getState();\n  }\n\n  isConnected(): boolean {\n    this.ensureNotDestroyed();\n    return this.stateManager.getState().isConnected;\n  }\n\n  isLocked(): boolean {\n    this.ensureNotDestroyed();\n    return this.stateManager.getState().isLocked;\n  }\n\n  // Account management\n  async addAccount(config: AccountConfig): Promise<string> {\n    this.ensureNotDestroyed();\n\n    try {\n      const result = await this.accountManager.createAccount(config);\n      this.stateManager.addAccount(result.account);\n\n      // Update provider accounts if necessary\n      await this.updateProviderAccounts();\n\n      return result.account.id;\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  async removeAccount(accountId: string): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      await this.accountManager.removeAccount(accountId);\n      this.stateManager.removeAccount(accountId);\n\n      // Update provider accounts if necessary\n      await this.updateProviderAccounts();\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  async switchAccount(accountIndex: number): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      this.stateManager.switchAccount(accountIndex);\n\n      // Update provider accounts if necessary\n      await this.updateProviderAccounts();\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  getAccounts(): Account[] {\n    this.ensureNotDestroyed();\n    return this.stateManager.getState().accounts;\n  }\n\n  getActiveAccount(): Account | null {\n    this.ensureNotDestroyed();\n    return this.stateManager.getState().activeAccount;\n  }\n\n  // Chain management\n  async addChain(chain: SupportedChain): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      this.stateManager.addChain(chain);\n\n      // Initialize or update providers if necessary\n      if (chain.type === 'evm') {\n        await this.initializeEthereumProvider();\n      } else if (chain.type === 'solana') {\n        await this.initializeSolanaWallet();\n      }\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  async switchChain(chainId: string): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      this.stateManager.switchChain(chainId);\n\n      // Notify providers of chain change\n      const chain = this.stateManager.getState().chains[chainId];\n      if (chain) {\n        this.eventEmitter.emit('chainChanged', chain);\n\n        if (chain.type === 'evm' && this.ethereumProvider) {\n          // Update Ethereum provider chain\n          await this.updateEthereumProviderChain(chain);\n        }\n      }\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  getChains(): Record<string, SupportedChain> {\n    this.ensureNotDestroyed();\n    return this.stateManager.getState().chains;\n  }\n\n  getActiveChain(type: 'evm' | 'solana'): SupportedChain | null {\n    this.ensureNotDestroyed();\n    const state = this.stateManager.getState();\n    return state.activeChains[type] || null;\n  }\n\n  // Connection management\n  async connect(): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      // Ensure we have at least one account\n      if (this.getAccounts().length === 0) {\n        throw new Error('No accounts available. Add an account before connecting.');\n      }\n\n      // Initialize providers\n      await this.initializeProviders();\n\n      // Update connection state\n      this.stateManager.setConnected(true);\n      this.eventEmitter.emit('connect');\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      // Disconnect providers\n      if (this.ethereumProvider) {\n        // Ethereum provider doesn't have explicit disconnect in EIP-1193\n        this.ethereumProvider = undefined;\n      }\n\n      if (this.solanaWallet) {\n        try {\n          // Use the disconnect feature if available\n          const disconnectFeature = this.solanaWallet.features['standard:disconnect'];\n          if (disconnectFeature && 'disconnect' in disconnectFeature) {\n            await (disconnectFeature as any).disconnect();\n          }\n        } catch {\n          // Ignore disconnect errors\n        }\n        this.solanaWallet = undefined;\n      }\n\n      // Update connection state\n      this.stateManager.setConnected(false);\n      this.eventEmitter.emit('disconnect');\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  async lock(): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      // Disconnect first\n      await this.disconnect();\n\n      // Update lock state\n      this.stateManager.setLocked(true);\n      this.eventEmitter.emit('lock');\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  async unlock(): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      // Update lock state\n      this.stateManager.setLocked(false);\n      this.eventEmitter.emit('unlock');\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  // Cleanup\n  async destroy(): Promise<void> {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    try {\n      // Disconnect from all chains\n      await this.disconnect();\n\n      // Clear all accounts\n      await this.accountManager.clearAllAccounts();\n\n      // Clean up state manager\n      this.stateManager.destroy();\n\n      // Remove all event listeners\n      this.eventEmitter.removeAllListeners();\n\n      // Remove page unload listeners\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('beforeunload', this.handlePageUnload.bind(this));\n        window.removeEventListener('unload', this.handlePageUnload.bind(this));\n      }\n\n      this.isDestroyed = true;\n    } catch (error) {\n      console.error('Error during wallet destruction:', error);\n    }\n  }\n\n  // Provider access methods\n  getEthereumProvider(): EthereumProvider | null {\n    this.ensureNotDestroyed();\n    return this.ethereumProvider || null;\n  }\n\n  getSolanaWallet(): SolanaWallet | null {\n    this.ensureNotDestroyed();\n    return this.solanaWallet || null;\n  }\n\n  // Private methods\n\n  private initialize(): void {\n    try {\n      // Initialize default chains if provided\n      if (this.config.accounts) {\n        // Process initial accounts asynchronously\n        Promise.all(\n          this.config.accounts.map((accountConfig: AccountConfig) => this.addAccount(accountConfig))\n        ).catch((error: Error) => {\n          this.eventEmitter.emit('error', error);\n        });\n      }\n\n      // Set default active account index\n      if (typeof this.config.defaultAccountIndex === 'number') {\n        this.stateManager.updateStateProperty('activeAccountIndex', this.config.defaultAccountIndex);\n      }\n\n      // Mark as initialized\n      this.stateManager.setInitialized(true);\n\n      // Auto-connect if enabled\n      if (this.config.autoConnect) {\n        this.connect().catch(error => {\n          this.eventEmitter.emit('error', error);\n        });\n      }\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n    }\n  }\n\n  private async initializeProviders(): Promise<void> {\n    const state = this.stateManager.getState();\n\n    // Initialize Ethereum provider if we have EVM chains\n    if (state.activeChains.evm) {\n      await this.initializeEthereumProvider();\n    }\n\n    // Initialize Solana wallet if we have Solana chains\n    if (state.activeChains.solana) {\n      await this.initializeSolanaWallet();\n    }\n  }\n\n  private async initializeEthereumProvider(): Promise<void> {\n    if (!this.ethereumProvider) {\n      const evmAccounts = this.accountManager.getAccountsByChainType('evm');\n      const activeChain = this.getActiveChain('evm');\n\n      if (evmAccounts.length > 0 && activeChain && activeChain.type === 'evm') {\n        this.ethereumProvider = new MockEthereumProvider(activeChain.chainIdHex);\n\n        // Set accounts after initialization\n        const addresses = evmAccounts.map(account =>\n          account.type === 'evm_only' || account.type === 'dual_chain'\n            ? account.evm.address\n            : ''\n        ).filter(Boolean);\n\n        // MockEthereumProvider should have a method to set accounts\n        // For now, we'll access the private property (not ideal but works)\n        (this.ethereumProvider as any)._accounts = addresses;\n      }\n    }\n  }\n\n  private async initializeSolanaWallet(): Promise<void> {\n    if (!this.solanaWallet) {\n      const solanaAccounts = this.accountManager.getAccountsByChainType('solana');\n      const activeChain = this.getActiveChain('solana');\n\n      if (solanaAccounts.length > 0 && activeChain && activeChain.type === 'solana') {\n        this.solanaWallet = new MockSolanaWallet({\n          name: 'Mock Wallet',\n          chains: [activeChain.cluster] as any[]\n        });\n\n        // Add accounts after initialization\n        for (const account of solanaAccounts) {\n          if (account.type === 'solana_only' || account.type === 'dual_chain') {\n            const walletAccount = {\n              publicKey: account.solana.publicKey,\n              label: account.name || 'Account',\n              chains: [activeChain.cluster],\n              features: ['solana:signTransaction', 'solana:signMessage']\n            };\n            this.solanaWallet.addAccount(walletAccount as any);\n          }\n        }\n      }\n    }\n  }\n\n  private async updateProviderAccounts(): Promise<void> {\n    // Update Ethereum provider accounts\n    if (this.ethereumProvider) {\n      const evmAccounts = this.accountManager.getAccountsByChainType('evm');\n      const addresses = evmAccounts.map(account =>\n        account.type === 'evm_only' || account.type === 'dual_chain'\n          ? account.evm.address\n          : ''\n      ).filter(Boolean);\n\n      // Update provider with new accounts (would need provider method)\n      // this.ethereumProvider.updateAccounts(addresses);\n    }\n\n    // Update Solana wallet accounts\n    if (this.solanaWallet) {\n      // Similar update for Solana wallet\n    }\n  }\n\n  private async updateEthereumProviderChain(chain: SupportedChain): Promise<void> {\n    if (this.ethereumProvider && chain.type === 'evm') {\n      // Update provider chain (would need provider method)\n      // this.ethereumProvider.updateChain(chain.chainId);\n    }\n  }\n\n  private handleStateChange(state: WalletState): void {\n    this.eventEmitter.emit('stateChanged', state);\n  }\n\n  private handlePageUnload(): void {\n    // Perform immediate cleanup\n    this.destroy().catch(console.error);\n  }\n\n  private validateWalletState(state: WalletState): boolean {\n    try {\n      // Basic validation - ensure required properties exist\n      return (\n        Array.isArray(state.accounts) &&\n        typeof state.activeAccountIndex === 'number' &&\n        typeof state.chains === 'object' &&\n        typeof state.activeChains === 'object' &&\n        typeof state.isConnected === 'boolean' &&\n        typeof state.isLocked === 'boolean' &&\n        typeof state.isInitialized === 'boolean'\n      );\n    } catch {\n      return false;\n    }\n  }\n\n  private ensureNotDestroyed(): void {\n    if (this.isDestroyed) {\n      throw new Error('Wallet has been destroyed');\n    }\n  }\n}","import type {\n  MockWallet,\n  WalletFactory,\n  WalletConfig,\n  AccountConfig\n} from '@arenaentertainment/wallet-mock-shared';\nimport { AccountType } from '@arenaentertainment/wallet-mock-shared';\nimport { CHAIN_PRESETS } from '@arenaentertainment/wallet-mock-shared';\n\nimport { UnifiedWallet } from '../wallet/unified-wallet.js';\n\n/**\n * Preset wallet configurations for common use cases\n */\nexport interface WalletPreset {\n  name: string;\n  description: string;\n  config: WalletConfig;\n}\n\n/**\n * Builder pattern for wallet configuration\n */\nexport class WalletConfigBuilder {\n  private config: WalletConfig = {};\n\n  /**\n   * Set initial accounts\n   */\n  withAccounts(accounts: AccountConfig[]): WalletConfigBuilder {\n    this.config.accounts = accounts;\n    return this;\n  }\n\n  /**\n   * Add a single account\n   */\n  withAccount(account: AccountConfig): WalletConfigBuilder {\n    if (!this.config.accounts) {\n      this.config.accounts = [];\n    }\n    this.config.accounts.push(account);\n    return this;\n  }\n\n  /**\n   * Add EVM-only account\n   */\n  withEVMAccount(name?: string, chainIds: string[] = ['1', '137']): WalletConfigBuilder {\n    return this.withAccount({\n      type: AccountType.EVM_ONLY,\n      name,\n      evm: { chainIds }\n    });\n  }\n\n  /**\n   * Add Solana-only account\n   */\n  withSolanaAccount(name?: string, clusters: string[] = ['mainnet-beta', 'devnet']): WalletConfigBuilder {\n    return this.withAccount({\n      type: AccountType.SOLANA_ONLY,\n      name,\n      solana: { clusters }\n    });\n  }\n\n  /**\n   * Add dual-chain account\n   */\n  withDualChainAccount(\n    name?: string,\n    chainIds: string[] = ['1', '137'],\n    clusters: string[] = ['mainnet-beta', 'devnet']\n  ): WalletConfigBuilder {\n    return this.withAccount({\n      type: AccountType.DUAL_CHAIN,\n      name,\n      evm: { chainIds },\n      solana: { clusters }\n    });\n  }\n\n  /**\n   * Set default active account index\n   */\n  withDefaultAccountIndex(index: number): WalletConfigBuilder {\n    this.config.defaultAccountIndex = index;\n    return this;\n  }\n\n  /**\n   * Enable auto-connect\n   */\n  withAutoConnect(autoConnect: boolean = true): WalletConfigBuilder {\n    this.config.autoConnect = autoConnect;\n    return this;\n  }\n\n  /**\n   * Configure security settings\n   */\n  withSecurity(security: WalletConfig['security']): WalletConfigBuilder {\n    this.config.security = { ...this.config.security, ...security };\n    return this;\n  }\n\n  /**\n   * Enable production checks\n   */\n  withProductionChecks(enabled: boolean = true): WalletConfigBuilder {\n    if (!this.config.security) {\n      this.config.security = {};\n    }\n    this.config.security.enableProductionChecks = enabled;\n    return this;\n  }\n\n  /**\n   * Configure debug settings\n   */\n  withDebug(debug: WalletConfig['debug']): WalletConfigBuilder {\n    this.config.debug = { ...this.config.debug, ...debug };\n    return this;\n  }\n\n  /**\n   * Enable debug logging\n   */\n  withDebugLogging(enabled: boolean = true, logLevel: 'debug' | 'info' | 'warn' | 'error' = 'debug'): WalletConfigBuilder {\n    if (!this.config.debug) {\n      this.config.debug = {};\n    }\n    this.config.debug.enableLogging = enabled;\n    this.config.debug.logLevel = logLevel;\n    return this;\n  }\n\n  /**\n   * Build the wallet configuration\n   */\n  build(): WalletConfig {\n    return { ...this.config };\n  }\n}\n\n/**\n * Wallet factory implementation for easy instantiation\n */\nexport class MockWalletFactory implements WalletFactory {\n  /**\n   * Create a wallet with the given configuration\n   */\n  async create(config: WalletConfig): Promise<MockWallet> {\n    try {\n      const wallet = new UnifiedWallet(config);\n      return wallet;\n    } catch (error) {\n      throw new Error(`Failed to create wallet: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Create a wallet from configuration (alias for create)\n   */\n  async createFromConfig(config: WalletConfig): Promise<MockWallet> {\n    return this.create(config);\n  }\n\n  /**\n   * Create a wallet using a builder pattern\n   */\n  async createWithBuilder(builderFn: (builder: WalletConfigBuilder) => WalletConfigBuilder): Promise<MockWallet> {\n    const builder = new WalletConfigBuilder();\n    const config = builderFn(builder).build();\n    return this.create(config);\n  }\n\n  /**\n   * Create a wallet from a preset configuration\n   */\n  async createFromPreset(presetName: keyof typeof WALLET_PRESETS): Promise<MockWallet> {\n    const preset = WALLET_PRESETS[presetName];\n    if (!preset) {\n      throw new Error(`Unknown wallet preset: ${presetName}`);\n    }\n    return this.create(preset.config);\n  }\n\n  /**\n   * Create a minimal EVM-only wallet\n   */\n  async createEVMWallet(config: {\n    chainIds?: string[];\n    accountName?: string;\n    autoConnect?: boolean;\n  } = {}): Promise<MockWallet> {\n    const walletConfig: WalletConfig = {\n      accounts: [{\n        type: AccountType.EVM_ONLY,\n        name: config.accountName,\n        evm: {\n          chainIds: config.chainIds || ['1', '137'] // Ethereum and Polygon by default\n        }\n      }],\n      autoConnect: config.autoConnect ?? false,\n      security: {\n        enableProductionChecks: true\n      }\n    };\n\n    return this.create(walletConfig);\n  }\n\n  /**\n   * Create a minimal Solana-only wallet\n   */\n  async createSolanaWallet(config: {\n    clusters?: string[];\n    accountName?: string;\n    autoConnect?: boolean;\n  } = {}): Promise<MockWallet> {\n    const walletConfig: WalletConfig = {\n      accounts: [{\n        type: AccountType.SOLANA_ONLY,\n        name: config.accountName,\n        solana: {\n          clusters: config.clusters || ['mainnet-beta', 'devnet']\n        }\n      }],\n      autoConnect: config.autoConnect ?? false,\n      security: {\n        enableProductionChecks: true\n      }\n    };\n\n    return this.create(walletConfig);\n  }\n\n  /**\n   * Create a multi-chain wallet supporting both EVM and Solana\n   */\n  async createMultiChainWallet(config: {\n    evmChainIds?: string[];\n    solanaClusters?: string[];\n    accountName?: string;\n    autoConnect?: boolean;\n  } = {}): Promise<MockWallet> {\n    const walletConfig: WalletConfig = {\n      accounts: [{\n        type: AccountType.DUAL_CHAIN,\n        name: config.accountName,\n        evm: {\n          chainIds: config.evmChainIds || ['1', '137']\n        },\n        solana: {\n          clusters: config.solanaClusters || ['mainnet-beta', 'devnet']\n        }\n      }],\n      autoConnect: config.autoConnect ?? false,\n      security: {\n        enableProductionChecks: true\n      }\n    };\n\n    return this.create(walletConfig);\n  }\n\n  /**\n   * Create a development wallet with relaxed security\n   */\n  async createDevWallet(config: {\n    accounts?: AccountConfig[];\n    autoConnect?: boolean;\n    enableLogging?: boolean;\n  } = {}): Promise<MockWallet> {\n    const walletConfig: WalletConfig = {\n      accounts: config.accounts || [\n        {\n          type: AccountType.DUAL_CHAIN,\n          name: 'Development Account',\n          evm: { chainIds: ['31337', '1337'] }, // Local development chains\n          solana: { clusters: ['devnet', 'localnet'] }\n        }\n      ],\n      autoConnect: config.autoConnect ?? true,\n      security: {\n        enableProductionChecks: true, // Keep production checks even in dev\n        enableSecureMemory: false,\n        autoCleanup: true\n      },\n      debug: {\n        enableLogging: config.enableLogging ?? true,\n        logLevel: 'debug'\n      }\n    };\n\n    return this.create(walletConfig);\n  }\n\n  /**\n   * Get configuration builder\n   */\n  configBuilder(): WalletConfigBuilder {\n    return new WalletConfigBuilder();\n  }\n\n  /**\n   * Get available presets\n   */\n  getPresets(): Record<string, WalletPreset> {\n    return WALLET_PRESETS;\n  }\n}\n\n/**\n * Predefined wallet configurations\n */\nexport const WALLET_PRESETS: Record<string, WalletPreset> = {\n  minimal: {\n    name: 'Minimal Wallet',\n    description: 'Basic wallet with single EVM account',\n    config: {\n      accounts: [{\n        type: AccountType.EVM_ONLY,\n        name: 'Main Account',\n        evm: { chainIds: ['1'] }\n      }],\n      autoConnect: false\n    }\n  },\n\n  development: {\n    name: 'Development Wallet',\n    description: 'Full-featured wallet for development with debug logging',\n    config: {\n      accounts: [\n        {\n          type: AccountType.DUAL_CHAIN,\n          name: 'Development Account 1',\n          evm: { chainIds: ['31337', '1337', '1', '137'] },\n          solana: { clusters: ['devnet', 'localnet'] }\n        },\n        {\n          type: AccountType.EVM_ONLY,\n          name: 'EVM Test Account',\n          evm: { chainIds: ['31337', '1337'] }\n        }\n      ],\n      autoConnect: true,\n      security: {\n        enableProductionChecks: true,\n        autoCleanup: true\n      },\n      debug: {\n        enableLogging: true,\n        logLevel: 'debug'\n      }\n    }\n  },\n\n  multiChain: {\n    name: 'Multi-Chain Wallet',\n    description: 'Production-ready wallet supporting both EVM and Solana',\n    config: {\n      accounts: [{\n        type: AccountType.DUAL_CHAIN,\n        name: 'Multi-Chain Account',\n        evm: { chainIds: ['1', '137', '42161', '10'] }, // Ethereum, Polygon, Arbitrum, Optimism\n        solana: { clusters: ['mainnet-beta', 'devnet'] }\n      }],\n      autoConnect: false,\n      security: {\n        enableProductionChecks: true,\n        enableSecureMemory: true,\n        autoCleanup: true\n      }\n    }\n  },\n\n  testing: {\n    name: 'Testing Wallet',\n    description: 'Wallet configured for automated testing',\n    config: {\n      accounts: [\n        {\n          type: AccountType.EVM_ONLY,\n          name: 'Test Account EVM',\n          evm: { chainIds: ['31337'] }\n        },\n        {\n          type: AccountType.SOLANA_ONLY,\n          name: 'Test Account Solana',\n          solana: { clusters: ['devnet'] }\n        },\n        {\n          type: AccountType.DUAL_CHAIN,\n          name: 'Test Account Dual',\n          evm: { chainIds: ['31337'] },\n          solana: { clusters: ['devnet'] }\n        }\n      ],\n      autoConnect: false,\n      security: {\n        enableProductionChecks: false, // Disable for testing\n        autoCleanup: false\n      },\n      debug: {\n        enableLogging: false // Reduce noise in tests\n      }\n    }\n  }\n};\n\n/**\n * Default factory instance\n */\nexport const walletFactory = new MockWalletFactory();\n\n/**\n * Convenience functions for creating wallets\n */\nexport const createWallet = walletFactory.create.bind(walletFactory);\nexport const createEVMWallet = walletFactory.createEVMWallet.bind(walletFactory);\nexport const createSolanaWallet = walletFactory.createSolanaWallet.bind(walletFactory);\nexport const createMultiChainWallet = walletFactory.createMultiChainWallet.bind(walletFactory);\nexport const createDevWallet = walletFactory.createDevWallet.bind(walletFactory);\nexport const createWalletFromPreset = walletFactory.createFromPreset.bind(walletFactory);"],"names":[],"mappings":";;;;;;;AA4BO,MAAM,gBAAgB;AAAA,EAG3B,YAAY,QAA+B;AAFnC;AAGN,SAAK,SAAS;AAAA,MACZ,wBAAwB,OAAO;AAAA,MAC/B,0BAA0B,OAAO,4BAA4B,KAAK,0BAA0B,KAAK,IAAI;AAAA,MACrG,yBAAyB,OAAO,2BAA2B;AAAA,MAC3D,gBAAgB,OAAO,kBAAkB;AAAA,IAAA;AAAA,EAE7C;AAAA;AAAA;AAAA;AAAA,EAKA,mBAA0C;AACxC,UAAM,UAAoB,CAAA;AAC1B,QAAI,eAAe;AAGnB,QAAI,CAAC,KAAK,OAAO,wBAAwB;AACvC,aAAO;AAAA,QACL,cAAc;AAAA,QACd,SAAS,CAAC,4BAA4B;AAAA,QACtC,gBAAgB;AAAA,MAAA;AAAA,IAEpB;AAGA,UAAM,iBAAiB,KAAK,iBAAA;AAC5B,QAAI,kBAAkB,KAAK,OAAO,yBAAyB;AACzD,aAAO;AAAA,QACL,cAAc;AAAA,QACd,SAAS,CAAC,qDAAqD;AAAA,QAC/D,gBAAgB;AAAA,MAAA;AAAA,IAEpB;AAGA,QAAI;AACF,qBAAe,KAAK,OAAO,yBAAA;AAC3B,UAAI,cAAc;AAChB,gBAAQ,KAAK,gDAAgD;AAAA,MAC/D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,KAAK,wCAAwC,iBAAiB,QAAQ,MAAM,UAAU,eAAe,EAAE;AAAA,IACjH;AAGA,UAAM,gBAAgB,KAAK,iBAAA;AAC3B,QAAI,cAAc,cAAc;AAC9B,qBAAe;AACf,cAAQ,KAAK,GAAG,cAAc,OAAO;AAAA,IACvC;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ;AAAA;AAAA;AAAA;AAAA,EAKA,sBAA4B;AAC1B,UAAM,SAAS,KAAK,iBAAA;AAEpB,QAAI,OAAO,gBAAgB,CAAC,OAAO,gBAAgB;AACjD,YAAM,aAAa,OAAO,QAAQ,KAAK,IAAI;AAC3C,YAAM,IAAI;AAAA,QACR,iGACY,UAAU,mDAC2B,KAAK,OAAO,cAAc;AAAA,MAAA;AAAA,IAE/E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,4BAAqC;AAC3C,UAAM,SAAS,KAAK,iBAAA;AACpB,WAAO,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKQ,mBAAiE;;AACvE,UAAM,UAAoB,CAAA;AAC1B,QAAI,eAAe;AAGnB,QAAI,OAAO,YAAY,iBAAe,aAAQ,QAAR,mBAAa,cAAa,cAAc;AAC5E,qBAAe;AACf,cAAQ,KAAK,+BAA+B;AAAA,IAC9C;AAGA,QAAI,OAAO,YAAY,eAAe,QAAQ,KAAK;AACjD,YAAM,cAAc;AAAA,QAClB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAGF,iBAAW,UAAU,aAAa;AAChC,YAAI,QAAQ,IAAI,MAAM,GAAG;AACvB,yBAAe;AACf,kBAAQ,KAAK,iCAAiC,MAAM,EAAE;AAAA,QACxD;AAAA,MACF;AAAA,IACF;AAGA,QAAI,OAAO,WAAW,eAAe,OAAO,UAAU;AACpD,YAAM,WAAW,OAAO,SAAS;AACjC,YAAM,eAAe;AAAA,QACnB;AAAA,QACA;AAAA,MAAA;AAGF,iBAAW,WAAW,cAAc;AAClC,YAAI,QAAQ,KAAK,QAAQ,GAAG;AAC1B,yBAAe;AACf,kBAAQ,KAAK,iCAAiC,QAAQ,EAAE;AACxD;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,QAAI,OAAO,WAAW,iBAAe,YAAO,aAAP,mBAAiB,cAAa,UAAU;AAC3E,YAAM,WAAW,OAAO,SAAS;AACjC,UAAI,aAAa,eAAe,CAAC,SAAS,WAAW,UAAU,KAAK,CAAC,SAAS,WAAW,KAAK,GAAG;AAC/F,uBAAe;AACf,gBAAQ,KAAK,oCAAoC;AAAA,MACnD;AAAA,IACF;AAEA,WAAO,EAAE,cAAc,QAAA;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAKQ,mBAA4B;;AAClC,QAAI,CAAC,KAAK,OAAO,yBAAyB;AACxC,aAAO;AAAA,IACT;AAGA,QAAI,OAAO,YAAY,iBAAe,aAAQ,QAAR,mBAAc,KAAK,OAAO,qBAAoB,QAAQ;AAC1F,aAAO;AAAA,IACT;AAGA,QAAI,OAAO,WAAW,eAAe,OAAO,cAAc;AACxD,UAAI;AACF,eAAO,OAAO,aAAa,QAAQ,KAAK,OAAO,cAAc,MAAM;AAAA,MACrE,QAAQ;AAEN,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AAKO,SAAS,sBAAsB,SAAyC,IAAqB;AAClG,SAAO,IAAI,gBAAgB;AAAA,IACzB,wBAAwB,OAAO,0BAA0B;AAAA,IACzD,0BAA0B,OAAO;AAAA,IACjC,yBAAyB,OAAO,2BAA2B;AAAA,IAC3D,gBAAgB,OAAO;AAAA,EAAA,CACxB;AACH;ACpLO,MAAM,aAAa;AAAA,EAMxB,YAAY,SAA6B,IAAI;AALrC;AACA;AACA,yDAAyC,IAAA;AACzC;AAGN,SAAK,SAAS;AAAA,MACZ,cAAc,OAAO,gBAAgB,CAAA;AAAA,MACrC,mBAAmB,OAAO,qBAAqB;AAAA,MAC/C,YAAY,OAAO,cAAc;AAAA,MACjC,gBAAgB,OAAO,kBAAkB,KAAK;AAAA,MAC9C,eAAe,OAAO,iBAAiB;AAAA,IAAA;AAIzC,SAAK,QAAQ,KAAK,mBAAA;AAGlB,QAAI,KAAK,OAAO,mBAAmB;AACjC,WAAK,mBAAA;AAAA,IACP;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,WAAwB;AACtB,WAAO,EAAE,GAAG,KAAK,MAAA;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,SAAqC;AAC/C,UAAM,WAAW,EAAE,GAAG,KAAK,OAAO,GAAG,QAAA;AAGrC,QAAI,CAAC,KAAK,OAAO,eAAe,QAAQ,GAAG;AACzC,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACxC;AAEiB,SAAK;AACtB,SAAK,QAAQ;AAGb,SAAK,gBAAgB,KAAK,KAAK;AAG/B,QAAI,KAAK,OAAO,mBAAmB;AACjC,WAAK,oBAAA;AAAA,IACP;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,oBACE,KACA,OACM;AACN,SAAK,YAAY,EAAE,CAAC,GAAG,GAAG,OAA+B;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA,EAKA,aAAmB;AACjB,SAAK,QAAQ,KAAK,mBAAA;AAClB,SAAK,gBAAgB,KAAK,KAAK;AAE/B,QAAI,KAAK,OAAO,mBAAmB;AACjC,WAAK,oBAAA;AAAA,IACP;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuB,SAAmC;AACxD,SAAK,UAAU,IAAI,OAAO;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,0BAA0B,SAAmC;AAC3D,SAAK,UAAU,OAAO,OAAO;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,gCAAsC;AACpC,SAAK,UAAU,MAAA;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,SAAwB;AACjC,UAAM,WAAsB,CAAC,GAAG,KAAK,MAAM,UAAU,OAAO;AAG5D,UAAM,qBAAqB,KAAK,MAAM,SAAS,WAAW,IAAI,IAAI,KAAK,MAAM;AAC7E,UAAM,gBAAgC,uBAAuB,SAAS,SAAS,IAAI,UAAU,KAAK,MAAM;AAExG,SAAK,YAAY;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAAA,EAEA,cAAc,WAAyB;AACrC,UAAM,eAAe,KAAK,MAAM,SAAS,UAAU,CAAA,YAAW,QAAQ,OAAO,SAAS;AACtF,QAAI,iBAAiB,IAAI;AACvB,YAAM,IAAI,MAAM,mBAAmB,SAAS,YAAY;AAAA,IAC1D;AAEA,UAAM,WAAsB,KAAK,MAAM,SAAS,OAAO,CAAC,YAAqB,QAAQ,OAAO,SAAS;AACrG,QAAI,qBAAqB,KAAK,MAAM;AACpC,QAAI,gBAAgB,KAAK,MAAM;AAG/B,QAAI,iBAAiB,KAAK,MAAM,oBAAoB;AAElD,UAAI,SAAS,WAAW,GAAG;AACzB,6BAAqB;AACrB,wBAAgB;AAAA,MAClB,OAAO;AACL,6BAAqB,KAAK,IAAI,oBAAoB,SAAS,SAAS,CAAC;AACrE,wBAAgB,SAAS,kBAAkB;AAAA,MAC7C;AAAA,IACF,WAAW,eAAe,KAAK,MAAM,oBAAoB;AAEvD,2BAAqB,KAAK,MAAM,qBAAqB;AAAA,IACvD;AAEA,SAAK,YAAY;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAAA,EAEA,cAAc,cAA4B;AACxC,QAAI,eAAe,KAAK,gBAAgB,KAAK,MAAM,SAAS,QAAQ;AAClE,YAAM,IAAI,MAAM,0BAA0B,YAAY,EAAE;AAAA,IAC1D;AAEA,UAAM,gBAAgB,KAAK,MAAM,SAAS,YAAY;AACtD,SAAK,YAAY;AAAA,MACf,oBAAoB;AAAA,MACpB;AAAA,IAAA,CACD;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,OAA6B;AACpC,UAAM,SAAS;AAAA,MACb,GAAG,KAAK,MAAM;AAAA,MACd,CAAC,MAAM,EAAE,GAAG;AAAA,IAAA;AAGd,UAAM,UAAgC,EAAE,OAAA;AAGxC,QAAI,MAAM,SAAS,SAAS,CAAC,KAAK,MAAM,aAAa,KAAK;AACxD,cAAQ,eAAe;AAAA,QACrB,GAAG,KAAK,MAAM;AAAA,QACd,KAAK;AAAA,MAAA;AAAA,IAET,WAAW,MAAM,SAAS,YAAY,CAAC,KAAK,MAAM,aAAa,QAAQ;AACrE,cAAQ,eAAe;AAAA,QACrB,GAAG,KAAK,MAAM;AAAA,QACd,QAAQ;AAAA,MAAA;AAAA,IAEZ;AAEA,SAAK,YAAY,OAAO;AAAA,EAC1B;AAAA,EAEA,YAAY,SAAuB;;AACjC,UAAM,EAAE,CAAC,OAAO,GAAG,cAAc,GAAG,WAAW,KAAK,MAAM;AAE1D,QAAI,CAAC,cAAc;AACjB,YAAM,IAAI,MAAM,iBAAiB,OAAO,YAAY;AAAA,IACtD;AAEA,UAAM,UAAgC,EAAE,OAAA;AAGxC,UAAI,UAAK,MAAM,aAAa,QAAxB,mBAA6B,QAAO,SAAS;AAC/C,YAAM,mBAAmB,OAAO,OAAO,MAAM,EAAE,KAAK,CAAC,UAA0B,MAAM,SAAS,KAAK;AACnG,cAAQ,eAAe;AAAA,QACrB,GAAG,KAAK,MAAM;AAAA,QACd,KAAK;AAAA,MAAA;AAAA,IAET;AAEA,UAAI,UAAK,MAAM,aAAa,WAAxB,mBAAgC,QAAO,SAAS;AAClD,YAAM,mBAAmB,OAAO,OAAO,MAAM,EAAE,KAAK,CAAC,UAA0B,MAAM,SAAS,QAAQ;AACtG,cAAQ,eAAe;AAAA,QACrB,GAAG,KAAK,MAAM;AAAA,QACd,QAAQ;AAAA,MAAA;AAAA,IAEZ;AAEA,SAAK,YAAY,OAAO;AAAA,EAC1B;AAAA,EAEA,YAAY,SAAuB;AACjC,UAAM,QAAQ,KAAK,MAAM,OAAO,OAAO;AACvC,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MAAM,iBAAiB,OAAO,YAAY;AAAA,IACtD;AAEA,UAAM,eAAe;AAAA,MACnB,GAAG,KAAK,MAAM;AAAA,MACd,CAAC,MAAM,IAAI,GAAG;AAAA,IAAA;AAGhB,SAAK,YAAY,EAAE,cAAc;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,aAA4B;AACvC,SAAK,YAAY,EAAE,aAAa;AAAA,EAClC;AAAA,EAEA,UAAU,UAAyB;AACjC,SAAK,YAAY,EAAE,UAAU;AAAA,EAC/B;AAAA,EAEA,eAAe,eAA8B;AAC3C,SAAK,YAAY,EAAE,eAAe;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,UAAgB;AAEd,QAAI,KAAK,aAAa;AACpB,mBAAa,KAAK,WAAW;AAAA,IAC/B;AAGA,SAAK,8BAAA;AAGL,QAAI,KAAK,OAAO,mBAAmB;AACjC,WAAK,oBAAA;AAAA,IACP;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,qBAAkC;AACxC,UAAM,eAA4B;AAAA,MAChC,UAAU,CAAA;AAAA,MACV,oBAAoB;AAAA,MACpB,eAAe;AAAA,MACf,QAAQ,CAAA;AAAA,MACR,cAAc,CAAA;AAAA,MACd,aAAa;AAAA,MACb,UAAU;AAAA,MACV,eAAe;AAAA,IAAA;AAGjB,WAAO;AAAA,MACL,GAAG;AAAA,MACH,GAAG,KAAK,OAAO;AAAA,IAAA;AAAA,EAEnB;AAAA;AAAA;AAAA;AAAA,EAKQ,sBAAsB,OAA6B;;AACzD,QAAI;AAEF,UAAI,OAAO,MAAM,aAAa,eAC1B,OAAO,MAAM,uBAAuB,YACpC,OAAO,MAAM,WAAW,eACxB,OAAO,MAAM,iBAAiB,eAC9B,OAAO,MAAM,gBAAgB,aAC7B,OAAO,MAAM,aAAa,aAC1B,OAAO,MAAM,kBAAkB,WAAW;AAC5C,eAAO;AAAA,MACT;AAGA,UAAI,CAAC,MAAM,QAAQ,MAAM,QAAQ,GAAG;AAClC,eAAO;AAAA,MACT;AAGA,UAAI,MAAM,qBAAqB,KAC1B,MAAM,SAAS,SAAS,KAAK,MAAM,sBAAsB,MAAM,SAAS,QAAS;AACpF,eAAO;AAAA,MACT;AAGA,UAAI,MAAM,SAAS,WAAW,KAAK,MAAM,kBAAkB,MAAM;AAC/D,eAAO;AAAA,MACT;AAEA,UAAI,MAAM,SAAS,SAAS,GAAG;AAC7B,cAAM,wBAAwB,MAAM,SAAS,MAAM,kBAAkB;AACrE,cAAI,WAAM,kBAAN,mBAAqB,SAAO,+DAAuB,KAAI;AACzD,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,aAAO;AAAA,IACT,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,gBAAgB,OAA0B;AAChD,eAAW,YAAY,KAAK,WAAW;AACrC,UAAI;AACF,iBAAS,KAAK;AAAA,MAChB,SAAS,OAAO;AACd,gBAAQ,MAAM,mCAAmC,KAAK;AAAA,MACxD;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,qBAA2B;AACjC,QAAI;AACF,UAAI,OAAO,WAAW,eAAe,OAAO,cAAc;AACxD,cAAM,iBAAiB,aAAa,QAAQ,KAAK,OAAO,UAAU;AAClE,YAAI,gBAAgB;AAClB,gBAAM,cAAc,KAAK,MAAM,cAAc;AAC7C,cAAI,KAAK,OAAO,eAAe,WAAW,GAAG;AAC3C,iBAAK,QAAQ;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,KAAK,mCAAmC,KAAK;AAAA,IACvD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,sBAA4B;AAClC,QAAI,KAAK,aAAa;AACpB,mBAAa,KAAK,WAAW;AAAA,IAC/B;AAEA,SAAK,cAAc,WAAW,MAAM;AAClC,WAAK,aAAA;AAAA,IACP,GAAG,KAAK,OAAO,aAAa;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKQ,eAAqB;AAC3B,QAAI;AACF,UAAI,OAAO,WAAW,eAAe,OAAO,cAAc;AACxD,qBAAa,QAAQ,KAAK,OAAO,YAAY,KAAK,UAAU,KAAK,KAAK,CAAC;AAAA,MACzE;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,KAAK,4BAA4B,KAAK;AAAA,IAChD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,sBAA4B;AAClC,QAAI;AACF,UAAI,OAAO,WAAW,eAAe,OAAO,cAAc;AACxD,qBAAa,WAAW,KAAK,OAAO,UAAU;AAAA,MAChD;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,KAAK,oCAAoC,KAAK;AAAA,IACxD;AAAA,EACF;AACF;ACnYO,MAAM,eAAe;AAAA,EAK1B,YAAY,SAA+B,CAAA,GAAI,cAA2C;AAJlF,wDAAqC,IAAA;AACrC;AACA;AAGN,SAAK,SAAS;AAAA,MACZ,aAAa,OAAO,eAAe;AAAA,MACnC,qBAAqB,OAAO,uBAAuB;AAAA,MACnD,mBAAmB,OAAO,qBAAqB;AAAA,MAC/C,oBAAoB,OAAO,sBAAsB,KAAK;AAAA,IAAA;AAExD,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,eAA8D;;AAEhF,QAAI,KAAK,SAAS,QAAQ,KAAK,OAAO,aAAa;AACjD,YAAM,IAAI,MAAM,uCAAuC,KAAK,OAAO,WAAW,EAAE;AAAA,IAClF;AAGA,SAAK,sBAAsB,aAAa;AAGxC,UAAM,YAAY,KAAK,OAAO,mBAAA;AAG9B,QAAI,KAAK,SAAS,IAAI,SAAS,GAAG;AAChC,YAAM,IAAI,MAAM,8BAA8B,SAAS,EAAE;AAAA,IAC3D;AAGA,UAAM,cAAc,cAAc,QAAQ,GAAG,KAAK,OAAO,iBAAiB,IAAI,KAAK,SAAS,OAAO,CAAC;AAEpG,UAAM,gBAAuD,CAAA;AAC7D,QAAI;AAEJ,YAAQ,cAAc,MAAA;AAAA,MACpB,KAAK,YAAY;AACf,kBAAU,MAAM,KAAK,iBAAiB,WAAW,aAAa,eAAe,aAAa;AAC1F;AAAA,MACF,KAAK,YAAY;AACf,kBAAU,MAAM,KAAK,oBAAoB,WAAW,aAAa,eAAe,aAAa;AAC7F;AAAA,MACF,KAAK,YAAY;AACf,kBAAU,MAAM,KAAK,uBAAuB,WAAW,aAAa,eAAe,aAAa;AAChG;AAAA,MACF;AACE,cAAM,IAAI,MAAM,6BAA6B,cAAc,IAAI,EAAE;AAAA,IAAA;AAIrE,SAAK,SAAS,IAAI,WAAW,OAAO;AAGpC,eAAK,iBAAL,mBAAmB,KAAK,gBAAgB;AAExC,WAAO;AAAA,MACL;AAAA,MACA,eAAe,OAAO,KAAK,aAAa,EAAE,SAAS,IAAI,gBAAgB;AAAA,IAAA;AAAA,EAE3E;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,WAAkC;;AACpD,UAAM,UAAU,KAAK,SAAS,IAAI,SAAS;AAC3C,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,MAAM,sBAAsB,SAAS,EAAE;AAAA,IACnD;AAGA,SAAK,SAAS,OAAO,SAAS;AAG9B,SAAK,iBAAiB,OAAO;AAG7B,eAAK,iBAAL,mBAAmB,KAAK,kBAAkB;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,WAAmC;AAC5C,WAAO,KAAK,SAAS,IAAI,SAAS,KAAK;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA,EAKA,iBAA4B;AAC1B,WAAO,MAAM,KAAK,KAAK,SAAS,QAAQ;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,MAA8B;AAC9C,WAAO,KAAK,eAAA,EAAiB,OAAO,CAAA,YAAW,QAAQ,SAAS,IAAI;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuB,WAAwC;AAC7D,WAAO,KAAK,eAAA,EAAiB,OAAO,CAAA,YAAW;AAC7C,UAAI,cAAc,OAAO;AACvB,eAAO,QAAQ,SAAS,YAAY,YAAY,QAAQ,SAAS,YAAY;AAAA,MAC/E,OAAO;AACL,eAAO,QAAQ,SAAS,YAAY,eAAe,QAAQ,SAAS,YAAY;AAAA,MAClF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,WAAmB,SAAwE;;AAC7G,UAAM,UAAU,KAAK,SAAS,IAAI,SAAS;AAC3C,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,MAAM,sBAAsB,SAAS,EAAE;AAAA,IACnD;AAGA,UAAM,iBAA0B;AAAA,MAC9B,GAAG;AAAA,MACH,GAAG;AAAA,IAAA;AAIL,SAAK,SAAS,IAAI,WAAW,cAAc;AAG3C,eAAK,iBAAL,mBAAmB,KAAK,kBAAkB;AAE1C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,WAA4B;AACrC,WAAO,KAAK,SAAS,IAAI,SAAS;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,kBAA0B;AACxB,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,WAAkC;AAC9C,UAAM,UAAU,KAAK,SAAS,IAAI,SAAS;AAC3C,QAAI,CAAC,SAAS;AACZ,aAAO;AAAA,IACT;AAEA,QAAI,QAAQ,SAAS,YAAY,YAAY,QAAQ,SAAS,YAAY,YAAY;AACpF,aAAO,QAAQ,IAAI;AAAA,IACrB;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB,WAAkC;AACnD,UAAM,UAAU,KAAK,SAAS,IAAI,SAAS;AAC3C,QAAI,CAAC,SAAS;AACZ,aAAO;AAAA,IACT;AAEA,QAAI,QAAQ,SAAS,YAAY,eAAe,QAAQ,SAAS,YAAY,YAAY;AACvF,aAAO,QAAQ,OAAO;AAAA,IACxB;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,mBAAkC;AACtC,eAAW,WAAW,KAAK,SAAS,OAAA,GAAU;AAC5C,WAAK,iBAAiB,OAAO;AAAA,IAC/B;AAEA,SAAK,SAAS,MAAA;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,iBACZ,WACA,aACA,QACA,eACqB;AACrB,QAAI,CAAC,OAAO,KAAK;AACf,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAEA,QAAI,aAAqB,OAAO,IAAI,cAAc;AAGlD,QAAI,CAAC,YAAY;AACf,UAAI,CAAC,KAAK,OAAO,qBAAqB;AACpC,cAAM,IAAI,MAAM,wDAAwD;AAAA,MAC1E;AACA,mBAAa,kBAAkB,EAAE;AACjC,oBAAc,MAAM;AAAA,IACtB;AAGA,UAAM,UAAU,KAAK,iBAAiB,UAAU;AAEhD,WAAO;AAAA,MACL,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,MAAM,YAAY;AAAA,MAClB,UAAU;AAAA,MACV,WAAW,KAAK,IAAA;AAAA,MAChB,KAAK;AAAA,QACH;AAAA,QACA;AAAA,QACA,UAAU,OAAO,IAAI;AAAA,MAAA;AAAA,IACvB;AAAA,EAEJ;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,oBACZ,WACA,aACA,QACA,eACwB;AACxB,QAAI,CAAC,OAAO,QAAQ;AAClB,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAEA,QAAI,YAAoC,OAAO,OAAO;AAGtD,QAAI,CAAC,WAAW;AACd,UAAI,CAAC,KAAK,OAAO,qBAAqB;AACpC,cAAM,IAAI,MAAM,uDAAuD;AAAA,MACzE;AACA,kBAAY,oBAAoB,EAAE;AAClC,oBAAc,SAAS;AAAA,IACzB;AAGA,UAAM,iBAA6B;AAGnC,UAAM,YAAY,KAAK,sBAAsB,cAAc;AAE3D,WAAO;AAAA,MACL,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,MAAM,YAAY;AAAA,MAClB,UAAU;AAAA,MACV,WAAW,KAAK,IAAA;AAAA,MAChB,QAAQ;AAAA,QACN,WAAW;AAAA,QACX;AAAA,QACA,UAAU,OAAO,OAAO;AAAA,MAAA;AAAA,IAC1B;AAAA,EAEJ;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,uBACZ,WACA,aACA,QACA,eAC2B;AAC3B,QAAI,CAAC,OAAO,OAAO,CAAC,OAAO,QAAQ;AACjC,YAAM,IAAI,MAAM,oEAAoE;AAAA,IACtF;AAEA,QAAI,gBAAwB,OAAO,IAAI,cAAc;AACrD,QAAI,kBAA0C,OAAO,OAAO;AAG5D,QAAI,CAAC,eAAe;AAClB,UAAI,CAAC,KAAK,OAAO,qBAAqB;AACpC,cAAM,IAAI,MAAM,4DAA4D;AAAA,MAC9E;AACA,sBAAgB,kBAAkB,EAAE;AACpC,oBAAc,MAAM;AAAA,IACtB;AAEA,QAAI,CAAC,iBAAiB;AACpB,UAAI,CAAC,KAAK,OAAO,qBAAqB;AACpC,cAAM,IAAI,MAAM,8DAA8D;AAAA,MAChF;AACA,wBAAkB,oBAAoB,EAAE;AACxC,oBAAc,SAAS;AAAA,IACzB;AAGA,UAAM,uBAAmC;AAGzC,UAAM,aAAa,KAAK,iBAAiB,aAAa;AACtD,UAAM,kBAAkB,KAAK,sBAAsB,oBAAoB;AAEvE,WAAO;AAAA,MACL,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,MAAM,YAAY;AAAA,MAClB,UAAU;AAAA,MACV,WAAW,KAAK,IAAA;AAAA,MAChB,KAAK;AAAA,QACH,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU,OAAO,IAAI;AAAA,MAAA;AAAA,MAEvB,QAAQ;AAAA,QACN,WAAW;AAAA,QACX,WAAW;AAAA,QACX,UAAU,OAAO,OAAO;AAAA,MAAA;AAAA,IAC1B;AAAA,EAEJ;AAAA;AAAA;AAAA;AAAA,EAKQ,sBAAsB,QAA6B;AACzD,QAAI,CAAC,OAAO,OAAO,WAAW,EAAE,SAAS,OAAO,IAAI,GAAG;AACrD,YAAM,IAAI,MAAM,yBAAyB,OAAO,IAAI,EAAE;AAAA,IACxD;AAEA,YAAQ,OAAO,MAAA;AAAA,MACb,KAAK,YAAY;AACf,YAAI,CAAC,OAAO,KAAK;AACf,gBAAM,IAAI,MAAM,4CAA4C;AAAA,QAC9D;AACA,YAAI,CAAC,OAAO,IAAI,YAAY,OAAO,IAAI,SAAS,WAAW,GAAG;AAC5D,gBAAM,IAAI,MAAM,gDAAgD;AAAA,QAClE;AACA;AAAA,MAEF,KAAK,YAAY;AACf,YAAI,CAAC,OAAO,QAAQ;AAClB,gBAAM,IAAI,MAAM,kDAAkD;AAAA,QACpE;AACA,YAAI,CAAC,OAAO,OAAO,YAAY,OAAO,OAAO,SAAS,WAAW,GAAG;AAClE,gBAAM,IAAI,MAAM,kDAAkD;AAAA,QACpE;AACA;AAAA,MAEF,KAAK,YAAY;AACf,YAAI,CAAC,OAAO,OAAO,CAAC,OAAO,QAAQ;AACjC,gBAAM,IAAI,MAAM,oEAAoE;AAAA,QACtF;AACA,YAAI,CAAC,OAAO,IAAI,YAAY,OAAO,IAAI,SAAS,WAAW,GAAG;AAC5D,gBAAM,IAAI,MAAM,uDAAuD;AAAA,QACzE;AACA,YAAI,CAAC,OAAO,OAAO,YAAY,OAAO,OAAO,SAAS,WAAW,GAAG;AAClE,gBAAM,IAAI,MAAM,sDAAsD;AAAA,QACxE;AACA;AAAA,IAAA;AAAA,EAEN;AAAA;AAAA;AAAA;AAAA,EAKQ,iBAAiB,SAAwB;AAC/C,QAAI;AACF,UAAI,QAAQ,SAAS,YAAY,YAAY,QAAQ,SAAS,YAAY,YAAY;AAEpF,YAAI,QAAQ,IAAI,YAAY;AACzB,kBAAQ,IAAY,aAAa,IAAI,OAAO,QAAQ,IAAI,WAAW,MAAM;AAAA,QAC5E;AAAA,MACF;AAEA,UAAI,QAAQ,SAAS,YAAY,eAAe,QAAQ,SAAS,YAAY,YAAY;AAEvF,YAAI,QAAQ,OAAO,WAAW;AAC5B,kBAAQ,OAAO,UAAU,KAAK,CAAC;AAAA,QACjC;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,KAAK,gCAAgC,KAAK;AAAA,IACpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,4BAAoC;AAC1C,WAAO,WAAW,KAAK,IAAA,CAAK,IAAI,KAAK,OAAA,EAAS,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA,EAKQ,iBAAiB,YAA4B;AAGnD,UAAM,OAAO,KAAK,WAAW,UAAU;AACvC,WAAO,KAAK,KAAK,MAAM,GAAG,EAAE,CAAC;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKQ,sBAAsB,WAA+B;AAG3D,UAAM,OAAO,KAAK,WAAW,MAAM,KAAK,SAAS,EAAE,IAAI,CAAA,MAAK,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC;AACrG,WAAO,KAAK,MAAM,GAAG,EAAE;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAKQ,WAAW,OAAuB;AACxC,QAAI,OAAO;AACX,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAM,OAAO,MAAM,WAAW,CAAC;AAC/B,cAAS,QAAQ,KAAK,OAAQ;AAC9B,aAAO,OAAO;AAAA,IAChB;AACA,WAAO,KAAK,IAAI,IAAI,EAAE,SAAS,EAAE,EAAE,SAAS,IAAI,GAAG;AAAA,EACrD;AACF;AChdA,MAAM,mBAAyD;AAAA,EAA/D;AACU,yDAAwD,IAAA;AAAA;AAAA,EAEhE,GAAiC,OAAU,UAAiC;AAC1E,QAAI,CAAC,KAAK,UAAU,IAAI,KAAK,GAAG;AAC9B,WAAK,UAAU,IAAI,OAAO,oBAAI,KAAK;AAAA,IACrC;AACA,SAAK,UAAU,IAAI,KAAK,EAAG,IAAI,QAAQ;AAAA,EACzC;AAAA,EAEA,IAAkC,OAAU,UAAiC;AAC3E,UAAM,iBAAiB,KAAK,UAAU,IAAI,KAAK;AAC/C,QAAI,gBAAgB;AAClB,qBAAe,OAAO,QAAQ;AAC9B,UAAI,eAAe,SAAS,GAAG;AAC7B,aAAK,UAAU,OAAO,KAAK;AAAA,MAC7B;AAAA,IACF;AAAA,EACF;AAAA,EAEA,KAAmC,OAAU,UAAiC;AAC5E,UAAM,cAAc,IAAI,SAAsC;AAC5D,WAAK,IAAI,OAAO,WAA8B;AAC7C,eAAiB,GAAG,IAAI;AAAA,IAC3B;AACA,SAAK,GAAG,OAAO,WAA8B;AAAA,EAC/C;AAAA,EAEA,KAAmC,UAAa,MAAyC;AACvF,UAAM,iBAAiB,KAAK,UAAU,IAAI,KAAK;AAC/C,QAAI,gBAAgB;AAClB,iBAAW,YAAY,gBAAgB;AACrC,YAAI;AACD,mBAAiB,GAAG,IAAI;AAAA,QAC3B,SAAS,OAAO;AACd,kBAAQ,MAAM,+BAA+B,OAAO,KAAK,CAAC,KAAK,KAAK;AACpE,eAAK,KAAK,SAAS,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC,CAAC;AAAA,QAC9E;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,mBAAiD,OAAiB;AAChE,QAAI,OAAO;AACT,WAAK,UAAU,OAAO,KAAK;AAAA,IAC7B,OAAO;AACL,WAAK,UAAU,MAAA;AAAA,IACjB;AAAA,EACF;AACF;AAKO,MAAM,cAAoC;AAAA,EAU/C,YAAY,SAAuB,IAAI;AAT/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAc;;AAGpB,SAAK,SAAS;AACd,SAAK,eAAe,IAAI,mBAAA;AAGxB,SAAK,kBAAkB,IAAI,gBAAgB;AAAA,MACzC,0BAAwB,YAAO,aAAP,mBAAiB,2BAA0B;AAAA,MACnE,yBAAyB;AAAA;AAAA,MACzB,gBAAgB;AAAA,IAAA,CACjB;AAGD,SAAK,gBAAgB,oBAAA;AAGrB,SAAK,eAAe,IAAI,aAAa;AAAA,MACnC,mBAAmB;AAAA;AAAA,MACnB,gBAAgB,KAAK,oBAAoB,KAAK,IAAI;AAAA,IAAA,CACnD;AAGD,SAAK,iBAAiB,IAAI,eAAe;AAAA,MACvC,aAAa;AAAA,MACb,qBAAqB;AAAA,MACrB,mBAAmB;AAAA,IAAA,GAClB,KAAK,YAAY;AAGpB,SAAK,aAAa,uBAAuB,KAAK,kBAAkB,KAAK,IAAI,CAAC;AAG1E,UAAI,YAAO,aAAP,mBAAiB,iBAAgB,SAAS,OAAO,WAAW,aAAa;AAC3E,aAAO,iBAAiB,gBAAgB,KAAK,iBAAiB,KAAK,IAAI,CAAC;AACxE,aAAO,iBAAiB,UAAU,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAAA,IACpE;AAGA,SAAK,WAAA;AAAA,EACP;AAAA;AAAA,EAGA,GAAiC,OAAU,UAAiC;AAC1E,SAAK,aAAa,GAAG,OAAO,QAAQ;AAAA,EACtC;AAAA,EAEA,IAAkC,OAAU,UAAiC;AAC3E,SAAK,aAAa,IAAI,OAAO,QAAQ;AAAA,EACvC;AAAA,EAEA,KAAmC,OAAU,UAAiC;AAC5E,SAAK,aAAa,KAAK,OAAO,QAAQ;AAAA,EACxC;AAAA,EAEA,KAAmC,UAAa,MAAyC;AACvF,SAAK,aAAa,KAAK,OAAO,GAAG,IAAI;AAAA,EACvC;AAAA,EAEA,mBAAiD,OAAiB;AAChE,SAAK,aAAa,mBAAmB,KAAK;AAAA,EAC5C;AAAA;AAAA,EAGA,WAAwB;AACtB,SAAK,mBAAA;AACL,WAAO,KAAK,aAAa,SAAA;AAAA,EAC3B;AAAA,EAEA,cAAuB;AACrB,SAAK,mBAAA;AACL,WAAO,KAAK,aAAa,SAAA,EAAW;AAAA,EACtC;AAAA,EAEA,WAAoB;AAClB,SAAK,mBAAA;AACL,WAAO,KAAK,aAAa,SAAA,EAAW;AAAA,EACtC;AAAA;AAAA,EAGA,MAAM,WAAW,QAAwC;AACvD,SAAK,mBAAA;AAEL,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,eAAe,cAAc,MAAM;AAC7D,WAAK,aAAa,WAAW,OAAO,OAAO;AAG3C,YAAM,KAAK,uBAAA;AAEX,aAAO,OAAO,QAAQ;AAAA,IACxB,SAAS,OAAO;AACd,YAAM,MAAM,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AACpE,WAAK,aAAa,KAAK,SAAS,GAAG;AACnC,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,cAAc,WAAkC;AACpD,SAAK,mBAAA;AAEL,QAAI;AACF,YAAM,KAAK,eAAe,cAAc,SAAS;AACjD,WAAK,aAAa,cAAc,SAAS;AAGzC,YAAM,KAAK,uBAAA;AAAA,IACb,SAAS,OAAO;AACd,YAAM,MAAM,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AACpE,WAAK,aAAa,KAAK,SAAS,GAAG;AACnC,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,cAAc,cAAqC;AACvD,SAAK,mBAAA;AAEL,QAAI;AACF,WAAK,aAAa,cAAc,YAAY;AAG5C,YAAM,KAAK,uBAAA;AAAA,IACb,SAAS,OAAO;AACd,YAAM,MAAM,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AACpE,WAAK,aAAa,KAAK,SAAS,GAAG;AACnC,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,cAAyB;AACvB,SAAK,mBAAA;AACL,WAAO,KAAK,aAAa,SAAA,EAAW;AAAA,EACtC;AAAA,EAEA,mBAAmC;AACjC,SAAK,mBAAA;AACL,WAAO,KAAK,aAAa,SAAA,EAAW;AAAA,EACtC;AAAA;AAAA,EAGA,MAAM,SAAS,OAAsC;AACnD,SAAK,mBAAA;AAEL,QAAI;AACF,WAAK,aAAa,SAAS,KAAK;AAGhC,UAAI,MAAM,SAAS,OAAO;AACxB,cAAM,KAAK,2BAAA;AAAA,MACb,WAAW,MAAM,SAAS,UAAU;AAClC,cAAM,KAAK,uBAAA;AAAA,MACb;AAAA,IACF,SAAS,OAAO;AACd,YAAM,MAAM,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AACpE,WAAK,aAAa,KAAK,SAAS,GAAG;AACnC,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,YAAY,SAAgC;AAChD,SAAK,mBAAA;AAEL,QAAI;AACF,WAAK,aAAa,YAAY,OAAO;AAGrC,YAAM,QAAQ,KAAK,aAAa,SAAA,EAAW,OAAO,OAAO;AACzD,UAAI,OAAO;AACT,aAAK,aAAa,KAAK,gBAAgB,KAAK;AAE5C,YAAI,MAAM,SAAS,SAAS,KAAK,kBAAkB;AAEjD,gBAAM,KAAK,4BAA4B,KAAK;AAAA,QAC9C;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,YAAM,MAAM,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AACpE,WAAK,aAAa,KAAK,SAAS,GAAG;AACnC,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,YAA4C;AAC1C,SAAK,mBAAA;AACL,WAAO,KAAK,aAAa,SAAA,EAAW;AAAA,EACtC;AAAA,EAEA,eAAe,MAA+C;AAC5D,SAAK,mBAAA;AACL,UAAM,QAAQ,KAAK,aAAa,SAAA;AAChC,WAAO,MAAM,aAAa,IAAI,KAAK;AAAA,EACrC;AAAA;AAAA,EAGA,MAAM,UAAyB;AAC7B,SAAK,mBAAA;AAEL,QAAI;AAEF,UAAI,KAAK,cAAc,WAAW,GAAG;AACnC,cAAM,IAAI,MAAM,0DAA0D;AAAA,MAC5E;AAGA,YAAM,KAAK,oBAAA;AAGX,WAAK,aAAa,aAAa,IAAI;AACnC,WAAK,aAAa,KAAK,SAAS;AAAA,IAClC,SAAS,OAAO;AACd,YAAM,MAAM,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AACpE,WAAK,aAAa,KAAK,SAAS,GAAG;AACnC,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,aAA4B;AAChC,SAAK,mBAAA;AAEL,QAAI;AAEF,UAAI,KAAK,kBAAkB;AAEzB,aAAK,mBAAmB;AAAA,MAC1B;AAEA,UAAI,KAAK,cAAc;AACrB,YAAI;AAEF,gBAAM,oBAAoB,KAAK,aAAa,SAAS,qBAAqB;AAC1E,cAAI,qBAAqB,gBAAgB,mBAAmB;AAC1D,kBAAO,kBAA0B,WAAA;AAAA,UACnC;AAAA,QACF,QAAQ;AAAA,QAER;AACA,aAAK,eAAe;AAAA,MACtB;AAGA,WAAK,aAAa,aAAa,KAAK;AACpC,WAAK,aAAa,KAAK,YAAY;AAAA,IACrC,SAAS,OAAO;AACd,YAAM,MAAM,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AACpE,WAAK,aAAa,KAAK,SAAS,GAAG;AACnC,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,OAAsB;AAC1B,SAAK,mBAAA;AAEL,QAAI;AAEF,YAAM,KAAK,WAAA;AAGX,WAAK,aAAa,UAAU,IAAI;AAChC,WAAK,aAAa,KAAK,MAAM;AAAA,IAC/B,SAAS,OAAO;AACd,YAAM,MAAM,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AACpE,WAAK,aAAa,KAAK,SAAS,GAAG;AACnC,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,SAAwB;AAC5B,SAAK,mBAAA;AAEL,QAAI;AAEF,WAAK,aAAa,UAAU,KAAK;AACjC,WAAK,aAAa,KAAK,QAAQ;AAAA,IACjC,SAAS,OAAO;AACd,YAAM,MAAM,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AACpE,WAAK,aAAa,KAAK,SAAS,GAAG;AACnC,YAAM;AAAA,IACR;AAAA,EACF;AAAA;AAAA,EAGA,MAAM,UAAyB;AAC7B,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI;AAEF,YAAM,KAAK,WAAA;AAGX,YAAM,KAAK,eAAe,iBAAA;AAG1B,WAAK,aAAa,QAAA;AAGlB,WAAK,aAAa,mBAAA;AAGlB,UAAI,OAAO,WAAW,aAAa;AACjC,eAAO,oBAAoB,gBAAgB,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAC3E,eAAO,oBAAoB,UAAU,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAAA,MACvE;AAEA,WAAK,cAAc;AAAA,IACrB,SAAS,OAAO;AACd,cAAQ,MAAM,oCAAoC,KAAK;AAAA,IACzD;AAAA,EACF;AAAA;AAAA,EAGA,sBAA+C;AAC7C,SAAK,mBAAA;AACL,WAAO,KAAK,oBAAoB;AAAA,EAClC;AAAA,EAEA,kBAAuC;AACrC,SAAK,mBAAA;AACL,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA;AAAA,EAIQ,aAAmB;AACzB,QAAI;AAEF,UAAI,KAAK,OAAO,UAAU;AAExB,gBAAQ;AAAA,UACN,KAAK,OAAO,SAAS,IAAI,CAAC,kBAAiC,KAAK,WAAW,aAAa,CAAC;AAAA,QAAA,EACzF,MAAM,CAAC,UAAiB;AACxB,eAAK,aAAa,KAAK,SAAS,KAAK;AAAA,QACvC,CAAC;AAAA,MACH;AAGA,UAAI,OAAO,KAAK,OAAO,wBAAwB,UAAU;AACvD,aAAK,aAAa,oBAAoB,sBAAsB,KAAK,OAAO,mBAAmB;AAAA,MAC7F;AAGA,WAAK,aAAa,eAAe,IAAI;AAGrC,UAAI,KAAK,OAAO,aAAa;AAC3B,aAAK,QAAA,EAAU,MAAM,CAAA,UAAS;AAC5B,eAAK,aAAa,KAAK,SAAS,KAAK;AAAA,QACvC,CAAC;AAAA,MACH;AAAA,IACF,SAAS,OAAO;AACd,YAAM,MAAM,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AACpE,WAAK,aAAa,KAAK,SAAS,GAAG;AAAA,IACrC;AAAA,EACF;AAAA,EAEA,MAAc,sBAAqC;AACjD,UAAM,QAAQ,KAAK,aAAa,SAAA;AAGhC,QAAI,MAAM,aAAa,KAAK;AAC1B,YAAM,KAAK,2BAAA;AAAA,IACb;AAGA,QAAI,MAAM,aAAa,QAAQ;AAC7B,YAAM,KAAK,uBAAA;AAAA,IACb;AAAA,EACF;AAAA,EAEA,MAAc,6BAA4C;AACxD,QAAI,CAAC,KAAK,kBAAkB;AAC1B,YAAM,cAAc,KAAK,eAAe,uBAAuB,KAAK;AACpE,YAAM,cAAc,KAAK,eAAe,KAAK;AAE7C,UAAI,YAAY,SAAS,KAAK,eAAe,YAAY,SAAS,OAAO;AACvE,aAAK,mBAAmB,IAAI,qBAAqB,YAAY,UAAU;AAGvE,cAAM,YAAY,YAAY;AAAA,UAAI,CAAA,YAChC,QAAQ,SAAS,cAAc,QAAQ,SAAS,eAC5C,QAAQ,IAAI,UACZ;AAAA,QAAA,EACJ,OAAO,OAAO;AAIf,aAAK,iBAAyB,YAAY;AAAA,MAC7C;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,yBAAwC;AACpD,QAAI,CAAC,KAAK,cAAc;AACtB,YAAM,iBAAiB,KAAK,eAAe,uBAAuB,QAAQ;AAC1E,YAAM,cAAc,KAAK,eAAe,QAAQ;AAEhD,UAAI,eAAe,SAAS,KAAK,eAAe,YAAY,SAAS,UAAU;AAC7E,aAAK,eAAe,IAAI,iBAAiB;AAAA,UACvC,MAAM;AAAA,UACN,QAAQ,CAAC,YAAY,OAAO;AAAA,QAAA,CAC7B;AAGD,mBAAW,WAAW,gBAAgB;AACpC,cAAI,QAAQ,SAAS,iBAAiB,QAAQ,SAAS,cAAc;AACnE,kBAAM,gBAAgB;AAAA,cACpB,WAAW,QAAQ,OAAO;AAAA,cAC1B,OAAO,QAAQ,QAAQ;AAAA,cACvB,QAAQ,CAAC,YAAY,OAAO;AAAA,cAC5B,UAAU,CAAC,0BAA0B,oBAAoB;AAAA,YAAA;AAE3D,iBAAK,aAAa,WAAW,aAAoB;AAAA,UACnD;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,yBAAwC;AAEpD,QAAI,KAAK,kBAAkB;AACzB,YAAM,cAAc,KAAK,eAAe,uBAAuB,KAAK;AAClD,kBAAY;AAAA,QAAI,CAAA,YAChC,QAAQ,SAAS,cAAc,QAAQ,SAAS,eAC5C,QAAQ,IAAI,UACZ;AAAA,MAAA,EACJ,OAAO,OAAO;AAAA,IAIlB;AAGA,QAAI,KAAK,aAAc;AAAA,EAGzB;AAAA,EAEA,MAAc,4BAA4B,OAAsC;AAC9E,QAAI,KAAK,oBAAoB,MAAM,SAAS,MAAO;AAAA,EAIrD;AAAA,EAEQ,kBAAkB,OAA0B;AAClD,SAAK,aAAa,KAAK,gBAAgB,KAAK;AAAA,EAC9C;AAAA,EAEQ,mBAAyB;AAE/B,SAAK,QAAA,EAAU,MAAM,QAAQ,KAAK;AAAA,EACpC;AAAA,EAEQ,oBAAoB,OAA6B;AACvD,QAAI;AAEF,aACE,MAAM,QAAQ,MAAM,QAAQ,KAC5B,OAAO,MAAM,uBAAuB,YACpC,OAAO,MAAM,WAAW,YACxB,OAAO,MAAM,iBAAiB,YAC9B,OAAO,MAAM,gBAAgB,aAC7B,OAAO,MAAM,aAAa,aAC1B,OAAO,MAAM,kBAAkB;AAAA,IAEnC,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEQ,qBAA2B;AACjC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC7C;AAAA,EACF;AACF;AC9hBO,MAAM,oBAAoB;AAAA,EAA1B;AACG,kCAAuB,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAK/B,aAAa,UAAgD;AAC3D,SAAK,OAAO,WAAW;AACvB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,SAA6C;AACvD,QAAI,CAAC,KAAK,OAAO,UAAU;AACzB,WAAK,OAAO,WAAW,CAAA;AAAA,IACzB;AACA,SAAK,OAAO,SAAS,KAAK,OAAO;AACjC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,MAAe,WAAqB,CAAC,KAAK,KAAK,GAAwB;AACpF,WAAO,KAAK,YAAY;AAAA,MACtB,MAAM,YAAY;AAAA,MAClB;AAAA,MACA,KAAK,EAAE,SAAA;AAAA,IAAS,CACjB;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,MAAe,WAAqB,CAAC,gBAAgB,QAAQ,GAAwB;AACrG,WAAO,KAAK,YAAY;AAAA,MACtB,MAAM,YAAY;AAAA,MAClB;AAAA,MACA,QAAQ,EAAE,SAAA;AAAA,IAAS,CACpB;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,qBACE,MACA,WAAqB,CAAC,KAAK,KAAK,GAChC,WAAqB,CAAC,gBAAgB,QAAQ,GACzB;AACrB,WAAO,KAAK,YAAY;AAAA,MACtB,MAAM,YAAY;AAAA,MAClB;AAAA,MACA,KAAK,EAAE,SAAA;AAAA,MACP,QAAQ,EAAE,SAAA;AAAA,IAAS,CACpB;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,wBAAwB,OAAoC;AAC1D,SAAK,OAAO,sBAAsB;AAClC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,cAAuB,MAA2B;AAChE,SAAK,OAAO,cAAc;AAC1B,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,UAAyD;AACpE,SAAK,OAAO,WAAW,EAAE,GAAG,KAAK,OAAO,UAAU,GAAG,SAAA;AACrD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,qBAAqB,UAAmB,MAA2B;AACjE,QAAI,CAAC,KAAK,OAAO,UAAU;AACzB,WAAK,OAAO,WAAW,CAAA;AAAA,IACzB;AACA,SAAK,OAAO,SAAS,yBAAyB;AAC9C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,OAAmD;AAC3D,SAAK,OAAO,QAAQ,EAAE,GAAG,KAAK,OAAO,OAAO,GAAG,MAAA;AAC/C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,UAAmB,MAAM,WAAgD,SAA8B;AACtH,QAAI,CAAC,KAAK,OAAO,OAAO;AACtB,WAAK,OAAO,QAAQ,CAAA;AAAA,IACtB;AACA,SAAK,OAAO,MAAM,gBAAgB;AAClC,SAAK,OAAO,MAAM,WAAW;AAC7B,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,QAAsB;AACpB,WAAO,EAAE,GAAG,KAAK,OAAA;AAAA,EACnB;AACF;AAKO,MAAM,kBAA2C;AAAA;AAAA;AAAA;AAAA,EAItD,MAAM,OAAO,QAA2C;AACtD,QAAI;AACF,YAAM,SAAS,IAAI,cAAc,MAAM;AACvC,aAAO;AAAA,IACT,SAAS,OAAO;AACd,YAAM,IAAI,MAAM,4BAA4B,iBAAiB,QAAQ,MAAM,UAAU,eAAe,EAAE;AAAA,IACxG;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,QAA2C;AAChE,WAAO,KAAK,OAAO,MAAM;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,kBAAkB,WAAuF;AAC7G,UAAM,UAAU,IAAI,oBAAA;AACpB,UAAM,SAAS,UAAU,OAAO,EAAE,MAAA;AAClC,WAAO,KAAK,OAAO,MAAM;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,YAA8D;AACnF,UAAM,SAAS,eAAe,UAAU;AACxC,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,0BAA0B,UAAU,EAAE;AAAA,IACxD;AACA,WAAO,KAAK,OAAO,OAAO,MAAM;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gBAAgB,SAIlB,IAAyB;AAC3B,UAAM,eAA6B;AAAA,MACjC,UAAU,CAAC;AAAA,QACT,MAAM,YAAY;AAAA,QAClB,MAAM,OAAO;AAAA,QACb,KAAK;AAAA,UACH,UAAU,OAAO,YAAY,CAAC,KAAK,KAAK;AAAA;AAAA,QAAA;AAAA,MAC1C,CACD;AAAA,MACD,aAAa,OAAO,eAAe;AAAA,MACnC,UAAU;AAAA,QACR,wBAAwB;AAAA,MAAA;AAAA,IAC1B;AAGF,WAAO,KAAK,OAAO,YAAY;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,mBAAmB,SAIrB,IAAyB;AAC3B,UAAM,eAA6B;AAAA,MACjC,UAAU,CAAC;AAAA,QACT,MAAM,YAAY;AAAA,QAClB,MAAM,OAAO;AAAA,QACb,QAAQ;AAAA,UACN,UAAU,OAAO,YAAY,CAAC,gBAAgB,QAAQ;AAAA,QAAA;AAAA,MACxD,CACD;AAAA,MACD,aAAa,OAAO,eAAe;AAAA,MACnC,UAAU;AAAA,QACR,wBAAwB;AAAA,MAAA;AAAA,IAC1B;AAGF,WAAO,KAAK,OAAO,YAAY;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,uBAAuB,SAKzB,IAAyB;AAC3B,UAAM,eAA6B;AAAA,MACjC,UAAU,CAAC;AAAA,QACT,MAAM,YAAY;AAAA,QAClB,MAAM,OAAO;AAAA,QACb,KAAK;AAAA,UACH,UAAU,OAAO,eAAe,CAAC,KAAK,KAAK;AAAA,QAAA;AAAA,QAE7C,QAAQ;AAAA,UACN,UAAU,OAAO,kBAAkB,CAAC,gBAAgB,QAAQ;AAAA,QAAA;AAAA,MAC9D,CACD;AAAA,MACD,aAAa,OAAO,eAAe;AAAA,MACnC,UAAU;AAAA,QACR,wBAAwB;AAAA,MAAA;AAAA,IAC1B;AAGF,WAAO,KAAK,OAAO,YAAY;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gBAAgB,SAIlB,IAAyB;AAC3B,UAAM,eAA6B;AAAA,MACjC,UAAU,OAAO,YAAY;AAAA,QAC3B;AAAA,UACE,MAAM,YAAY;AAAA,UAClB,MAAM;AAAA,UACN,KAAK,EAAE,UAAU,CAAC,SAAS,MAAM,EAAA;AAAA;AAAA,UACjC,QAAQ,EAAE,UAAU,CAAC,UAAU,UAAU,EAAA;AAAA,QAAE;AAAA,MAC7C;AAAA,MAEF,aAAa,OAAO,eAAe;AAAA,MACnC,UAAU;AAAA,QACR,wBAAwB;AAAA;AAAA,QACxB,oBAAoB;AAAA,QACpB,aAAa;AAAA,MAAA;AAAA,MAEf,OAAO;AAAA,QACL,eAAe,OAAO,iBAAiB;AAAA,QACvC,UAAU;AAAA,MAAA;AAAA,IACZ;AAGF,WAAO,KAAK,OAAO,YAAY;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAqC;AACnC,WAAO,IAAI,oBAAA;AAAA,EACb;AAAA;AAAA;AAAA;AAAA,EAKA,aAA2C;AACzC,WAAO;AAAA,EACT;AACF;AAKO,MAAM,iBAA+C;AAAA,EAC1D,SAAS;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,QAAQ;AAAA,MACN,UAAU,CAAC;AAAA,QACT,MAAM,YAAY;AAAA,QAClB,MAAM;AAAA,QACN,KAAK,EAAE,UAAU,CAAC,GAAG,EAAA;AAAA,MAAE,CACxB;AAAA,MACD,aAAa;AAAA,IAAA;AAAA,EACf;AAAA,EAGF,aAAa;AAAA,IACX,MAAM;AAAA,IACN,aAAa;AAAA,IACb,QAAQ;AAAA,MACN,UAAU;AAAA,QACR;AAAA,UACE,MAAM,YAAY;AAAA,UAClB,MAAM;AAAA,UACN,KAAK,EAAE,UAAU,CAAC,SAAS,QAAQ,KAAK,KAAK,EAAA;AAAA,UAC7C,QAAQ,EAAE,UAAU,CAAC,UAAU,UAAU,EAAA;AAAA,QAAE;AAAA,QAE7C;AAAA,UACE,MAAM,YAAY;AAAA,UAClB,MAAM;AAAA,UACN,KAAK,EAAE,UAAU,CAAC,SAAS,MAAM,EAAA;AAAA,QAAE;AAAA,MACrC;AAAA,MAEF,aAAa;AAAA,MACb,UAAU;AAAA,QACR,wBAAwB;AAAA,QACxB,aAAa;AAAA,MAAA;AAAA,MAEf,OAAO;AAAA,QACL,eAAe;AAAA,QACf,UAAU;AAAA,MAAA;AAAA,IACZ;AAAA,EACF;AAAA,EAGF,YAAY;AAAA,IACV,MAAM;AAAA,IACN,aAAa;AAAA,IACb,QAAQ;AAAA,MACN,UAAU,CAAC;AAAA,QACT,MAAM,YAAY;AAAA,QAClB,MAAM;AAAA,QACN,KAAK,EAAE,UAAU,CAAC,KAAK,OAAO,SAAS,IAAI,EAAA;AAAA;AAAA,QAC3C,QAAQ,EAAE,UAAU,CAAC,gBAAgB,QAAQ,EAAA;AAAA,MAAE,CAChD;AAAA,MACD,aAAa;AAAA,MACb,UAAU;AAAA,QACR,wBAAwB;AAAA,QACxB,oBAAoB;AAAA,QACpB,aAAa;AAAA,MAAA;AAAA,IACf;AAAA,EACF;AAAA,EAGF,SAAS;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,QAAQ;AAAA,MACN,UAAU;AAAA,QACR;AAAA,UACE,MAAM,YAAY;AAAA,UAClB,MAAM;AAAA,UACN,KAAK,EAAE,UAAU,CAAC,OAAO,EAAA;AAAA,QAAE;AAAA,QAE7B;AAAA,UACE,MAAM,YAAY;AAAA,UAClB,MAAM;AAAA,UACN,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAA;AAAA,QAAE;AAAA,QAEjC;AAAA,UACE,MAAM,YAAY;AAAA,UAClB,MAAM;AAAA,UACN,KAAK,EAAE,UAAU,CAAC,OAAO,EAAA;AAAA,UACzB,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAA;AAAA,QAAE;AAAA,MACjC;AAAA,MAEF,aAAa;AAAA,MACb,UAAU;AAAA,QACR,wBAAwB;AAAA;AAAA,QACxB,aAAa;AAAA,MAAA;AAAA,MAEf,OAAO;AAAA,QACL,eAAe;AAAA;AAAA,MAAA;AAAA,IACjB;AAAA,EACF;AAEJ;AAKO,MAAM,gBAAgB,IAAI,kBAAA;AAK1B,MAAM,eAAe,cAAc,OAAO,KAAK,aAAa;AAC5D,MAAM,kBAAkB,cAAc,gBAAgB,KAAK,aAAa;AACxE,MAAM,qBAAqB,cAAc,mBAAmB,KAAK,aAAa;AAC9E,MAAM,yBAAyB,cAAc,uBAAuB,KAAK,aAAa;AACtF,MAAM,kBAAkB,cAAc,gBAAgB,KAAK,aAAa;AACxE,MAAM,yBAAyB,cAAc,iBAAiB,KAAK,aAAa;"}