{"version":3,"file":"index.js","sources":["../src/security/production-guard.ts","../src/state/state-manager.ts","../src/accounts/account-manager.ts","../src/wallet/unified-wallet.ts","../src/factory/wallet-factory.ts","../src/security/enhanced-production-guard.ts","../src/security/security-manager.ts","../src/security/index.ts"],"sourcesContent":["/**\n * Production environment security guard\n * Prevents wallet mock from being used in production environments\n */\n\nexport interface ProductionGuardConfig {\n  /** Enable production environment checks */\n  enableProductionChecks: boolean;\n  /** Custom production detection logic */\n  customProductionDetector?: () => boolean;\n  /** Allow override for specific use cases */\n  allowProductionOverride?: boolean;\n  /** Environment variable name to check for override */\n  overrideEnvVar?: string;\n}\n\nexport interface ProductionCheckResult {\n  /** Whether environment appears to be production */\n  isProduction: boolean;\n  /** Reasons why environment was flagged as production */\n  reasons: string[];\n  /** Whether override is active */\n  overrideActive: boolean;\n}\n\n/**\n * Production environment detector\n */\nexport class ProductionGuard {\n  private config: Required<ProductionGuardConfig>;\n\n  constructor(config: ProductionGuardConfig) {\n    this.config = {\n      enableProductionChecks: config.enableProductionChecks,\n      customProductionDetector: config.customProductionDetector || this.defaultProductionDetector.bind(this),\n      allowProductionOverride: config.allowProductionOverride ?? false,\n      overrideEnvVar: config.overrideEnvVar || 'WALLET_MOCK_ALLOW_PRODUCTION'\n    };\n  }\n\n  /**\n   * Check if current environment is production and validate if wallet mock should be allowed\n   */\n  checkEnvironment(): ProductionCheckResult {\n    const reasons: string[] = [];\n    let isProduction = false;\n\n    // Check if production checks are disabled\n    if (!this.config.enableProductionChecks) {\n      return {\n        isProduction: false,\n        reasons: ['Production checks disabled'],\n        overrideActive: false\n      };\n    }\n\n    // Check for environment override\n    const overrideActive = this.isOverrideActive();\n    if (overrideActive && this.config.allowProductionOverride) {\n      return {\n        isProduction: false,\n        reasons: ['Production environment detected but override active'],\n        overrideActive: true\n      };\n    }\n\n    // Run production detection\n    try {\n      isProduction = this.config.customProductionDetector();\n      if (isProduction) {\n        reasons.push('Custom production detector flagged environment');\n      }\n    } catch (error) {\n      reasons.push(`Error in custom production detector: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    // Run default production checks\n    const defaultResult = this.runDefaultChecks();\n    if (defaultResult.isProduction) {\n      isProduction = true;\n      reasons.push(...defaultResult.reasons);\n    }\n\n    return {\n      isProduction,\n      reasons,\n      overrideActive\n    };\n  }\n\n  /**\n   * Validate environment and throw if production environment detected without override\n   */\n  validateEnvironment(): void {\n    const result = this.checkEnvironment();\n\n    if (result.isProduction && !result.overrideActive) {\n      const reasonsStr = result.reasons.join(', ');\n      throw new Error(\n        `Wallet mock detected production environment and cannot be used for security reasons. ` +\n        `Reasons: ${reasonsStr}. ` +\n        `To override this check (NOT RECOMMENDED), set ${this.config.overrideEnvVar}=true`\n      );\n    }\n  }\n\n  /**\n   * Default production environment detection logic\n   */\n  private defaultProductionDetector(): boolean {\n    const checks = this.runDefaultChecks();\n    return checks.isProduction;\n  }\n\n  /**\n   * Run default production environment checks\n   */\n  private runDefaultChecks(): { isProduction: boolean; reasons: string[] } {\n    const reasons: string[] = [];\n    let isProduction = false;\n\n    // Check NODE_ENV\n    if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'production') {\n      isProduction = true;\n      reasons.push('NODE_ENV is set to production');\n    }\n\n    // Check for common production environment variables\n    if (typeof process !== 'undefined' && process.env) {\n      const prodEnvVars = [\n        'VERCEL',\n        'NETLIFY',\n        'AWS_LAMBDA_FUNCTION_NAME',\n        'HEROKU_APP_NAME',\n        'RAILWAY_ENVIRONMENT',\n        'RENDER'\n      ];\n\n      for (const envVar of prodEnvVars) {\n        if (process.env[envVar]) {\n          isProduction = true;\n          reasons.push(`Production platform detected: ${envVar}`);\n        }\n      }\n    }\n\n    // Check for production-like hostnames in browser\n    if (typeof window !== 'undefined' && window.location) {\n      const hostname = window.location.hostname;\n      const prodPatterns = [\n        /^(?!localhost)(?!127\\.0\\.0\\.1)(?!192\\.168\\.)(?!10\\.)(?!172\\.(1[6-9]|2\\d|3[01])\\.).*$/,\n        /\\.(com|org|net|io|co|app)$/\n      ];\n\n      for (const pattern of prodPatterns) {\n        if (pattern.test(hostname)) {\n          isProduction = true;\n          reasons.push(`Production hostname detected: ${hostname}`);\n          break;\n        }\n      }\n    }\n\n    // Check for HTTPS in production-like contexts\n    if (typeof window !== 'undefined' && window.location?.protocol === 'https:') {\n      const hostname = window.location.hostname;\n      if (hostname !== 'localhost' && !hostname.startsWith('192.168.') && !hostname.startsWith('10.')) {\n        isProduction = true;\n        reasons.push('HTTPS detected on non-local domain');\n      }\n    }\n\n    return { isProduction, reasons };\n  }\n\n  /**\n   * Check if production override is active\n   */\n  private isOverrideActive(): boolean {\n    if (!this.config.allowProductionOverride) {\n      return false;\n    }\n\n    // Check environment variable\n    if (typeof process !== 'undefined' && process.env?.[this.config.overrideEnvVar] === 'true') {\n      return true;\n    }\n\n    // Check localStorage in browser (for development)\n    if (typeof window !== 'undefined' && window.localStorage) {\n      try {\n        return window.localStorage.getItem(this.config.overrideEnvVar) === 'true';\n      } catch {\n        // localStorage access can fail in some contexts\n        return false;\n      }\n    }\n\n    return false;\n  }\n}\n\n/**\n * Create a default production guard instance\n */\nexport function createProductionGuard(config: Partial<ProductionGuardConfig> = {}): ProductionGuard {\n  return new ProductionGuard({\n    enableProductionChecks: config.enableProductionChecks ?? true,\n    customProductionDetector: config.customProductionDetector,\n    allowProductionOverride: config.allowProductionOverride ?? false,\n    overrideEnvVar: config.overrideEnvVar\n  });\n}","import type {\n  WalletState,\n  WalletConfig,\n  EventEmitter,\n  Account,\n  SupportedChain\n} from '@arenaentertainment/wallet-mock-shared';\n\n/**\n * State change event handler type\n */\nexport type StateChangeHandler = (state: WalletState) => void;\n\n/**\n * State manager configuration\n */\nexport interface StateManagerConfig {\n  /** Initial state */\n  initialState?: Partial<WalletState>;\n  /** Enable state persistence */\n  enablePersistence?: boolean;\n  /** Storage key for persisted state */\n  storageKey?: string;\n  /** State validation function */\n  stateValidator?: (state: WalletState) => boolean;\n  /** Auto-save delay in milliseconds */\n  autoSaveDelay?: number;\n}\n\n/**\n * State manager for wallet state management and persistence\n */\nexport class StateManager {\n  private state: WalletState;\n  private config: Required<StateManagerConfig>;\n  private listeners: Set<StateChangeHandler> = new Set();\n  private saveTimeout?: ReturnType<typeof setTimeout>;\n\n  constructor(config: StateManagerConfig = {}) {\n    this.config = {\n      initialState: config.initialState || {},\n      enablePersistence: config.enablePersistence ?? false,\n      storageKey: config.storageKey || 'wallet-mock-state',\n      stateValidator: config.stateValidator || this.defaultStateValidator,\n      autoSaveDelay: config.autoSaveDelay ?? 500\n    };\n\n    // Initialize state\n    this.state = this.createInitialState();\n\n    // Load persisted state if enabled\n    if (this.config.enablePersistence) {\n      this.loadPersistedState();\n    }\n  }\n\n  /**\n   * Get current wallet state\n   */\n  getState(): WalletState {\n    return { ...this.state }; // Return a copy to prevent external mutations\n  }\n\n  /**\n   * Update wallet state\n   */\n  updateState(updates: Partial<WalletState>): void {\n    const newState = { ...this.state, ...updates };\n\n    // Validate new state\n    if (!this.config.stateValidator(newState)) {\n      throw new Error('Invalid state update');\n    }\n\n    const oldState = this.state;\n    this.state = newState;\n\n    // Emit state change event\n    this.notifyListeners(this.state);\n\n    // Schedule persistence if enabled\n    if (this.config.enablePersistence) {\n      this.schedulePersistence();\n    }\n  }\n\n  /**\n   * Update specific state property\n   */\n  updateStateProperty<K extends keyof WalletState>(\n    key: K,\n    value: WalletState[K]\n  ): void {\n    this.updateState({ [key]: value } as Partial<WalletState>);\n  }\n\n  /**\n   * Reset state to initial values\n   */\n  resetState(): void {\n    this.state = this.createInitialState();\n    this.notifyListeners(this.state);\n\n    if (this.config.enablePersistence) {\n      this.clearPersistedState();\n    }\n  }\n\n  /**\n   * Add state change listener\n   */\n  addStateChangeListener(handler: StateChangeHandler): void {\n    this.listeners.add(handler);\n  }\n\n  /**\n   * Remove state change listener\n   */\n  removeStateChangeListener(handler: StateChangeHandler): void {\n    this.listeners.delete(handler);\n  }\n\n  /**\n   * Remove all state change listeners\n   */\n  removeAllStateChangeListeners(): void {\n    this.listeners.clear();\n  }\n\n  /**\n   * Account management methods\n   */\n  addAccount(account: Account): void {\n    const accounts: Account[] = [...this.state.accounts, account];\n\n    // Set as active if it's the first account\n    const activeAccountIndex = this.state.accounts.length === 0 ? 0 : this.state.activeAccountIndex;\n    const activeAccount: Account | null = activeAccountIndex === accounts.length - 1 ? account : this.state.activeAccount;\n\n    this.updateState({\n      accounts,\n      activeAccountIndex,\n      activeAccount\n    });\n  }\n\n  removeAccount(accountId: string): void {\n    const accountIndex = this.state.accounts.findIndex(account => account.id === accountId);\n    if (accountIndex === -1) {\n      throw new Error(`Account with id ${accountId} not found`);\n    }\n\n    const accounts: Account[] = this.state.accounts.filter((account: Account) => account.id !== accountId);\n    let activeAccountIndex = this.state.activeAccountIndex;\n    let activeAccount = this.state.activeAccount;\n\n    // Adjust active account index if necessary\n    if (accountIndex === this.state.activeAccountIndex) {\n      // Active account was removed\n      if (accounts.length === 0) {\n        activeAccountIndex = 0;\n        activeAccount = null;\n      } else {\n        activeAccountIndex = Math.min(activeAccountIndex, accounts.length - 1);\n        activeAccount = accounts[activeAccountIndex];\n      }\n    } else if (accountIndex < this.state.activeAccountIndex) {\n      // Account before active account was removed\n      activeAccountIndex = this.state.activeAccountIndex - 1;\n    }\n\n    this.updateState({\n      accounts,\n      activeAccountIndex,\n      activeAccount\n    });\n  }\n\n  switchAccount(accountIndex: number): void {\n    if (accountIndex < 0 || accountIndex >= this.state.accounts.length) {\n      throw new Error(`Invalid account index: ${accountIndex}`);\n    }\n\n    const activeAccount = this.state.accounts[accountIndex];\n    this.updateState({\n      activeAccountIndex: accountIndex,\n      activeAccount\n    });\n  }\n\n  /**\n   * Chain management methods\n   */\n  addChain(chain: SupportedChain): void {\n    const chains = {\n      ...this.state.chains,\n      [chain.id]: chain\n    };\n\n    const updates: Partial<WalletState> = { chains };\n\n    // Set as active chain if none exists for this type\n    if (chain.type === 'evm' && !this.state.activeChains.evm) {\n      updates.activeChains = {\n        ...this.state.activeChains,\n        evm: chain\n      };\n    } else if (chain.type === 'solana' && !this.state.activeChains.solana) {\n      updates.activeChains = {\n        ...this.state.activeChains,\n        solana: chain\n      };\n    }\n\n    this.updateState(updates);\n  }\n\n  removeChain(chainId: string): void {\n    const { [chainId]: removedChain, ...chains } = this.state.chains;\n\n    if (!removedChain) {\n      throw new Error(`Chain with id ${chainId} not found`);\n    }\n\n    const updates: Partial<WalletState> = { chains };\n\n    // Update active chain if the removed chain was active\n    if (this.state.activeChains.evm?.id === chainId) {\n      const alternativeChain = Object.values(chains).find((chain: SupportedChain) => chain.type === 'evm');\n      updates.activeChains = {\n        ...this.state.activeChains,\n        evm: alternativeChain\n      };\n    }\n\n    if (this.state.activeChains.solana?.id === chainId) {\n      const alternativeChain = Object.values(chains).find((chain: SupportedChain) => chain.type === 'solana');\n      updates.activeChains = {\n        ...this.state.activeChains,\n        solana: alternativeChain\n      };\n    }\n\n    this.updateState(updates);\n  }\n\n  switchChain(chainId: string): void {\n    const chain = this.state.chains[chainId];\n    if (!chain) {\n      throw new Error(`Chain with id ${chainId} not found`);\n    }\n\n    const activeChains = {\n      ...this.state.activeChains,\n      [chain.type]: chain\n    };\n\n    this.updateState({ activeChains });\n  }\n\n  /**\n   * Connection state management\n   */\n  setConnected(isConnected: boolean): void {\n    this.updateState({ isConnected });\n  }\n\n  setLocked(isLocked: boolean): void {\n    this.updateState({ isLocked });\n  }\n\n  setInitialized(isInitialized: boolean): void {\n    this.updateState({ isInitialized });\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    // Cancel pending saves\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    // Clear listeners\n    this.removeAllStateChangeListeners();\n\n    // Clear persisted state if enabled\n    if (this.config.enablePersistence) {\n      this.clearPersistedState();\n    }\n  }\n\n  /**\n   * Create initial state\n   */\n  private createInitialState(): WalletState {\n    const defaultState: WalletState = {\n      accounts: [],\n      activeAccountIndex: 0,\n      activeAccount: null,\n      chains: {},\n      activeChains: {},\n      isConnected: false,\n      isLocked: false,\n      isInitialized: false\n    };\n\n    return {\n      ...defaultState,\n      ...this.config.initialState\n    };\n  }\n\n  /**\n   * Default state validator\n   */\n  private defaultStateValidator(state: WalletState): boolean {\n    try {\n      // Check required properties exist\n      if (typeof state.accounts === 'undefined' ||\n          typeof state.activeAccountIndex !== 'number' ||\n          typeof state.chains === 'undefined' ||\n          typeof state.activeChains === 'undefined' ||\n          typeof state.isConnected !== 'boolean' ||\n          typeof state.isLocked !== 'boolean' ||\n          typeof state.isInitialized !== 'boolean') {\n        return false;\n      }\n\n      // Check arrays are valid\n      if (!Array.isArray(state.accounts)) {\n        return false;\n      }\n\n      // Check active account index is valid\n      if (state.activeAccountIndex < 0 ||\n          (state.accounts.length > 0 && state.activeAccountIndex >= state.accounts.length)) {\n        return false;\n      }\n\n      // Check active account consistency\n      if (state.accounts.length === 0 && state.activeAccount !== null) {\n        return false;\n      }\n\n      if (state.accounts.length > 0) {\n        const expectedActiveAccount = state.accounts[state.activeAccountIndex];\n        if (state.activeAccount?.id !== expectedActiveAccount?.id) {\n          return false;\n        }\n      }\n\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Notify all state change listeners\n   */\n  private notifyListeners(state: WalletState): void {\n    for (const listener of this.listeners) {\n      try {\n        listener(state);\n      } catch (error) {\n        console.error('Error in state change listener:', error);\n      }\n    }\n  }\n\n  /**\n   * Load persisted state from storage\n   */\n  private loadPersistedState(): void {\n    try {\n      if (typeof window !== 'undefined' && window.localStorage) {\n        const persistedState = localStorage.getItem(this.config.storageKey);\n        if (persistedState) {\n          const parsedState = JSON.parse(persistedState);\n          if (this.config.stateValidator(parsedState)) {\n            this.state = parsedState;\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to load persisted state:', error);\n    }\n  }\n\n  /**\n   * Schedule state persistence\n   */\n  private schedulePersistence(): void {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n\n    this.saveTimeout = setTimeout(() => {\n      this.persistState();\n    }, this.config.autoSaveDelay);\n  }\n\n  /**\n   * Persist current state to storage\n   */\n  private persistState(): void {\n    try {\n      if (typeof window !== 'undefined' && window.localStorage) {\n        localStorage.setItem(this.config.storageKey, JSON.stringify(this.state));\n      }\n    } catch (error) {\n      console.warn('Failed to persist state:', error);\n    }\n  }\n\n  /**\n   * Clear persisted state from storage\n   */\n  private clearPersistedState(): void {\n    try {\n      if (typeof window !== 'undefined' && window.localStorage) {\n        localStorage.removeItem(this.config.storageKey);\n      }\n    } catch (error) {\n      console.warn('Failed to clear persisted state:', error);\n    }\n  }\n}","import type {\n  Account,\n  AccountConfig,\n  EVMAccount,\n  SolanaAccount,\n  DualChainAccount,\n  EventEmitter,\n  WalletEvents\n} from '@arenaentertainment/wallet-mock-shared';\nimport { AccountType } from '@arenaentertainment/wallet-mock-shared';\nimport { generateRandomHex, generateRandomBytes } from '@arenaentertainment/wallet-mock-shared';\n\n/**\n * Account manager configuration\n */\nexport interface AccountManagerConfig {\n  /** Maximum number of accounts allowed */\n  maxAccounts?: number;\n  /** Enable automatic key generation */\n  enableKeyGeneration?: boolean;\n  /** Default account name prefix */\n  defaultNamePrefix?: string;\n  /** Custom account ID generator */\n  accountIdGenerator?: () => string;\n}\n\n/**\n * Account creation result\n */\nexport interface AccountCreationResult {\n  /** Created account */\n  account: Account;\n  /** Generated private keys (if any) */\n  generatedKeys?: {\n    evm?: string;\n    solana?: Uint8Array;\n  };\n}\n\n/**\n * Account manager for handling multi-chain account operations\n */\nexport class AccountManager {\n  private accounts: Map<string, Account> = new Map();\n  private config: Required<AccountManagerConfig>;\n  private eventEmitter?: EventEmitter<WalletEvents>;\n\n  constructor(config: AccountManagerConfig = {}, eventEmitter?: EventEmitter<WalletEvents>) {\n    this.config = {\n      maxAccounts: config.maxAccounts ?? 10,\n      enableKeyGeneration: config.enableKeyGeneration ?? true,\n      defaultNamePrefix: config.defaultNamePrefix || 'Account',\n      accountIdGenerator: config.accountIdGenerator || this.defaultAccountIdGenerator\n    };\n    this.eventEmitter = eventEmitter;\n  }\n\n  /**\n   * Create a new account\n   */\n  async createAccount(accountConfig: AccountConfig): Promise<AccountCreationResult> {\n    // Check account limit\n    if (this.accounts.size >= this.config.maxAccounts) {\n      throw new Error(`Maximum number of accounts reached: ${this.config.maxAccounts}`);\n    }\n\n    // Validate account configuration\n    this.validateAccountConfig(accountConfig);\n\n    // Generate account ID\n    const accountId = this.config.accountIdGenerator();\n\n    // Ensure unique account ID\n    if (this.accounts.has(accountId)) {\n      throw new Error(`Account ID already exists: ${accountId}`);\n    }\n\n    // Generate account name if not provided\n    const accountName = accountConfig.name || `${this.config.defaultNamePrefix} ${this.accounts.size + 1}`;\n\n    const generatedKeys: { evm?: string; solana?: Uint8Array } = {};\n    let account: Account;\n\n    switch (accountConfig.type) {\n      case AccountType.EVM_ONLY:\n        account = await this.createEVMAccount(accountId, accountName, accountConfig, generatedKeys);\n        break;\n      case AccountType.SOLANA_ONLY:\n        account = await this.createSolanaAccount(accountId, accountName, accountConfig, generatedKeys);\n        break;\n      case AccountType.DUAL_CHAIN:\n        account = await this.createDualChainAccount(accountId, accountName, accountConfig, generatedKeys);\n        break;\n      default:\n        throw new Error(`Unsupported account type: ${accountConfig.type}`);\n    }\n\n    // Store account\n    this.accounts.set(accountId, account);\n\n    // Emit account added event\n    this.eventEmitter?.emit('accountAdded', account);\n\n    return {\n      account,\n      generatedKeys: Object.keys(generatedKeys).length > 0 ? generatedKeys : undefined\n    };\n  }\n\n  /**\n   * Remove an account\n   */\n  async removeAccount(accountId: string): Promise<void> {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      throw new Error(`Account not found: ${accountId}`);\n    }\n\n    // Remove account from storage\n    this.accounts.delete(accountId);\n\n    // Clear sensitive data\n    this.clearAccountData(account);\n\n    // Emit account removed event\n    this.eventEmitter?.emit('accountRemoved', accountId);\n  }\n\n  /**\n   * Get account by ID\n   */\n  getAccount(accountId: string): Account | null {\n    return this.accounts.get(accountId) || null;\n  }\n\n  /**\n   * Get all accounts\n   */\n  getAllAccounts(): Account[] {\n    return Array.from(this.accounts.values());\n  }\n\n  /**\n   * Get accounts by type\n   */\n  getAccountsByType(type: AccountType): Account[] {\n    return this.getAllAccounts().filter(account => account.type === type);\n  }\n\n  /**\n   * Get accounts supporting specific chain type\n   */\n  getAccountsByChainType(chainType: 'evm' | 'solana'): Account[] {\n    return this.getAllAccounts().filter(account => {\n      if (chainType === 'evm') {\n        return account.type === AccountType.EVM_ONLY || account.type === AccountType.DUAL_CHAIN;\n      } else {\n        return account.type === AccountType.SOLANA_ONLY || account.type === AccountType.DUAL_CHAIN;\n      }\n    });\n  }\n\n  /**\n   * Update account metadata\n   */\n  async updateAccount(accountId: string, updates: Partial<Pick<Account, 'name' | 'isActive'>>): Promise<Account> {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      throw new Error(`Account not found: ${accountId}`);\n    }\n\n    // Apply updates\n    const updatedAccount: Account = {\n      ...account,\n      ...updates\n    };\n\n    // Store updated account\n    this.accounts.set(accountId, updatedAccount);\n\n    // Emit account updated event\n    this.eventEmitter?.emit('accountUpdated', updatedAccount);\n\n    return updatedAccount;\n  }\n\n  /**\n   * Check if account exists\n   */\n  hasAccount(accountId: string): boolean {\n    return this.accounts.has(accountId);\n  }\n\n  /**\n   * Get account count\n   */\n  getAccountCount(): number {\n    return this.accounts.size;\n  }\n\n  /**\n   * Get EVM address for account\n   */\n  getEVMAddress(accountId: string): string | null {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      return null;\n    }\n\n    if (account.type === AccountType.EVM_ONLY || account.type === AccountType.DUAL_CHAIN) {\n      return account.evm.address;\n    }\n\n    return null;\n  }\n\n  /**\n   * Get Solana public key for account\n   */\n  getSolanaPublicKey(accountId: string): string | null {\n    const account = this.accounts.get(accountId);\n    if (!account) {\n      return null;\n    }\n\n    if (account.type === AccountType.SOLANA_ONLY || account.type === AccountType.DUAL_CHAIN) {\n      return account.solana.publicKey;\n    }\n\n    return null;\n  }\n\n  /**\n   * Clear all accounts and sensitive data\n   */\n  async clearAllAccounts(): Promise<void> {\n    for (const account of this.accounts.values()) {\n      this.clearAccountData(account);\n    }\n\n    this.accounts.clear();\n  }\n\n  /**\n   * Create EVM-only account\n   */\n  private async createEVMAccount(\n    accountId: string,\n    accountName: string,\n    config: AccountConfig,\n    generatedKeys: { evm?: string; solana?: Uint8Array }\n  ): Promise<EVMAccount> {\n    if (!config.evm) {\n      throw new Error('EVM configuration required for EVM account');\n    }\n\n    let privateKey: string = config.evm.privateKey || '';\n\n    // Generate private key if not provided\n    if (!privateKey) {\n      if (!this.config.enableKeyGeneration) {\n        throw new Error('Key generation is disabled and no private key provided');\n      }\n      privateKey = generateRandomHex(32);\n      generatedKeys.evm = privateKey;\n    }\n\n    // Derive address from private key (simplified - in real implementation would use proper crypto)\n    const address = this.deriveEVMAddress(privateKey);\n\n    return {\n      id: accountId,\n      name: accountName,\n      type: AccountType.EVM_ONLY,\n      isActive: false,\n      createdAt: Date.now(),\n      evm: {\n        privateKey,\n        address,\n        chainIds: config.evm.chainIds\n      }\n    };\n  }\n\n  /**\n   * Create Solana-only account\n   */\n  private async createSolanaAccount(\n    accountId: string,\n    accountName: string,\n    config: AccountConfig,\n    generatedKeys: { evm?: string; solana?: Uint8Array }\n  ): Promise<SolanaAccount> {\n    if (!config.solana) {\n      throw new Error('Solana configuration required for Solana account');\n    }\n\n    let secretKey: Uint8Array | undefined = config.solana.secretKey;\n\n    // Generate secret key if not provided\n    if (!secretKey) {\n      if (!this.config.enableKeyGeneration) {\n        throw new Error('Key generation is disabled and no secret key provided');\n      }\n      secretKey = generateRandomBytes(64);\n      generatedKeys.solana = secretKey;\n    }\n\n    // At this point secretKey is guaranteed to exist\n    const finalSecretKey: Uint8Array = secretKey!;\n\n    // Derive public key from secret key (simplified - in real implementation would use proper crypto)\n    const publicKey = this.deriveSolanaPublicKey(finalSecretKey);\n\n    return {\n      id: accountId,\n      name: accountName,\n      type: AccountType.SOLANA_ONLY,\n      isActive: false,\n      createdAt: Date.now(),\n      solana: {\n        secretKey: finalSecretKey,\n        publicKey,\n        clusters: config.solana.clusters\n      }\n    };\n  }\n\n  /**\n   * Create dual-chain account\n   */\n  private async createDualChainAccount(\n    accountId: string,\n    accountName: string,\n    config: AccountConfig,\n    generatedKeys: { evm?: string; solana?: Uint8Array }\n  ): Promise<DualChainAccount> {\n    if (!config.evm || !config.solana) {\n      throw new Error('Both EVM and Solana configurations required for dual-chain account');\n    }\n\n    let evmPrivateKey: string = config.evm.privateKey || '';\n    let solanaSecretKey: Uint8Array | undefined = config.solana.secretKey;\n\n    // Generate keys if not provided\n    if (!evmPrivateKey) {\n      if (!this.config.enableKeyGeneration) {\n        throw new Error('Key generation is disabled and no EVM private key provided');\n      }\n      evmPrivateKey = generateRandomHex(32);\n      generatedKeys.evm = evmPrivateKey;\n    }\n\n    if (!solanaSecretKey) {\n      if (!this.config.enableKeyGeneration) {\n        throw new Error('Key generation is disabled and no Solana secret key provided');\n      }\n      solanaSecretKey = generateRandomBytes(64);\n      generatedKeys.solana = solanaSecretKey;\n    }\n\n    // At this point both keys are guaranteed to exist\n    const finalSolanaSecretKey: Uint8Array = solanaSecretKey!;\n\n    // Derive addresses\n    const evmAddress = this.deriveEVMAddress(evmPrivateKey);\n    const solanaPublicKey = this.deriveSolanaPublicKey(finalSolanaSecretKey);\n\n    return {\n      id: accountId,\n      name: accountName,\n      type: AccountType.DUAL_CHAIN,\n      isActive: false,\n      createdAt: Date.now(),\n      evm: {\n        privateKey: evmPrivateKey,\n        address: evmAddress,\n        chainIds: config.evm.chainIds\n      },\n      solana: {\n        secretKey: finalSolanaSecretKey,\n        publicKey: solanaPublicKey,\n        clusters: config.solana.clusters\n      }\n    };\n  }\n\n  /**\n   * Validate account configuration\n   */\n  private validateAccountConfig(config: AccountConfig): void {\n    if (!Object.values(AccountType).includes(config.type)) {\n      throw new Error(`Invalid account type: ${config.type}`);\n    }\n\n    switch (config.type) {\n      case AccountType.EVM_ONLY:\n        if (!config.evm) {\n          throw new Error('EVM configuration required for EVM account');\n        }\n        if (!config.evm.chainIds || config.evm.chainIds.length === 0) {\n          throw new Error('At least one chain ID required for EVM account');\n        }\n        break;\n\n      case AccountType.SOLANA_ONLY:\n        if (!config.solana) {\n          throw new Error('Solana configuration required for Solana account');\n        }\n        if (!config.solana.clusters || config.solana.clusters.length === 0) {\n          throw new Error('At least one cluster required for Solana account');\n        }\n        break;\n\n      case AccountType.DUAL_CHAIN:\n        if (!config.evm || !config.solana) {\n          throw new Error('Both EVM and Solana configurations required for dual-chain account');\n        }\n        if (!config.evm.chainIds || config.evm.chainIds.length === 0) {\n          throw new Error('At least one chain ID required for dual-chain account');\n        }\n        if (!config.solana.clusters || config.solana.clusters.length === 0) {\n          throw new Error('At least one cluster required for dual-chain account');\n        }\n        break;\n    }\n  }\n\n  /**\n   * Clear sensitive account data\n   */\n  private clearAccountData(account: Account): void {\n    try {\n      if (account.type === AccountType.EVM_ONLY || account.type === AccountType.DUAL_CHAIN) {\n        // Clear EVM private key\n        if (account.evm.privateKey) {\n          (account.evm as any).privateKey = '0'.repeat(account.evm.privateKey.length);\n        }\n      }\n\n      if (account.type === AccountType.SOLANA_ONLY || account.type === AccountType.DUAL_CHAIN) {\n        // Clear Solana secret key\n        if (account.solana.secretKey) {\n          account.solana.secretKey.fill(0);\n        }\n      }\n    } catch (error) {\n      console.warn('Error clearing account data:', error);\n    }\n  }\n\n  /**\n   * Generate default account ID\n   */\n  private defaultAccountIdGenerator(): string {\n    return `account-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Derive EVM address from private key (simplified implementation)\n   */\n  private deriveEVMAddress(privateKey: string): string {\n    // In a real implementation, this would use proper cryptographic functions\n    // This is a simplified mock implementation\n    const hash = this.simpleHash(privateKey);\n    return `0x${hash.slice(0, 40)}`;\n  }\n\n  /**\n   * Derive Solana public key from secret key (simplified implementation)\n   */\n  private deriveSolanaPublicKey(secretKey: Uint8Array): string {\n    // In a real implementation, this would use proper ed25519 key derivation\n    // This is a simplified mock implementation\n    const hash = this.simpleHash(Array.from(secretKey).map(b => b.toString(16).padStart(2, '0')).join(''));\n    return hash.slice(0, 44);\n  }\n\n  /**\n   * Simple hash function for mock key derivation\n   */\n  private simpleHash(input: string): string {\n    let hash = 0;\n    for (let i = 0; i < input.length; i++) {\n      const char = input.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash).toString(16).padStart(64, '0');\n  }\n}","import type {\n  MockWallet,\n  WalletState,\n  WalletConfig,\n  WalletEvents,\n  Account,\n  AccountConfig,\n  SupportedChain,\n  EventEmitter\n} from '@arenaentertainment/wallet-mock-shared';\nimport {\n  MockEthereumProvider,\n  type EthereumProvider\n} from '@arenaentertainment/wallet-mock-standards';\nimport {\n  MockSolanaWallet,\n  type SolanaWallet\n} from '@arenaentertainment/wallet-mock-standards';\n\nimport { ProductionGuard, type ProductionGuardConfig } from '../security/production-guard.js';\nimport { StateManager, type StateManagerConfig } from '../state/state-manager.js';\nimport { AccountManager, type AccountManagerConfig } from '../accounts/account-manager.js';\n\n/**\n * Event emitter implementation for the wallet\n */\nclass WalletEventEmitter implements EventEmitter<WalletEvents> {\n  private listeners: Map<keyof WalletEvents, Set<Function>> = new Map();\n\n  on<K extends keyof WalletEvents>(event: K, listener: WalletEvents[K]): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    this.listeners.get(event)!.add(listener);\n  }\n\n  off<K extends keyof WalletEvents>(event: K, listener: WalletEvents[K]): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.delete(listener);\n      if (eventListeners.size === 0) {\n        this.listeners.delete(event);\n      }\n    }\n  }\n\n  once<K extends keyof WalletEvents>(event: K, listener: WalletEvents[K]): void {\n    const onceWrapper = (...args: Parameters<WalletEvents[K]>) => {\n      this.off(event, onceWrapper as WalletEvents[K]);\n      (listener as any)(...args);\n    };\n    this.on(event, onceWrapper as WalletEvents[K]);\n  }\n\n  emit<K extends keyof WalletEvents>(event: K, ...args: Parameters<WalletEvents[K]>): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      for (const listener of eventListeners) {\n        try {\n          (listener as any)(...args);\n        } catch (error) {\n          console.error(`Error in event listener for ${String(event)}:`, error);\n          this.emit('error', error instanceof Error ? error : new Error(String(error)));\n        }\n      }\n    }\n  }\n\n  removeAllListeners<K extends keyof WalletEvents>(event?: K): void {\n    if (event) {\n      this.listeners.delete(event);\n    } else {\n      this.listeners.clear();\n    }\n  }\n}\n\n/**\n * Unified multi-chain wallet implementation\n */\nexport class UnifiedWallet implements MockWallet {\n  private eventEmitter: WalletEventEmitter;\n  private productionGuard: ProductionGuard;\n  private stateManager: StateManager;\n  private accountManager: AccountManager;\n  private ethereumProvider?: MockEthereumProvider;\n  private solanaWallet?: MockSolanaWallet;\n  private config: WalletConfig;\n  private isDestroyed = false;\n\n  constructor(config: WalletConfig = {}) {\n    this.config = config;\n    this.eventEmitter = new WalletEventEmitter();\n\n    // Initialize production guard\n    this.productionGuard = new ProductionGuard({\n      enableProductionChecks: config.security?.enableProductionChecks ?? true,\n      allowProductionOverride: false, // Never allow production override for security\n      overrideEnvVar: 'WALLET_MOCK_ALLOW_PRODUCTION'\n    });\n\n    // Validate environment before proceeding\n    this.productionGuard.validateEnvironment();\n\n    // Initialize state manager\n    this.stateManager = new StateManager({\n      enablePersistence: false, // Disable persistence for security\n      stateValidator: this.validateWalletState.bind(this)\n    });\n\n    // Initialize account manager\n    this.accountManager = new AccountManager({\n      maxAccounts: 10,\n      enableKeyGeneration: true,\n      defaultNamePrefix: 'Account'\n    }, this.eventEmitter);\n\n    // Set up state change listeners\n    this.stateManager.addStateChangeListener(this.handleStateChange.bind(this));\n\n    // Set up cleanup on page unload\n    if (config.security?.autoCleanup !== false && typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', this.handlePageUnload.bind(this));\n      window.addEventListener('unload', this.handlePageUnload.bind(this));\n    }\n\n    // Initialize with default configuration\n    this.initialize();\n  }\n\n  // Event emitter implementation\n  on<K extends keyof WalletEvents>(event: K, listener: WalletEvents[K]): void {\n    this.eventEmitter.on(event, listener);\n  }\n\n  off<K extends keyof WalletEvents>(event: K, listener: WalletEvents[K]): void {\n    this.eventEmitter.off(event, listener);\n  }\n\n  once<K extends keyof WalletEvents>(event: K, listener: WalletEvents[K]): void {\n    this.eventEmitter.once(event, listener);\n  }\n\n  emit<K extends keyof WalletEvents>(event: K, ...args: Parameters<WalletEvents[K]>): void {\n    this.eventEmitter.emit(event, ...args);\n  }\n\n  removeAllListeners<K extends keyof WalletEvents>(event?: K): void {\n    this.eventEmitter.removeAllListeners(event);\n  }\n\n  // State management\n  getState(): WalletState {\n    this.ensureNotDestroyed();\n    return this.stateManager.getState();\n  }\n\n  isConnected(): boolean {\n    this.ensureNotDestroyed();\n    return this.stateManager.getState().isConnected;\n  }\n\n  isLocked(): boolean {\n    this.ensureNotDestroyed();\n    return this.stateManager.getState().isLocked;\n  }\n\n  // Account management\n  async addAccount(config: AccountConfig): Promise<string> {\n    this.ensureNotDestroyed();\n\n    try {\n      const result = await this.accountManager.createAccount(config);\n      this.stateManager.addAccount(result.account);\n\n      // Update provider accounts if necessary\n      await this.updateProviderAccounts();\n\n      return result.account.id;\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  async removeAccount(accountId: string): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      await this.accountManager.removeAccount(accountId);\n      this.stateManager.removeAccount(accountId);\n\n      // Update provider accounts if necessary\n      await this.updateProviderAccounts();\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  async switchAccount(accountIndex: number): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      this.stateManager.switchAccount(accountIndex);\n\n      // Update provider accounts if necessary\n      await this.updateProviderAccounts();\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  getAccounts(): Account[] {\n    this.ensureNotDestroyed();\n    return this.stateManager.getState().accounts;\n  }\n\n  getActiveAccount(): Account | null {\n    this.ensureNotDestroyed();\n    return this.stateManager.getState().activeAccount;\n  }\n\n  // Chain management\n  async addChain(chain: SupportedChain): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      this.stateManager.addChain(chain);\n\n      // Initialize or update providers if necessary\n      if (chain.type === 'evm') {\n        await this.initializeEthereumProvider();\n      } else if (chain.type === 'solana') {\n        await this.initializeSolanaWallet();\n      }\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  async switchChain(chainId: string): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      this.stateManager.switchChain(chainId);\n\n      // Notify providers of chain change\n      const chain = this.stateManager.getState().chains[chainId];\n      if (chain) {\n        this.eventEmitter.emit('chainChanged', chain);\n\n        if (chain.type === 'evm' && this.ethereumProvider) {\n          // Update Ethereum provider chain\n          await this.updateEthereumProviderChain(chain);\n        }\n      }\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  getChains(): Record<string, SupportedChain> {\n    this.ensureNotDestroyed();\n    return this.stateManager.getState().chains;\n  }\n\n  getActiveChain(type: 'evm' | 'solana'): SupportedChain | null {\n    this.ensureNotDestroyed();\n    const state = this.stateManager.getState();\n    return state.activeChains[type] || null;\n  }\n\n  // Connection management\n  async connect(): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      // Ensure we have at least one account\n      if (this.getAccounts().length === 0) {\n        throw new Error('No accounts available. Add an account before connecting.');\n      }\n\n      // Initialize providers\n      await this.initializeProviders();\n\n      // Update connection state\n      this.stateManager.setConnected(true);\n      this.eventEmitter.emit('connect');\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      // Disconnect providers\n      if (this.ethereumProvider) {\n        // Ethereum provider doesn't have explicit disconnect in EIP-1193\n        this.ethereumProvider = undefined;\n      }\n\n      if (this.solanaWallet) {\n        try {\n          // Use the disconnect feature if available\n          const disconnectFeature = this.solanaWallet.features['standard:disconnect'];\n          if (disconnectFeature && 'disconnect' in disconnectFeature) {\n            await (disconnectFeature as any).disconnect();\n          }\n        } catch {\n          // Ignore disconnect errors\n        }\n        this.solanaWallet = undefined;\n      }\n\n      // Update connection state\n      this.stateManager.setConnected(false);\n      this.eventEmitter.emit('disconnect');\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  async lock(): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      // Disconnect first\n      await this.disconnect();\n\n      // Update lock state\n      this.stateManager.setLocked(true);\n      this.eventEmitter.emit('lock');\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  async unlock(): Promise<void> {\n    this.ensureNotDestroyed();\n\n    try {\n      // Update lock state\n      this.stateManager.setLocked(false);\n      this.eventEmitter.emit('unlock');\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n      throw err;\n    }\n  }\n\n  // Cleanup\n  async destroy(): Promise<void> {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    try {\n      // Disconnect from all chains\n      await this.disconnect();\n\n      // Clear all accounts\n      await this.accountManager.clearAllAccounts();\n\n      // Clean up state manager\n      this.stateManager.destroy();\n\n      // Remove all event listeners\n      this.eventEmitter.removeAllListeners();\n\n      // Remove page unload listeners\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('beforeunload', this.handlePageUnload.bind(this));\n        window.removeEventListener('unload', this.handlePageUnload.bind(this));\n      }\n\n      this.isDestroyed = true;\n    } catch (error) {\n      console.error('Error during wallet destruction:', error);\n    }\n  }\n\n  // Provider access methods\n  getEthereumProvider(): EthereumProvider | null {\n    this.ensureNotDestroyed();\n    return this.ethereumProvider || null;\n  }\n\n  getSolanaWallet(): SolanaWallet | null {\n    this.ensureNotDestroyed();\n    return this.solanaWallet || null;\n  }\n\n  // Private methods\n\n  private initialize(): void {\n    try {\n      // Initialize default chains if provided\n      if (this.config.accounts) {\n        // Process initial accounts asynchronously\n        Promise.all(\n          this.config.accounts.map((accountConfig: AccountConfig) => this.addAccount(accountConfig))\n        ).catch((error: Error) => {\n          this.eventEmitter.emit('error', error);\n        });\n      }\n\n      // Set default active account index\n      if (typeof this.config.defaultAccountIndex === 'number') {\n        this.stateManager.updateStateProperty('activeAccountIndex', this.config.defaultAccountIndex);\n      }\n\n      // Mark as initialized\n      this.stateManager.setInitialized(true);\n\n      // Auto-connect if enabled\n      if (this.config.autoConnect) {\n        this.connect().catch(error => {\n          this.eventEmitter.emit('error', error);\n        });\n      }\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(String(error));\n      this.eventEmitter.emit('error', err);\n    }\n  }\n\n  private async initializeProviders(): Promise<void> {\n    const state = this.stateManager.getState();\n\n    // Initialize Ethereum provider if we have EVM chains\n    if (state.activeChains.evm) {\n      await this.initializeEthereumProvider();\n    }\n\n    // Initialize Solana wallet if we have Solana chains\n    if (state.activeChains.solana) {\n      await this.initializeSolanaWallet();\n    }\n  }\n\n  private async initializeEthereumProvider(): Promise<void> {\n    if (!this.ethereumProvider) {\n      const evmAccounts = this.accountManager.getAccountsByChainType('evm');\n      const activeChain = this.getActiveChain('evm');\n\n      if (evmAccounts.length > 0 && activeChain && activeChain.type === 'evm') {\n        this.ethereumProvider = new MockEthereumProvider(activeChain.chainIdHex);\n\n        // Set accounts after initialization\n        const addresses = evmAccounts.map(account =>\n          account.type === 'evm_only' || account.type === 'dual_chain'\n            ? account.evm.address\n            : ''\n        ).filter(Boolean);\n\n        // MockEthereumProvider should have a method to set accounts\n        // For now, we'll access the private property (not ideal but works)\n        (this.ethereumProvider as any)._accounts = addresses;\n      }\n    }\n  }\n\n  private async initializeSolanaWallet(): Promise<void> {\n    if (!this.solanaWallet) {\n      const solanaAccounts = this.accountManager.getAccountsByChainType('solana');\n      const activeChain = this.getActiveChain('solana');\n\n      if (solanaAccounts.length > 0 && activeChain && activeChain.type === 'solana') {\n        this.solanaWallet = new MockSolanaWallet({\n          name: 'Mock Wallet',\n          chains: [activeChain.cluster] as any[]\n        });\n\n        // Add accounts after initialization\n        for (const account of solanaAccounts) {\n          if (account.type === 'solana_only' || account.type === 'dual_chain') {\n            const walletAccount = {\n              publicKey: account.solana.publicKey,\n              label: account.name || 'Account',\n              chains: [activeChain.cluster],\n              features: ['solana:signTransaction', 'solana:signMessage']\n            };\n            this.solanaWallet.addAccount(walletAccount as any);\n          }\n        }\n      }\n    }\n  }\n\n  private async updateProviderAccounts(): Promise<void> {\n    // Update Ethereum provider accounts\n    if (this.ethereumProvider) {\n      const evmAccounts = this.accountManager.getAccountsByChainType('evm');\n      const addresses = evmAccounts.map(account =>\n        account.type === 'evm_only' || account.type === 'dual_chain'\n          ? account.evm.address\n          : ''\n      ).filter(Boolean);\n\n      // Update provider with new accounts (would need provider method)\n      // this.ethereumProvider.updateAccounts(addresses);\n    }\n\n    // Update Solana wallet accounts\n    if (this.solanaWallet) {\n      // Similar update for Solana wallet\n    }\n  }\n\n  private async updateEthereumProviderChain(chain: SupportedChain): Promise<void> {\n    if (this.ethereumProvider && chain.type === 'evm') {\n      // Update provider chain (would need provider method)\n      // this.ethereumProvider.updateChain(chain.chainId);\n    }\n  }\n\n  private handleStateChange(state: WalletState): void {\n    this.eventEmitter.emit('stateChanged', state);\n  }\n\n  private handlePageUnload(): void {\n    // Perform immediate cleanup\n    this.destroy().catch(console.error);\n  }\n\n  private validateWalletState(state: WalletState): boolean {\n    try {\n      // Basic validation - ensure required properties exist\n      return (\n        Array.isArray(state.accounts) &&\n        typeof state.activeAccountIndex === 'number' &&\n        typeof state.chains === 'object' &&\n        typeof state.activeChains === 'object' &&\n        typeof state.isConnected === 'boolean' &&\n        typeof state.isLocked === 'boolean' &&\n        typeof state.isInitialized === 'boolean'\n      );\n    } catch {\n      return false;\n    }\n  }\n\n  private ensureNotDestroyed(): void {\n    if (this.isDestroyed) {\n      throw new Error('Wallet has been destroyed');\n    }\n  }\n}","import type {\n  MockWallet,\n  WalletFactory,\n  WalletConfig,\n  AccountConfig\n} from '@arenaentertainment/wallet-mock-shared';\nimport { AccountType } from '@arenaentertainment/wallet-mock-shared';\nimport { CHAIN_PRESETS } from '@arenaentertainment/wallet-mock-shared';\n\nimport { UnifiedWallet } from '../wallet/unified-wallet.js';\n\n/**\n * Preset wallet configurations for common use cases\n */\nexport interface WalletPreset {\n  name: string;\n  description: string;\n  config: WalletConfig;\n}\n\n/**\n * Builder pattern for wallet configuration\n */\nexport class WalletConfigBuilder {\n  private config: WalletConfig = {};\n\n  /**\n   * Set initial accounts\n   */\n  withAccounts(accounts: AccountConfig[]): WalletConfigBuilder {\n    this.config.accounts = accounts;\n    return this;\n  }\n\n  /**\n   * Add a single account\n   */\n  withAccount(account: AccountConfig): WalletConfigBuilder {\n    if (!this.config.accounts) {\n      this.config.accounts = [];\n    }\n    this.config.accounts.push(account);\n    return this;\n  }\n\n  /**\n   * Add EVM-only account\n   */\n  withEVMAccount(name?: string, chainIds: string[] = ['1', '137']): WalletConfigBuilder {\n    return this.withAccount({\n      type: AccountType.EVM_ONLY,\n      name,\n      evm: { chainIds }\n    });\n  }\n\n  /**\n   * Add Solana-only account\n   */\n  withSolanaAccount(name?: string, clusters: string[] = ['mainnet-beta', 'devnet']): WalletConfigBuilder {\n    return this.withAccount({\n      type: AccountType.SOLANA_ONLY,\n      name,\n      solana: { clusters }\n    });\n  }\n\n  /**\n   * Add dual-chain account\n   */\n  withDualChainAccount(\n    name?: string,\n    chainIds: string[] = ['1', '137'],\n    clusters: string[] = ['mainnet-beta', 'devnet']\n  ): WalletConfigBuilder {\n    return this.withAccount({\n      type: AccountType.DUAL_CHAIN,\n      name,\n      evm: { chainIds },\n      solana: { clusters }\n    });\n  }\n\n  /**\n   * Set default active account index\n   */\n  withDefaultAccountIndex(index: number): WalletConfigBuilder {\n    this.config.defaultAccountIndex = index;\n    return this;\n  }\n\n  /**\n   * Enable auto-connect\n   */\n  withAutoConnect(autoConnect: boolean = true): WalletConfigBuilder {\n    this.config.autoConnect = autoConnect;\n    return this;\n  }\n\n  /**\n   * Configure security settings\n   */\n  withSecurity(security: WalletConfig['security']): WalletConfigBuilder {\n    this.config.security = { ...this.config.security, ...security };\n    return this;\n  }\n\n  /**\n   * Enable production checks\n   */\n  withProductionChecks(enabled: boolean = true): WalletConfigBuilder {\n    if (!this.config.security) {\n      this.config.security = {};\n    }\n    this.config.security.enableProductionChecks = enabled;\n    return this;\n  }\n\n  /**\n   * Configure debug settings\n   */\n  withDebug(debug: WalletConfig['debug']): WalletConfigBuilder {\n    this.config.debug = { ...this.config.debug, ...debug };\n    return this;\n  }\n\n  /**\n   * Enable debug logging\n   */\n  withDebugLogging(enabled: boolean = true, logLevel: 'debug' | 'info' | 'warn' | 'error' = 'debug'): WalletConfigBuilder {\n    if (!this.config.debug) {\n      this.config.debug = {};\n    }\n    this.config.debug.enableLogging = enabled;\n    this.config.debug.logLevel = logLevel;\n    return this;\n  }\n\n  /**\n   * Build the wallet configuration\n   */\n  build(): WalletConfig {\n    return { ...this.config };\n  }\n}\n\n/**\n * Wallet factory implementation for easy instantiation\n */\nexport class MockWalletFactory implements WalletFactory {\n  /**\n   * Create a wallet with the given configuration\n   */\n  async create(config: WalletConfig): Promise<MockWallet> {\n    try {\n      const wallet = new UnifiedWallet(config);\n      return wallet;\n    } catch (error) {\n      throw new Error(`Failed to create wallet: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Create a wallet from configuration (alias for create)\n   */\n  async createFromConfig(config: WalletConfig): Promise<MockWallet> {\n    return this.create(config);\n  }\n\n  /**\n   * Create a wallet using a builder pattern\n   */\n  async createWithBuilder(builderFn: (builder: WalletConfigBuilder) => WalletConfigBuilder): Promise<MockWallet> {\n    const builder = new WalletConfigBuilder();\n    const config = builderFn(builder).build();\n    return this.create(config);\n  }\n\n  /**\n   * Create a wallet from a preset configuration\n   */\n  async createFromPreset(presetName: keyof typeof WALLET_PRESETS): Promise<MockWallet> {\n    const preset = WALLET_PRESETS[presetName];\n    if (!preset) {\n      throw new Error(`Unknown wallet preset: ${presetName}`);\n    }\n    return this.create(preset.config);\n  }\n\n  /**\n   * Create a minimal EVM-only wallet\n   */\n  async createEVMWallet(config: {\n    chainIds?: string[];\n    accountName?: string;\n    autoConnect?: boolean;\n  } = {}): Promise<MockWallet> {\n    const walletConfig: WalletConfig = {\n      accounts: [{\n        type: AccountType.EVM_ONLY,\n        name: config.accountName,\n        evm: {\n          chainIds: config.chainIds || ['1', '137'] // Ethereum and Polygon by default\n        }\n      }],\n      autoConnect: config.autoConnect ?? false,\n      security: {\n        enableProductionChecks: true\n      }\n    };\n\n    return this.create(walletConfig);\n  }\n\n  /**\n   * Create a minimal Solana-only wallet\n   */\n  async createSolanaWallet(config: {\n    clusters?: string[];\n    accountName?: string;\n    autoConnect?: boolean;\n  } = {}): Promise<MockWallet> {\n    const walletConfig: WalletConfig = {\n      accounts: [{\n        type: AccountType.SOLANA_ONLY,\n        name: config.accountName,\n        solana: {\n          clusters: config.clusters || ['mainnet-beta', 'devnet']\n        }\n      }],\n      autoConnect: config.autoConnect ?? false,\n      security: {\n        enableProductionChecks: true\n      }\n    };\n\n    return this.create(walletConfig);\n  }\n\n  /**\n   * Create a multi-chain wallet supporting both EVM and Solana\n   */\n  async createMultiChainWallet(config: {\n    evmChainIds?: string[];\n    solanaClusters?: string[];\n    accountName?: string;\n    autoConnect?: boolean;\n  } = {}): Promise<MockWallet> {\n    const walletConfig: WalletConfig = {\n      accounts: [{\n        type: AccountType.DUAL_CHAIN,\n        name: config.accountName,\n        evm: {\n          chainIds: config.evmChainIds || ['1', '137']\n        },\n        solana: {\n          clusters: config.solanaClusters || ['mainnet-beta', 'devnet']\n        }\n      }],\n      autoConnect: config.autoConnect ?? false,\n      security: {\n        enableProductionChecks: true\n      }\n    };\n\n    return this.create(walletConfig);\n  }\n\n  /**\n   * Create a development wallet with relaxed security\n   */\n  async createDevWallet(config: {\n    accounts?: AccountConfig[];\n    autoConnect?: boolean;\n    enableLogging?: boolean;\n  } = {}): Promise<MockWallet> {\n    const walletConfig: WalletConfig = {\n      accounts: config.accounts || [\n        {\n          type: AccountType.DUAL_CHAIN,\n          name: 'Development Account',\n          evm: { chainIds: ['31337', '1337'] }, // Local development chains\n          solana: { clusters: ['devnet', 'localnet'] }\n        }\n      ],\n      autoConnect: config.autoConnect ?? true,\n      security: {\n        enableProductionChecks: true, // Keep production checks even in dev\n        enableSecureMemory: false,\n        autoCleanup: true\n      },\n      debug: {\n        enableLogging: config.enableLogging ?? true,\n        logLevel: 'debug'\n      }\n    };\n\n    return this.create(walletConfig);\n  }\n\n  /**\n   * Get configuration builder\n   */\n  configBuilder(): WalletConfigBuilder {\n    return new WalletConfigBuilder();\n  }\n\n  /**\n   * Get available presets\n   */\n  getPresets(): Record<string, WalletPreset> {\n    return WALLET_PRESETS;\n  }\n}\n\n/**\n * Predefined wallet configurations\n */\nexport const WALLET_PRESETS: Record<string, WalletPreset> = {\n  minimal: {\n    name: 'Minimal Wallet',\n    description: 'Basic wallet with single EVM account',\n    config: {\n      accounts: [{\n        type: AccountType.EVM_ONLY,\n        name: 'Main Account',\n        evm: { chainIds: ['1'] }\n      }],\n      autoConnect: false\n    }\n  },\n\n  development: {\n    name: 'Development Wallet',\n    description: 'Full-featured wallet for development with debug logging',\n    config: {\n      accounts: [\n        {\n          type: AccountType.DUAL_CHAIN,\n          name: 'Development Account 1',\n          evm: { chainIds: ['31337', '1337', '1', '137'] },\n          solana: { clusters: ['devnet', 'localnet'] }\n        },\n        {\n          type: AccountType.EVM_ONLY,\n          name: 'EVM Test Account',\n          evm: { chainIds: ['31337', '1337'] }\n        }\n      ],\n      autoConnect: true,\n      security: {\n        enableProductionChecks: true,\n        autoCleanup: true\n      },\n      debug: {\n        enableLogging: true,\n        logLevel: 'debug'\n      }\n    }\n  },\n\n  multiChain: {\n    name: 'Multi-Chain Wallet',\n    description: 'Production-ready wallet supporting both EVM and Solana',\n    config: {\n      accounts: [{\n        type: AccountType.DUAL_CHAIN,\n        name: 'Multi-Chain Account',\n        evm: { chainIds: ['1', '137', '42161', '10'] }, // Ethereum, Polygon, Arbitrum, Optimism\n        solana: { clusters: ['mainnet-beta', 'devnet'] }\n      }],\n      autoConnect: false,\n      security: {\n        enableProductionChecks: true,\n        enableSecureMemory: true,\n        autoCleanup: true\n      }\n    }\n  },\n\n  testing: {\n    name: 'Testing Wallet',\n    description: 'Wallet configured for automated testing',\n    config: {\n      accounts: [\n        {\n          type: AccountType.EVM_ONLY,\n          name: 'Test Account EVM',\n          evm: { chainIds: ['31337'] }\n        },\n        {\n          type: AccountType.SOLANA_ONLY,\n          name: 'Test Account Solana',\n          solana: { clusters: ['devnet'] }\n        },\n        {\n          type: AccountType.DUAL_CHAIN,\n          name: 'Test Account Dual',\n          evm: { chainIds: ['31337'] },\n          solana: { clusters: ['devnet'] }\n        }\n      ],\n      autoConnect: false,\n      security: {\n        enableProductionChecks: false, // Disable for testing\n        autoCleanup: false\n      },\n      debug: {\n        enableLogging: false // Reduce noise in tests\n      }\n    }\n  }\n};\n\n/**\n * Default factory instance\n */\nexport const walletFactory = new MockWalletFactory();\n\n/**\n * Convenience functions for creating wallets\n */\nexport const createWallet = walletFactory.create.bind(walletFactory);\nexport const createEVMWallet = walletFactory.createEVMWallet.bind(walletFactory);\nexport const createSolanaWallet = walletFactory.createSolanaWallet.bind(walletFactory);\nexport const createMultiChainWallet = walletFactory.createMultiChainWallet.bind(walletFactory);\nexport const createDevWallet = walletFactory.createDevWallet.bind(walletFactory);\nexport const createWalletFromPreset = walletFactory.createFromPreset.bind(walletFactory);","/**\n * Enhanced Production Environment Detection and Guard System\n *\n * Implements multi-layered production environment detection with confidence scoring,\n * comprehensive logging, and advanced override management.\n */\n\nexport interface ProductionCheckResult {\n  isProduction: boolean;\n  confidence: number; // 0-100 percentage\n  reasons: string[];\n  detectionMethods: DetectionMethod[];\n  timestamp: number;\n  environment: EnvironmentInfo;\n}\n\nexport interface DetectionMethod {\n  name: string;\n  weight: number;\n  result: boolean;\n  confidence: number;\n  details: string;\n}\n\nexport interface EnvironmentInfo {\n  userAgent: string;\n  hostname: string;\n  protocol: string;\n  port: number;\n  origin: string;\n  nodeEnv?: string;\n  ciPlatform?: string;\n  dockerized: boolean;\n  kubernetesDeployed: boolean;\n}\n\nexport interface EnhancedProductionGuardConfig {\n  /** Confidence threshold for production detection (0-100) */\n  confidenceThreshold: number;\n\n  /** Explicitly blocked domains/patterns */\n  blockedDomains: string[];\n\n  /** Explicitly allowed domains/patterns */\n  allowedDomains: string[];\n\n  /** Whether to throw on production detection */\n  throwInProduction: boolean;\n\n  /** Custom warning message */\n  warningMessage?: string;\n\n  /** Override settings */\n  overrideConfig: OverrideConfig;\n\n  /** Event handler for security events */\n  onSecurityEvent?: (event: SecurityEvent) => void;\n\n  /** Enable comprehensive logging */\n  enableLogging: boolean;\n}\n\nexport interface OverrideConfig {\n  /** Allow temporary overrides (discouraged) */\n  allowOverrides: boolean;\n\n  /** Time limit for overrides in milliseconds */\n  overrideTimeLimit: number;\n\n  /** Required override reason */\n  requireReason: boolean;\n\n  /** Audit all override usage */\n  auditOverrides: boolean;\n}\n\nexport interface SecurityEvent {\n  type: 'production_detection' | 'override_usage' | 'security_violation';\n  severity: 'info' | 'warning' | 'error' | 'critical';\n  message: string;\n  details: any;\n  timestamp: number;\n  source: string;\n}\n\ninterface Override {\n  reason: string;\n  timestamp: number;\n  expiresAt: number;\n  creator: string;\n  audited: boolean;\n}\n\n/**\n * Enhanced Production Guard with multi-layered detection\n */\nexport class EnhancedProductionGuard {\n  private config: EnhancedProductionGuardConfig;\n  private activeOverrides = new Map<string, Override>();\n  private detectionCache = new Map<string, ProductionCheckResult>();\n  private eventLog: SecurityEvent[] = [];\n\n  constructor(config: Partial<EnhancedProductionGuardConfig> = {}) {\n    this.config = {\n      confidenceThreshold: 85,\n      blockedDomains: [\n        '*.com',\n        '*.org',\n        '*.net',\n        '*prod*',\n        '*production*',\n        '*live*',\n        '*staging*',\n        'vercel.app',\n        'netlify.app',\n        'herokuapp.com',\n        'railway.app',\n        'render.com'\n      ],\n      allowedDomains: [\n        'localhost',\n        '127.0.0.1',\n        '*.local',\n        '*.dev',\n        '*.test',\n        '*.localhost',\n        'dev-*',\n        'test-*',\n        'local-*'\n      ],\n      throwInProduction: true,\n      overrideConfig: {\n        allowOverrides: false,\n        overrideTimeLimit: 30 * 60 * 1000, // 30 minutes\n        requireReason: true,\n        auditOverrides: true\n      },\n      enableLogging: true,\n      ...config\n    };\n\n    // Start cleanup timer for expired overrides\n    this.startCleanupTimer();\n  }\n\n  /**\n   * Performs comprehensive production environment check\n   */\n  async checkProductionEnvironment(): Promise<ProductionCheckResult> {\n    const cacheKey = this.generateCacheKey();\n    const cached = this.detectionCache.get(cacheKey);\n\n    // Return cached result if valid (5 minute cache)\n    if (cached && Date.now() - cached.timestamp < 5 * 60 * 1000) {\n      return cached;\n    }\n\n    const environment = this.gatherEnvironmentInfo();\n    const detectionMethods: DetectionMethod[] = [];\n\n    // Run all detection methods\n    detectionMethods.push(await this.checkDomainPatterns(environment));\n    detectionMethods.push(await this.checkEnvironmentVariables(environment));\n    detectionMethods.push(await this.checkNetworkConfiguration(environment));\n    detectionMethods.push(await this.checkCIPlatforms(environment));\n    detectionMethods.push(await this.checkContainerEnvironment(environment));\n    detectionMethods.push(await this.checkDNSResolution(environment));\n    detectionMethods.push(await this.checkSSLCertificate(environment));\n    detectionMethods.push(await this.checkHttpHeaders(environment));\n\n    // Calculate weighted confidence score\n    let totalWeight = 0;\n    let weightedScore = 0;\n\n    for (const method of detectionMethods) {\n      totalWeight += method.weight;\n      if (method.result) {\n        weightedScore += method.weight * (method.confidence / 100);\n      }\n    }\n\n    const confidence = totalWeight > 0 ? Math.round((weightedScore / totalWeight) * 100) : 0;\n    const isProduction = confidence >= this.config.confidenceThreshold;\n\n    const reasons = detectionMethods\n      .filter(m => m.result)\n      .map(m => `${m.name}: ${m.details}`);\n\n    const result: ProductionCheckResult = {\n      isProduction,\n      confidence,\n      reasons,\n      detectionMethods,\n      timestamp: Date.now(),\n      environment\n    };\n\n    // Cache the result\n    this.detectionCache.set(cacheKey, result);\n\n    // Log the detection\n    this.logSecurityEvent({\n      type: 'production_detection',\n      severity: isProduction ? 'critical' : 'info',\n      message: `Production environment ${isProduction ? 'detected' : 'not detected'}`,\n      details: { result },\n      timestamp: Date.now(),\n      source: 'EnhancedProductionGuard'\n    });\n\n    return result;\n  }\n\n  /**\n   * Domain pattern checking\n   */\n  private async checkDomainPatterns(env: EnvironmentInfo): Promise<DetectionMethod> {\n    const hostname = env.hostname.toLowerCase();\n\n    // Check blocked domains\n    const isBlocked = this.config.blockedDomains.some(pattern => {\n      const regex = this.patternToRegex(pattern);\n      return regex.test(hostname);\n    });\n\n    // Check allowed domains\n    const isAllowed = this.config.allowedDomains.some(pattern => {\n      const regex = this.patternToRegex(pattern);\n      return regex.test(hostname);\n    });\n\n    let confidence = 0;\n    let result = false;\n\n    if (isBlocked && !isAllowed) {\n      confidence = 90;\n      result = true;\n    } else if (isAllowed) {\n      confidence = 5; // Low chance of production\n      result = false;\n    }\n\n    return {\n      name: 'Domain Pattern Check',\n      weight: 30,\n      result,\n      confidence,\n      details: `Hostname: ${hostname}, Blocked: ${isBlocked}, Allowed: ${isAllowed}`\n    };\n  }\n\n  /**\n   * Environment variables checking\n   */\n  private async checkEnvironmentVariables(env: EnvironmentInfo): Promise<DetectionMethod> {\n    const prodIndicators = [\n      'production',\n      'prod',\n      'live',\n      'staging',\n      'stage'\n    ];\n\n    let confidence = 0;\n    let result = false;\n\n    if (typeof process !== 'undefined' && process.env) {\n      const nodeEnv = process.env.NODE_ENV?.toLowerCase() || '';\n      const appEnv = process.env.APP_ENV?.toLowerCase() || '';\n      const environment = process.env.ENVIRONMENT?.toLowerCase() || '';\n\n      const allEnvs = [nodeEnv, appEnv, environment].filter(Boolean);\n\n      for (const envVar of allEnvs) {\n        if (prodIndicators.includes(envVar)) {\n          confidence = Math.max(confidence, 95);\n          result = true;\n        }\n      }\n    }\n\n    return {\n      name: 'Environment Variables',\n      weight: 25,\n      result,\n      confidence,\n      details: `NODE_ENV: ${env.nodeEnv || 'undefined'}`\n    };\n  }\n\n  /**\n   * Network configuration checking\n   */\n  private async checkNetworkConfiguration(env: EnvironmentInfo): Promise<DetectionMethod> {\n    let confidence = 0;\n    let result = false;\n\n    // Check for standard production ports\n    if (env.port === 80 || env.port === 443) {\n      confidence += 20;\n      result = true;\n    }\n\n    // Check for HTTPS in production\n    if (env.protocol === 'https:' && !this.isLocalHost(env.hostname)) {\n      confidence += 30;\n      result = true;\n    }\n\n    // Check for CDN indicators in hostname\n    const cdnPatterns = ['cdn', 'static', 'assets', 'media'];\n    if (cdnPatterns.some(pattern => env.hostname.includes(pattern))) {\n      confidence += 25;\n      result = true;\n    }\n\n    return {\n      name: 'Network Configuration',\n      weight: 20,\n      result,\n      confidence,\n      details: `Port: ${env.port}, Protocol: ${env.protocol}, Host: ${env.hostname}`\n    };\n  }\n\n  /**\n   * CI/CD platform detection\n   */\n  private async checkCIPlatforms(env: EnvironmentInfo): Promise<DetectionMethod> {\n    const ciIndicators = [\n      'CI', 'CONTINUOUS_INTEGRATION',\n      'GITHUB_ACTIONS', 'GITLAB_CI',\n      'JENKINS_URL', 'BUILDKITE',\n      'CIRCLECI', 'TRAVIS',\n      'VERCEL', 'NETLIFY'\n    ];\n\n    let confidence = 0;\n    let result = false;\n\n    if (typeof process !== 'undefined' && process.env) {\n      for (const indicator of ciIndicators) {\n        if (process.env[indicator]) {\n          confidence = 60; // CI environments might be for testing\n          result = true;\n          break;\n        }\n      }\n    }\n\n    return {\n      name: 'CI/CD Platform Detection',\n      weight: 15,\n      result,\n      confidence,\n      details: `CI Platform: ${env.ciPlatform || 'none detected'}`\n    };\n  }\n\n  /**\n   * Container environment detection\n   */\n  private async checkContainerEnvironment(env: EnvironmentInfo): Promise<DetectionMethod> {\n    let confidence = 0;\n    let result = false;\n\n    // Docker indicators\n    if (env.dockerized) {\n      confidence += 40;\n      result = true;\n    }\n\n    // Kubernetes indicators\n    if (env.kubernetesDeployed) {\n      confidence += 50;\n      result = true;\n    }\n\n    return {\n      name: 'Container Environment',\n      weight: 15,\n      result,\n      confidence,\n      details: `Docker: ${env.dockerized}, Kubernetes: ${env.kubernetesDeployed}`\n    };\n  }\n\n  /**\n   * DNS resolution checking\n   */\n  private async checkDNSResolution(env: EnvironmentInfo): Promise<DetectionMethod> {\n    let confidence = 0;\n    let result = false;\n\n    // Skip localhost/IP addresses\n    if (this.isLocalHost(env.hostname) || this.isIPAddress(env.hostname)) {\n      return {\n        name: 'DNS Resolution',\n        weight: 10,\n        result: false,\n        confidence: 0,\n        details: 'Local host or IP address'\n      };\n    }\n\n    // In browser environment, we can't do direct DNS lookups\n    // but we can check hostname characteristics\n    if (env.hostname.includes('.')) {\n      const parts = env.hostname.split('.');\n      if (parts.length >= 2) {\n        const tld = parts[parts.length - 1];\n        // Common production TLDs\n        if (['com', 'org', 'net', 'io', 'app'].includes(tld)) {\n          confidence = 30;\n          result = true;\n        }\n      }\n    }\n\n    return {\n      name: 'DNS Resolution',\n      weight: 10,\n      result,\n      confidence,\n      details: `Hostname analysis: ${env.hostname}`\n    };\n  }\n\n  /**\n   * SSL certificate checking\n   */\n  private async checkSSLCertificate(env: EnvironmentInfo): Promise<DetectionMethod> {\n    let confidence = 0;\n    let result = false;\n\n    if (env.protocol === 'https:' && !this.isLocalHost(env.hostname)) {\n      confidence = 40;\n      result = true;\n    }\n\n    return {\n      name: 'SSL Certificate',\n      weight: 15,\n      result,\n      confidence,\n      details: `HTTPS: ${env.protocol === 'https:'}, Host: ${env.hostname}`\n    };\n  }\n\n  /**\n   * HTTP headers checking\n   */\n  private async checkHttpHeaders(env: EnvironmentInfo): Promise<DetectionMethod> {\n    let confidence = 0;\n    let result = false;\n\n    // Check user agent for production indicators\n    const ua = env.userAgent.toLowerCase();\n    const prodHeaders = ['bot', 'crawler', 'spider', 'monitor'];\n\n    if (prodHeaders.some(header => ua.includes(header))) {\n      confidence = 35;\n      result = true;\n    }\n\n    return {\n      name: 'HTTP Headers',\n      weight: 10,\n      result,\n      confidence,\n      details: `User-Agent analysis complete`\n    };\n  }\n\n  /**\n   * Gather environment information\n   */\n  private gatherEnvironmentInfo(): EnvironmentInfo {\n    const location = typeof window !== 'undefined' ? window.location : {};\n\n    return {\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',\n      hostname: location.hostname || 'localhost',\n      protocol: location.protocol || 'http:',\n      port: location.port ? parseInt(location.port) : (location.protocol === 'https:' ? 443 : 80),\n      origin: location.origin || 'http://localhost',\n      nodeEnv: typeof process !== 'undefined' ? process.env.NODE_ENV : undefined,\n      ciPlatform: this.detectCIPlatform(),\n      dockerized: this.detectDocker(),\n      kubernetesDeployed: this.detectKubernetes()\n    };\n  }\n\n  /**\n   * Detect CI platform\n   */\n  private detectCIPlatform(): string | undefined {\n    if (typeof process === 'undefined' || !process.env) return undefined;\n\n    const platforms = {\n      'GITHUB_ACTIONS': 'GitHub Actions',\n      'GITLAB_CI': 'GitLab CI',\n      'JENKINS_URL': 'Jenkins',\n      'BUILDKITE': 'Buildkite',\n      'CIRCLECI': 'CircleCI',\n      'TRAVIS': 'Travis CI',\n      'VERCEL': 'Vercel',\n      'NETLIFY': 'Netlify'\n    };\n\n    for (const [env, platform] of Object.entries(platforms)) {\n      if (process.env[env]) return platform;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Detect Docker environment\n   */\n  private detectDocker(): boolean {\n    if (typeof process === 'undefined') return false;\n\n    // Check for .dockerenv file\n    try {\n      if (typeof require !== 'undefined') {\n        const fs = require('fs');\n        return fs.existsSync('/.dockerenv');\n      }\n    } catch {\n      // Fallback to environment variables\n    }\n\n    return !!(process.env.DOCKER_CONTAINER || process.env.HOSTNAME?.startsWith('docker-'));\n  }\n\n  /**\n   * Detect Kubernetes environment\n   */\n  private detectKubernetes(): boolean {\n    if (typeof process === 'undefined') return false;\n\n    return !!(\n      process.env.KUBERNETES_SERVICE_HOST ||\n      process.env.KUBERNETES_PORT ||\n      process.env.K8S_NODE_NAME\n    );\n  }\n\n  /**\n   * Convert pattern to regex\n   */\n  private patternToRegex(pattern: string): RegExp {\n    const escaped = pattern\n      .replace(/[.+?^${}()|[\\]\\\\]/g, '\\\\$&')\n      .replace(/\\*/g, '.*');\n    return new RegExp(`^${escaped}$`, 'i');\n  }\n\n  /**\n   * Check if hostname is localhost\n   */\n  private isLocalHost(hostname: string): boolean {\n    const localHosts = ['localhost', '127.0.0.1', '::1', '0.0.0.0'];\n    return localHosts.includes(hostname) || hostname.endsWith('.local');\n  }\n\n  /**\n   * Check if string is IP address\n   */\n  private isIPAddress(hostname: string): boolean {\n    const ipv4Regex = /^(\\d{1,3}\\.){3}\\d{1,3}$/;\n    const ipv6Regex = /^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/;\n    return ipv4Regex.test(hostname) || ipv6Regex.test(hostname);\n  }\n\n  /**\n   * Generate cache key for detection results\n   */\n  private generateCacheKey(): string {\n    const env = this.gatherEnvironmentInfo();\n    return `${env.hostname}:${env.port}:${env.protocol}:${env.nodeEnv}`;\n  }\n\n  /**\n   * Log security event\n   */\n  private logSecurityEvent(event: SecurityEvent): void {\n    if (!this.config.enableLogging) return;\n\n    this.eventLog.push(event);\n\n    // Limit log size\n    if (this.eventLog.length > 1000) {\n      this.eventLog.splice(0, 500);\n    }\n\n    // Call external handler if provided\n    if (this.config.onSecurityEvent) {\n      this.config.onSecurityEvent(event);\n    }\n\n    // Console logging based on severity\n    if (event.severity === 'critical' || event.severity === 'error') {\n      console.error(`[SECURITY] ${event.message}`, event.details);\n    } else if (event.severity === 'warning') {\n      console.warn(`[SECURITY] ${event.message}`, event.details);\n    } else if (this.config.enableLogging) {\n      console.info(`[SECURITY] ${event.message}`, event.details);\n    }\n  }\n\n  /**\n   * Start cleanup timer for expired overrides\n   */\n  private startCleanupTimer(): void {\n    setInterval(() => {\n      const now = Date.now();\n      for (const [key, override] of this.activeOverrides.entries()) {\n        if (now > override.expiresAt) {\n          this.activeOverrides.delete(key);\n          this.logSecurityEvent({\n            type: 'override_usage',\n            severity: 'info',\n            message: 'Production override expired',\n            details: { key, override },\n            timestamp: now,\n            source: 'EnhancedProductionGuard'\n          });\n        }\n      }\n    }, 60000); // Check every minute\n  }\n\n  /**\n   * Create temporary production override (discouraged)\n   */\n  public createOverride(reason: string, durationMs?: number): string {\n    if (!this.config.overrideConfig.allowOverrides) {\n      throw new Error('Production overrides are disabled');\n    }\n\n    if (this.config.overrideConfig.requireReason && !reason) {\n      throw new Error('Override reason is required');\n    }\n\n    const overrideId = this.generateOverrideId();\n    const duration = durationMs || this.config.overrideConfig.overrideTimeLimit;\n\n    const override: Override = {\n      reason,\n      timestamp: Date.now(),\n      expiresAt: Date.now() + duration,\n      creator: this.getCreatorInfo(),\n      audited: this.config.overrideConfig.auditOverrides\n    };\n\n    this.activeOverrides.set(overrideId, override);\n\n    this.logSecurityEvent({\n      type: 'override_usage',\n      severity: 'warning',\n      message: 'Production override created',\n      details: { overrideId, reason, duration },\n      timestamp: Date.now(),\n      source: 'EnhancedProductionGuard'\n    });\n\n    return overrideId;\n  }\n\n  /**\n   * Check if override is active\n   */\n  public hasActiveOverride(overrideId: string): boolean {\n    const override = this.activeOverrides.get(overrideId);\n    return override ? Date.now() < override.expiresAt : false;\n  }\n\n  /**\n   * Get security event log\n   */\n  public getEventLog(): SecurityEvent[] {\n    return [...this.eventLog];\n  }\n\n  /**\n   * Clear detection cache\n   */\n  public clearCache(): void {\n    this.detectionCache.clear();\n  }\n\n  /**\n   * Generate unique override ID\n   */\n  private generateOverrideId(): string {\n    return `override_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Get creator information for audit trail\n   */\n  private getCreatorInfo(): string {\n    // In a real implementation, this might get user info from auth context\n    return `${Date.now()}_${typeof window !== 'undefined' ? window.location.href : 'server'}`;\n  }\n}\n\n/**\n * Create production guard with default security settings\n */\nexport function createProductionGuard(config?: Partial<EnhancedProductionGuardConfig>): EnhancedProductionGuard {\n  return new EnhancedProductionGuard(config);\n}\n\n/**\n * Create strict production guard for sensitive environments\n */\nexport function createStrictProductionGuard(config?: Partial<EnhancedProductionGuardConfig>): EnhancedProductionGuard {\n  const strictConfig: Partial<EnhancedProductionGuardConfig> = {\n    confidenceThreshold: 75, // Lower threshold for stricter detection\n    throwInProduction: true,\n    overrideConfig: {\n      allowOverrides: false,\n      overrideTimeLimit: 5 * 60 * 1000, // 5 minutes max\n      requireReason: true,\n      auditOverrides: true\n    },\n    enableLogging: true,\n    ...config\n  };\n\n  return new EnhancedProductionGuard(strictConfig);\n}","/**\n * Comprehensive Security Manager for Wallet Mock Library\n *\n * Coordinates all security components including production guards,\n * runtime monitoring, memory protection, and threat detection.\n */\n\nimport { EnhancedProductionGuard, SecurityEvent } from './enhanced-production-guard.js';\n\nexport enum SecurityLevel {\n  STRICT = 'strict',\n  STANDARD = 'standard',\n  PERMISSIVE = 'permissive'\n}\n\nexport interface SecurityManagerConfig {\n  /** Security level setting */\n  securityLevel: SecurityLevel;\n\n  /** Production guard configuration */\n  productionGuard: {\n    enabled: boolean;\n    confidenceThreshold: number;\n    blockedDomains: string[];\n    allowedDomains: string[];\n    throwInProduction: boolean;\n  };\n\n  /** Runtime monitoring configuration */\n  runtimeMonitor: {\n    enabled: boolean;\n    xssProtection: boolean;\n    rateLimiting: boolean;\n    consoleProtection: boolean;\n    integrityChecks: boolean;\n  };\n\n  /** Memory protection configuration */\n  memoryProtection: {\n    enabled: boolean;\n    secureStorage: boolean;\n    autoCleanup: boolean;\n    leakDetection: boolean;\n  };\n\n  /** Network security configuration */\n  networkSecurity: {\n    enabled: boolean;\n    ssrfProtection: boolean;\n    originValidation: boolean;\n    requestFiltering: boolean;\n  };\n\n  /** Key management configuration */\n  keyManagement: {\n    enabled: boolean;\n    secureGeneration: boolean;\n    autoRotation: boolean;\n    testKeyMarking: boolean;\n  };\n\n  /** Custom security policy */\n  customPolicy?: SecurityPolicy;\n\n  /** Event handlers */\n  onSecurityEvent?: (event: SecurityEvent) => void;\n  onThreatDetected?: (threat: ThreatEvent) => void;\n  onSecurityViolation?: (violation: SecurityViolation) => void;\n\n  /** Logging configuration */\n  enableLogging: boolean;\n  logLevel: 'info' | 'warning' | 'error' | 'critical';\n}\n\nexport interface SecurityPolicy {\n  /** Custom validation rules */\n  validationRules: ValidationRule[];\n\n  /** Environment restrictions */\n  environmentRestrictions: EnvironmentRestriction[];\n\n  /** Operation limits */\n  operationLimits: OperationLimit[];\n\n  /** Custom threat patterns */\n  threatPatterns: ThreatPattern[];\n}\n\nexport interface ValidationRule {\n  name: string;\n  pattern: RegExp;\n  action: 'block' | 'warn' | 'log';\n  severity: 'info' | 'warning' | 'error' | 'critical';\n  message: string;\n}\n\nexport interface EnvironmentRestriction {\n  condition: string;\n  allowed: boolean;\n  message: string;\n}\n\nexport interface OperationLimit {\n  operation: string;\n  maxPerMinute: number;\n  maxPerHour: number;\n  action: 'block' | 'throttle' | 'warn';\n}\n\nexport interface ThreatPattern {\n  name: string;\n  pattern: RegExp;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  action: 'block' | 'warn' | 'log';\n}\n\nexport interface ThreatEvent {\n  type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  source: string;\n  message: string;\n  details: any;\n  timestamp: number;\n  blocked: boolean;\n}\n\nexport interface SecurityViolation {\n  type: string;\n  severity: 'info' | 'warning' | 'error' | 'critical';\n  source: string;\n  message: string;\n  details: any;\n  timestamp: number;\n  action: string;\n}\n\nexport interface SecurityHealthCheck {\n  overall: 'healthy' | 'warning' | 'critical';\n  components: ComponentHealth[];\n  recommendations: string[];\n  lastCheck: number;\n}\n\nexport interface ComponentHealth {\n  name: string;\n  status: 'healthy' | 'warning' | 'error' | 'disabled';\n  message: string;\n  metrics?: any;\n}\n\n/**\n * Comprehensive Security Manager\n */\nexport class SecurityManager {\n  private config: SecurityManagerConfig;\n  private productionGuard: EnhancedProductionGuard;\n  private securityEvents: SecurityEvent[] = [];\n  private threatEvents: ThreatEvent[] = [];\n  private violations: SecurityViolation[] = [];\n  private operationCounters = new Map<string, number[]>();\n  private lastHealthCheck: SecurityHealthCheck | null = null;\n\n  constructor(config: Partial<SecurityManagerConfig> = {}) {\n    this.config = this.mergeWithDefaults(config);\n    this.productionGuard = new EnhancedProductionGuard({\n      ...this.config.productionGuard,\n      onSecurityEvent: this.handleSecurityEvent.bind(this)\n    });\n\n    // Initialize security components\n    this.initializeComponents();\n\n    // Start monitoring\n    this.startPeriodicHealthChecks();\n  }\n\n  /**\n   * Initialize all security components based on configuration\n   */\n  private initializeComponents(): void {\n    if (this.config.runtimeMonitor.enabled) {\n      this.initializeRuntimeMonitor();\n    }\n\n    if (this.config.memoryProtection.enabled) {\n      this.initializeMemoryProtection();\n    }\n\n    if (this.config.networkSecurity.enabled) {\n      this.initializeNetworkSecurity();\n    }\n\n    if (this.config.keyManagement.enabled) {\n      this.initializeKeyManagement();\n    }\n  }\n\n  /**\n   * Initialize runtime monitoring\n   */\n  private initializeRuntimeMonitor(): void {\n    if (typeof window === 'undefined') return;\n\n    // XSS Protection\n    if (this.config.runtimeMonitor.xssProtection) {\n      this.setupXSSProtection();\n    }\n\n    // Console Protection\n    if (this.config.runtimeMonitor.consoleProtection) {\n      this.setupConsoleProtection();\n    }\n\n    // Integrity Checks\n    if (this.config.runtimeMonitor.integrityChecks) {\n      this.setupIntegrityChecks();\n    }\n  }\n\n  /**\n   * Setup XSS Protection\n   */\n  private setupXSSProtection(): void {\n    if (typeof window === 'undefined') return;\n\n    // Monitor dangerous innerHTML usage\n    const originalInnerHTML = Object.getOwnPropertyDescriptor(Element.prototype, 'innerHTML');\n    if (originalInnerHTML) {\n      Object.defineProperty(Element.prototype, 'innerHTML', {\n        set: function(value: string) {\n          if (typeof value === 'string' && SecurityManager.containsXSSPatterns(value)) {\n            const threat: ThreatEvent = {\n              type: 'xss_attempt',\n              severity: 'high',\n              source: 'runtime_monitor',\n              message: 'Potentially malicious innerHTML detected',\n              details: { value: value.substring(0, 100) },\n              timestamp: Date.now(),\n              blocked: true\n            };\n\n            // Don't execute if XSS detected\n            console.error('[SECURITY] XSS attempt blocked:', value);\n            return;\n          }\n          originalInnerHTML.set!.call(this, value);\n        },\n        get: originalInnerHTML.get,\n        configurable: true\n      });\n    }\n  }\n\n  /**\n   * Setup Console Protection\n   */\n  private setupConsoleProtection(): void {\n    if (typeof console === 'undefined') return;\n\n    const originalLog = console.log;\n    const originalWarn = console.warn;\n    const originalError = console.error;\n\n    console.log = (...args: any[]) => {\n      if (this.containsSensitiveData(args)) {\n        this.recordViolation({\n          type: 'sensitive_data_logging',\n          severity: 'warning',\n          source: 'console_protection',\n          message: 'Sensitive data detected in console.log',\n          details: { args: args.map(arg => typeof arg === 'string' ? arg.substring(0, 50) : typeof arg) },\n          timestamp: Date.now(),\n          action: 'filtered'\n        });\n        originalLog('[FILTERED SENSITIVE DATA]');\n        return;\n      }\n      originalLog.apply(console, args);\n    };\n\n    console.warn = (...args: any[]) => {\n      if (this.containsSensitiveData(args)) {\n        originalWarn('[FILTERED SENSITIVE DATA]');\n        return;\n      }\n      originalWarn.apply(console, args);\n    };\n\n    console.error = (...args: any[]) => {\n      if (this.containsSensitiveData(args)) {\n        originalError('[FILTERED SENSITIVE DATA]');\n        return;\n      }\n      originalError.apply(console, args);\n    };\n  }\n\n  /**\n   * Setup Integrity Checks\n   */\n  private setupIntegrityChecks(): void {\n    // Monitor critical object modifications\n    const criticalObjects = [window.crypto, window.localStorage, window.sessionStorage];\n\n    criticalObjects.forEach(obj => {\n      if (!obj) return;\n\n      const handler: ProxyHandler<any> = {\n        set: (target, prop, value) => {\n          this.recordThreat({\n            type: 'critical_object_modification',\n            severity: 'high',\n            source: 'integrity_monitor',\n            message: `Critical object modification detected: ${String(prop)}`,\n            details: { target: target.constructor.name, property: String(prop) },\n            timestamp: Date.now(),\n            blocked: false\n          });\n          target[prop] = value;\n          return true;\n        }\n      };\n\n      // Note: In practice, you'd need to be more careful about proxying global objects\n    });\n  }\n\n  /**\n   * Initialize Memory Protection\n   */\n  private initializeMemoryProtection(): void {\n    if (this.config.memoryProtection.leakDetection) {\n      this.setupMemoryLeakDetection();\n    }\n  }\n\n  /**\n   * Setup Memory Leak Detection\n   */\n  private setupMemoryLeakDetection(): void {\n    let objectCount = 0;\n    let lastObjectCount = 0;\n\n    setInterval(() => {\n      // Simple memory leak detection\n      if (typeof performance !== 'undefined' && performance.memory) {\n        const memory = (performance as any).memory;\n        if (memory.usedJSHeapSize > memory.totalJSHeapSize * 0.9) {\n          this.recordViolation({\n            type: 'memory_leak_detected',\n            severity: 'warning',\n            source: 'memory_monitor',\n            message: 'High memory usage detected',\n            details: {\n              usedHeapSize: memory.usedJSHeapSize,\n              totalHeapSize: memory.totalJSHeapSize\n            },\n            timestamp: Date.now(),\n            action: 'logged'\n          });\n        }\n      }\n\n      lastObjectCount = objectCount;\n    }, 30000); // Check every 30 seconds\n  }\n\n  /**\n   * Initialize Network Security\n   */\n  private initializeNetworkSecurity(): void {\n    if (typeof window === 'undefined') return;\n\n    if (this.config.networkSecurity.ssrfProtection) {\n      this.setupSSRFProtection();\n    }\n\n    if (this.config.networkSecurity.requestFiltering) {\n      this.setupRequestFiltering();\n    }\n  }\n\n  /**\n   * Setup SSRF Protection\n   */\n  private setupSSRFProtection(): void {\n    if (typeof window === 'undefined') return;\n\n    const originalFetch = window.fetch;\n    window.fetch = async (input: RequestInfo | URL, init?: RequestInit) => {\n      const url = typeof input === 'string' ? input : input instanceof URL ? input.href : input.url;\n\n      if (this.isSSRFAttempt(url)) {\n        const threat: ThreatEvent = {\n          type: 'ssrf_attempt',\n          severity: 'high',\n          source: 'network_security',\n          message: 'SSRF attempt blocked',\n          details: { url },\n          timestamp: Date.now(),\n          blocked: true\n        };\n        this.recordThreat(threat);\n        throw new Error('Network request blocked by security policy');\n      }\n\n      return originalFetch(input, init);\n    };\n  }\n\n  /**\n   * Setup Request Filtering\n   */\n  private setupRequestFiltering(): void {\n    // Monitor XMLHttpRequest\n    if (typeof XMLHttpRequest !== 'undefined') {\n      const originalOpen = XMLHttpRequest.prototype.open;\n      XMLHttpRequest.prototype.open = function(method: string, url: string, ...args: any[]) {\n        if (SecurityManager.prototype.isSSRFAttempt(url)) {\n          throw new Error('XMLHttpRequest blocked by security policy');\n        }\n        return originalOpen.apply(this, [method, url, ...args]);\n      };\n    }\n  }\n\n  /**\n   * Initialize Key Management\n   */\n  private initializeKeyManagement(): void {\n    // Key management initialization would be more complex in practice\n    if (this.config.keyManagement.autoRotation) {\n      this.startKeyRotation();\n    }\n  }\n\n  /**\n   * Start Key Rotation\n   */\n  private startKeyRotation(): void {\n    // Implement key rotation logic\n    setInterval(() => {\n      this.logInfo('Key rotation check performed');\n    }, 24 * 60 * 60 * 1000); // Daily rotation check\n  }\n\n  /**\n   * Check if URL is SSRF attempt\n   */\n  private isSSRFAttempt(url: string): boolean {\n    try {\n      const parsed = new URL(url);\n      const hostname = parsed.hostname.toLowerCase();\n\n      // Block private IP ranges\n      const privateRanges = [\n        /^127\\./, // 127.0.0.0/8\n        /^192\\.168\\./, // 192.168.0.0/16\n        /^10\\./, // 10.0.0.0/8\n        /^172\\.(1[6-9]|2[0-9]|3[01])\\./, // 172.16.0.0/12\n        /^169\\.254\\./, // 169.254.0.0/16\n        /^::1$/, // IPv6 loopback\n        /^fe80::/i // IPv6 link-local\n      ];\n\n      return privateRanges.some(range => range.test(hostname)) || hostname === 'localhost';\n    } catch {\n      return true; // Block invalid URLs\n    }\n  }\n\n  /**\n   * Check if content contains XSS patterns\n   */\n  private static containsXSSPatterns(content: string): boolean {\n    const xssPatterns = [\n      /<script[^>]*>.*?<\\/script>/gi,\n      /javascript:/gi,\n      /on\\w+\\s*=/gi,\n      /<iframe[^>]*>.*?<\\/iframe>/gi,\n      /eval\\s*\\(/gi,\n      /document\\.write/gi,\n      /innerHTML/gi\n    ];\n\n    return xssPatterns.some(pattern => pattern.test(content));\n  }\n\n  /**\n   * Check if data contains sensitive information\n   */\n  private containsSensitiveData(args: any[]): boolean {\n    const sensitivePatterns = [\n      /private.*key/i,\n      /mnemonic/i,\n      /seed.*phrase/i,\n      /password/i,\n      /secret/i,\n      /token.*[a-zA-Z0-9]{20,}/i,\n      /0x[a-fA-F0-9]{40}/i, // Ethereum addresses\n      /[13][a-km-zA-HJ-NP-Z1-9]{25,34}/i, // Bitcoin addresses\n    ];\n\n    const stringified = args.map(arg =>\n      typeof arg === 'string' ? arg : JSON.stringify(arg)\n    ).join(' ');\n\n    return sensitivePatterns.some(pattern => pattern.test(stringified));\n  }\n\n  /**\n   * Record security threat\n   */\n  private recordThreat(threat: ThreatEvent): void {\n    this.threatEvents.push(threat);\n\n    // Limit log size\n    if (this.threatEvents.length > 1000) {\n      this.threatEvents.splice(0, 500);\n    }\n\n    // Call handler if provided\n    if (this.config.onThreatDetected) {\n      this.config.onThreatDetected(threat);\n    }\n\n    this.logError(`Threat detected: ${threat.message}`, threat.details);\n  }\n\n  /**\n   * Record security violation\n   */\n  private recordViolation(violation: SecurityViolation): void {\n    this.violations.push(violation);\n\n    // Limit log size\n    if (this.violations.length > 1000) {\n      this.violations.splice(0, 500);\n    }\n\n    // Call handler if provided\n    if (this.config.onSecurityViolation) {\n      this.config.onSecurityViolation(violation);\n    }\n\n    if (violation.severity === 'critical' || violation.severity === 'error') {\n      this.logError(`Security violation: ${violation.message}`, violation.details);\n    } else {\n      this.logWarning(`Security violation: ${violation.message}`, violation.details);\n    }\n  }\n\n  /**\n   * Handle security event from other components\n   */\n  private handleSecurityEvent(event: SecurityEvent): void {\n    this.securityEvents.push(event);\n\n    // Limit log size\n    if (this.securityEvents.length > 1000) {\n      this.securityEvents.splice(0, 500);\n    }\n\n    // Call external handler\n    if (this.config.onSecurityEvent) {\n      this.config.onSecurityEvent(event);\n    }\n  }\n\n  /**\n   * Start periodic health checks\n   */\n  private startPeriodicHealthChecks(): void {\n    setInterval(() => {\n      this.performHealthCheck();\n    }, 5 * 60 * 1000); // Every 5 minutes\n\n    // Perform initial health check\n    setTimeout(() => this.performHealthCheck(), 1000);\n  }\n\n  /**\n   * Perform security health check\n   */\n  public async performHealthCheck(): Promise<SecurityHealthCheck> {\n    const components: ComponentHealth[] = [];\n\n    // Check production guard\n    components.push({\n      name: 'Production Guard',\n      status: this.config.productionGuard.enabled ? 'healthy' : 'disabled',\n      message: this.config.productionGuard.enabled ? 'Active' : 'Disabled'\n    });\n\n    // Check runtime monitor\n    components.push({\n      name: 'Runtime Monitor',\n      status: this.config.runtimeMonitor.enabled ? 'healthy' : 'disabled',\n      message: this.config.runtimeMonitor.enabled ? 'Monitoring active' : 'Disabled'\n    });\n\n    // Check memory protection\n    let memoryStatus: ComponentHealth['status'] = 'healthy';\n    let memoryMessage = 'Operating normally';\n\n    if (typeof performance !== 'undefined' && (performance as any).memory) {\n      const memory = (performance as any).memory;\n      const usageRatio = memory.usedJSHeapSize / memory.totalJSHeapSize;\n\n      if (usageRatio > 0.9) {\n        memoryStatus = 'warning';\n        memoryMessage = 'High memory usage detected';\n      }\n    }\n\n    components.push({\n      name: 'Memory Protection',\n      status: this.config.memoryProtection.enabled ? memoryStatus : 'disabled',\n      message: this.config.memoryProtection.enabled ? memoryMessage : 'Disabled'\n    });\n\n    // Check network security\n    components.push({\n      name: 'Network Security',\n      status: this.config.networkSecurity.enabled ? 'healthy' : 'disabled',\n      message: this.config.networkSecurity.enabled ? 'Protection active' : 'Disabled'\n    });\n\n    // Overall health assessment\n    const overall = this.assessOverallHealth(components);\n    const recommendations = this.generateRecommendations(components);\n\n    this.lastHealthCheck = {\n      overall,\n      components,\n      recommendations,\n      lastCheck: Date.now()\n    };\n\n    this.logInfo('Security health check completed', { overall, componentCount: components.length });\n\n    return this.lastHealthCheck;\n  }\n\n  /**\n   * Assess overall health\n   */\n  private assessOverallHealth(components: ComponentHealth[]): SecurityHealthCheck['overall'] {\n    const activeComponents = components.filter(c => c.status !== 'disabled');\n    const errorComponents = activeComponents.filter(c => c.status === 'error');\n    const warningComponents = activeComponents.filter(c => c.status === 'warning');\n\n    if (errorComponents.length > 0) return 'critical';\n    if (warningComponents.length > 0) return 'warning';\n    return 'healthy';\n  }\n\n  /**\n   * Generate security recommendations\n   */\n  private generateRecommendations(components: ComponentHealth[]): string[] {\n    const recommendations: string[] = [];\n\n    components.forEach(component => {\n      if (component.status === 'error') {\n        recommendations.push(`Fix ${component.name}: ${component.message}`);\n      } else if (component.status === 'warning') {\n        recommendations.push(`Review ${component.name}: ${component.message}`);\n      } else if (component.status === 'disabled') {\n        recommendations.push(`Consider enabling ${component.name} for enhanced security`);\n      }\n    });\n\n    return recommendations;\n  }\n\n  /**\n   * Get security metrics\n   */\n  public getSecurityMetrics(): any {\n    return {\n      securityEvents: this.securityEvents.length,\n      threatEvents: this.threatEvents.length,\n      violations: this.violations.length,\n      lastHealthCheck: this.lastHealthCheck?.lastCheck,\n      overallHealth: this.lastHealthCheck?.overall\n    };\n  }\n\n  /**\n   * Get event logs\n   */\n  public getEventLogs(): {\n    securityEvents: SecurityEvent[];\n    threatEvents: ThreatEvent[];\n    violations: SecurityViolation[];\n  } {\n    return {\n      securityEvents: [...this.securityEvents],\n      threatEvents: [...this.threatEvents],\n      violations: [...this.violations]\n    };\n  }\n\n  /**\n   * Logging methods\n   */\n  private logInfo(message: string, details?: any): void {\n    if (this.config.enableLogging && this.shouldLog('info')) {\n      console.info(`[SECURITY] ${message}`, details || '');\n    }\n  }\n\n  private logWarning(message: string, details?: any): void {\n    if (this.config.enableLogging && this.shouldLog('warning')) {\n      console.warn(`[SECURITY] ${message}`, details || '');\n    }\n  }\n\n  private logError(message: string, details?: any): void {\n    if (this.config.enableLogging && this.shouldLog('error')) {\n      console.error(`[SECURITY] ${message}`, details || '');\n    }\n  }\n\n  private shouldLog(level: 'info' | 'warning' | 'error' | 'critical'): boolean {\n    const levels = ['info', 'warning', 'error', 'critical'];\n    const configLevel = levels.indexOf(this.config.logLevel);\n    const messageLevel = levels.indexOf(level);\n    return messageLevel >= configLevel;\n  }\n\n  /**\n   * Merge configuration with defaults\n   */\n  private mergeWithDefaults(config: Partial<SecurityManagerConfig>): SecurityManagerConfig {\n    const defaults: SecurityManagerConfig = {\n      securityLevel: SecurityLevel.STANDARD,\n      productionGuard: {\n        enabled: true,\n        confidenceThreshold: 85,\n        blockedDomains: ['*.com', '*.org', '*.net'],\n        allowedDomains: ['localhost', '*.local', '*.dev'],\n        throwInProduction: true\n      },\n      runtimeMonitor: {\n        enabled: true,\n        xssProtection: true,\n        rateLimiting: true,\n        consoleProtection: true,\n        integrityChecks: true\n      },\n      memoryProtection: {\n        enabled: true,\n        secureStorage: true,\n        autoCleanup: true,\n        leakDetection: true\n      },\n      networkSecurity: {\n        enabled: true,\n        ssrfProtection: true,\n        originValidation: true,\n        requestFiltering: true\n      },\n      keyManagement: {\n        enabled: true,\n        secureGeneration: true,\n        autoRotation: false,\n        testKeyMarking: true\n      },\n      enableLogging: true,\n      logLevel: 'info'\n    };\n\n    return {\n      ...defaults,\n      ...config,\n      productionGuard: { ...defaults.productionGuard, ...config.productionGuard },\n      runtimeMonitor: { ...defaults.runtimeMonitor, ...config.runtimeMonitor },\n      memoryProtection: { ...defaults.memoryProtection, ...config.memoryProtection },\n      networkSecurity: { ...defaults.networkSecurity, ...config.networkSecurity },\n      keyManagement: { ...defaults.keyManagement, ...config.keyManagement }\n    };\n  }\n}\n\n/**\n * Create security manager with default settings\n */\nexport function createSecurityManager(config?: Partial<SecurityManagerConfig>): SecurityManager {\n  return new SecurityManager(config);\n}\n\n/**\n * Create strict security manager for production-adjacent environments\n */\nexport function createStrictSecurityManager(config?: Partial<SecurityManagerConfig>): SecurityManager {\n  const strictConfig: Partial<SecurityManagerConfig> = {\n    securityLevel: SecurityLevel.STRICT,\n    productionGuard: {\n      enabled: true,\n      confidenceThreshold: 75,\n      throwInProduction: true,\n      ...config?.productionGuard\n    },\n    logLevel: 'warning',\n    ...config\n  };\n\n  return new SecurityManager(strictConfig);\n}\n\n/**\n * Create permissive security manager for development\n */\nexport function createPermissiveSecurityManager(config?: Partial<SecurityManagerConfig>): SecurityManager {\n  const permissiveConfig: Partial<SecurityManagerConfig> = {\n    securityLevel: SecurityLevel.PERMISSIVE,\n    productionGuard: {\n      enabled: false,\n      throwInProduction: false,\n      ...config?.productionGuard\n    },\n    logLevel: 'error',\n    ...config\n  };\n\n  return new SecurityManager(permissiveConfig);\n}\n\n/**\n * Initialize default security for quick setup\n */\nexport function initializeDefaultSecurity(): SecurityManager {\n  return createSecurityManager({\n    securityLevel: SecurityLevel.STANDARD,\n    enableLogging: true,\n    logLevel: 'info'\n  });\n}","/**\n * Security Module for Wallet Mock Library\n *\n * Comprehensive security framework providing production environment detection,\n * runtime monitoring, memory protection, and threat detection capabilities.\n *\n * @example Basic Usage\n * ```typescript\n * import { initializeDefaultSecurity } from '@arenaentertainment/wallet-mock';\n *\n * const security = initializeDefaultSecurity();\n * ```\n *\n * @example Advanced Configuration\n * ```typescript\n * import { createSecurityManager, SecurityLevel } from '@arenaentertainment/wallet-mock';\n *\n * const security = createSecurityManager({\n *   securityLevel: SecurityLevel.STRICT,\n *   productionGuard: {\n *     blockedDomains: ['*.com', '*.org', '*prod*'],\n *     allowedDomains: ['localhost', '*.local', '*.dev']\n *   },\n *   onSecurityEvent: (event) => {\n *     if (event.severity === 'critical') {\n *       console.error('CRITICAL SECURITY EVENT:', event);\n *     }\n *   }\n * });\n * ```\n */\n\n// =============================================================================\n// Enhanced Production Guard\n// =============================================================================\n\nexport {\n  EnhancedProductionGuard,\n  createProductionGuard,\n  createStrictProductionGuard,\n  type ProductionCheckResult,\n  type DetectionMethod,\n  type EnvironmentInfo,\n  type EnhancedProductionGuardConfig,\n  type OverrideConfig,\n  type SecurityEvent\n} from './enhanced-production-guard.js';\n\n// =============================================================================\n// Comprehensive Security Manager\n// =============================================================================\n\nexport {\n  SecurityManager,\n  createSecurityManager,\n  createStrictSecurityManager,\n  createPermissiveSecurityManager,\n  initializeDefaultSecurity,\n  SecurityLevel,\n  type SecurityManagerConfig,\n  type SecurityPolicy,\n  type ValidationRule,\n  type EnvironmentRestriction,\n  type OperationLimit,\n  type ThreatPattern,\n  type ThreatEvent,\n  type SecurityViolation,\n  type SecurityHealthCheck,\n  type ComponentHealth\n} from './security-manager.js';\n\n// =============================================================================\n// Security Configuration Presets\n// =============================================================================\n\n/**\n * Development security configuration\n * - Permissive settings for local development\n * - Minimal performance impact\n * - Error-level logging only\n */\nexport const DEVELOPMENT_SECURITY_CONFIG = {\n  securityLevel: SecurityLevel.PERMISSIVE,\n  productionGuard: {\n    enabled: false,\n    confidenceThreshold: 95,\n    throwInProduction: false,\n    blockedDomains: [],\n    allowedDomains: ['*']\n  },\n  runtimeMonitor: {\n    enabled: false,\n    xssProtection: false,\n    rateLimiting: false,\n    consoleProtection: false,\n    integrityChecks: false\n  },\n  memoryProtection: {\n    enabled: false,\n    secureStorage: false,\n    autoCleanup: true,\n    leakDetection: false\n  },\n  networkSecurity: {\n    enabled: false,\n    ssrfProtection: false,\n    originValidation: false,\n    requestFiltering: false\n  },\n  keyManagement: {\n    enabled: true,\n    secureGeneration: false,\n    autoRotation: false,\n    testKeyMarking: true\n  },\n  enableLogging: true,\n  logLevel: 'error' as const\n};\n\n/**\n * Testing security configuration\n * - Balanced security for testing environments\n * - Production detection enabled\n * - Warning-level logging\n */\nexport const TESTING_SECURITY_CONFIG = {\n  securityLevel: SecurityLevel.STANDARD,\n  productionGuard: {\n    enabled: true,\n    confidenceThreshold: 80,\n    throwInProduction: true,\n    blockedDomains: ['*.com', '*.org', '*.net', '*prod*', '*production*'],\n    allowedDomains: ['localhost', '*.local', '*.dev', '*.test', 'test-*']\n  },\n  runtimeMonitor: {\n    enabled: true,\n    xssProtection: true,\n    rateLimiting: false,\n    consoleProtection: true,\n    integrityChecks: false\n  },\n  memoryProtection: {\n    enabled: true,\n    secureStorage: true,\n    autoCleanup: true,\n    leakDetection: false\n  },\n  networkSecurity: {\n    enabled: true,\n    ssrfProtection: true,\n    originValidation: true,\n    requestFiltering: true\n  },\n  keyManagement: {\n    enabled: true,\n    secureGeneration: true,\n    autoRotation: false,\n    testKeyMarking: true\n  },\n  enableLogging: true,\n  logLevel: 'warning' as const\n};\n\n/**\n * Production-adjacent security configuration\n * - Strict security for staging/pre-prod environments\n * - High sensitivity production detection\n * - Info-level logging for comprehensive audit trails\n */\nexport const PRODUCTION_ADJACENT_SECURITY_CONFIG = {\n  securityLevel: SecurityLevel.STRICT,\n  productionGuard: {\n    enabled: true,\n    confidenceThreshold: 70,\n    throwInProduction: true,\n    blockedDomains: [\n      '*.com', '*.org', '*.net', '*.io', '*.app',\n      '*prod*', '*production*', '*live*', '*staging*', '*stage*',\n      'vercel.app', 'netlify.app', 'herokuapp.com',\n      'railway.app', 'render.com', 'fly.io'\n    ],\n    allowedDomains: ['localhost', '127.0.0.1', '*.local', '*.dev', 'dev-*']\n  },\n  runtimeMonitor: {\n    enabled: true,\n    xssProtection: true,\n    rateLimiting: true,\n    consoleProtection: true,\n    integrityChecks: true\n  },\n  memoryProtection: {\n    enabled: true,\n    secureStorage: true,\n    autoCleanup: true,\n    leakDetection: true\n  },\n  networkSecurity: {\n    enabled: true,\n    ssrfProtection: true,\n    originValidation: true,\n    requestFiltering: true\n  },\n  keyManagement: {\n    enabled: true,\n    secureGeneration: true,\n    autoRotation: false,\n    testKeyMarking: true\n  },\n  enableLogging: true,\n  logLevel: 'info' as const\n};\n\n// =============================================================================\n// Security Utilities\n// =============================================================================\n\n/**\n * Quick security setup for different environments\n */\nexport class SecurityPresets {\n  /**\n   * Initialize security for development environment\n   */\n  static forDevelopment(): SecurityManager {\n    return createPermissiveSecurityManager(DEVELOPMENT_SECURITY_CONFIG);\n  }\n\n  /**\n   * Initialize security for testing environment\n   */\n  static forTesting(): SecurityManager {\n    return createSecurityManager(TESTING_SECURITY_CONFIG);\n  }\n\n  /**\n   * Initialize security for production-adjacent environments\n   */\n  static forProductionAdjacent(): SecurityManager {\n    return createStrictSecurityManager(PRODUCTION_ADJACENT_SECURITY_CONFIG);\n  }\n\n  /**\n   * Auto-detect environment and initialize appropriate security\n   */\n  static autoDetect(): SecurityManager {\n    if (typeof process !== 'undefined' && process.env) {\n      const nodeEnv = process.env.NODE_ENV?.toLowerCase();\n\n      switch (nodeEnv) {\n        case 'development':\n        case 'dev':\n          return this.forDevelopment();\n\n        case 'test':\n        case 'testing':\n          return this.forTesting();\n\n        case 'production':\n        case 'prod':\n        case 'staging':\n        case 'stage':\n          return this.forProductionAdjacent();\n\n        default:\n          return this.forTesting(); // Default to testing level\n      }\n    }\n\n    // Browser environment - use hostname detection\n    if (typeof window !== 'undefined' && window.location) {\n      const hostname = window.location.hostname.toLowerCase();\n\n      if (hostname === 'localhost' || hostname.endsWith('.local') || hostname.endsWith('.dev')) {\n        return this.forDevelopment();\n      }\n\n      if (hostname.includes('test') || hostname.includes('staging')) {\n        return this.forTesting();\n      }\n\n      // Production-like domain\n      return this.forProductionAdjacent();\n    }\n\n    // Fallback to standard security\n    return initializeDefaultSecurity();\n  }\n}\n\n/**\n * Security event severity levels\n */\nexport const SECURITY_SEVERITY = {\n  INFO: 'info' as const,\n  WARNING: 'warning' as const,\n  ERROR: 'error' as const,\n  CRITICAL: 'critical' as const\n};\n\n/**\n * Common threat patterns for custom security policies\n */\nexport const COMMON_THREAT_PATTERNS = {\n  XSS_SCRIPT: /<script[^>]*>.*?<\\/script>/gi,\n  XSS_JAVASCRIPT: /javascript:/gi,\n  XSS_EVENT_HANDLER: /on\\w+\\s*=/gi,\n  SQL_INJECTION: /(union|select|insert|update|delete|drop|create|alter)\\s+/gi,\n  COMMAND_INJECTION: /(\\||&|;|`|\\$\\()/g,\n  PATH_TRAVERSAL: /\\.\\.\\/|\\.\\.\\\\|\\.\\.\\%2f|\\.\\.\\%5c/gi,\n  PRIVATE_KEY: /-----BEGIN\\s+(RSA\\s+)?PRIVATE\\s+KEY-----/gi,\n  MNEMONIC_PHRASE: /\\b\\w+(\\s+\\w+){11,23}\\b/g,\n  ETHEREUM_ADDRESS: /0x[a-fA-F0-9]{40}/g,\n  BITCOIN_ADDRESS: /[13][a-km-zA-HJ-NP-Z1-9]{25,34}/g\n};\n\n/**\n * Validate security configuration\n */\nexport function validateSecurityConfig(config: Partial<SecurityManagerConfig>): {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n} {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Validate security level\n  if (config.securityLevel && !Object.values(SecurityLevel).includes(config.securityLevel)) {\n    errors.push('Invalid security level');\n  }\n\n  // Validate production guard\n  if (config.productionGuard) {\n    const pg = config.productionGuard;\n\n    if (pg.confidenceThreshold !== undefined) {\n      if (pg.confidenceThreshold < 0 || pg.confidenceThreshold > 100) {\n        errors.push('Production guard confidence threshold must be between 0 and 100');\n      }\n\n      if (pg.confidenceThreshold < 50) {\n        warnings.push('Low confidence threshold may cause false positives');\n      }\n    }\n\n    if (pg.blockedDomains && pg.blockedDomains.length === 0) {\n      warnings.push('No blocked domains configured - consider adding common production patterns');\n    }\n  }\n\n  // Validate log level\n  if (config.logLevel && !['info', 'warning', 'error', 'critical'].includes(config.logLevel)) {\n    errors.push('Invalid log level');\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n    warnings\n  };\n}\n\n/**\n * Get security recommendations based on environment\n */\nexport function getSecurityRecommendations(environment: 'development' | 'testing' | 'production'): string[] {\n  switch (environment) {\n    case 'development':\n      return [\n        'Use minimal security settings for development speed',\n        'Enable test key marking to identify mock keys',\n        'Consider enabling console protection for sensitive data',\n        'Use error-level logging to reduce noise'\n      ];\n\n    case 'testing':\n      return [\n        'Enable production detection to catch deployment issues',\n        'Use XSS protection for frontend testing',\n        'Enable memory leak detection for long-running tests',\n        'Configure appropriate domain allowlists',\n        'Use warning-level logging for test debugging'\n      ];\n\n    case 'production':\n      return [\n        'NEVER use mock wallets in production',\n        'Use strict security level with low confidence threshold',\n        'Enable all protection mechanisms',\n        'Set up comprehensive logging and monitoring',\n        'Implement security event alerting',\n        'Regular security health checks',\n        'Use strong production detection patterns'\n      ];\n\n    default:\n      return ['Use SecurityPresets.autoDetect() for automatic configuration'];\n  }\n}\n\n// =============================================================================\n// Security Metrics and Monitoring\n// =============================================================================\n\nexport interface SecurityMetrics {\n  totalEvents: number;\n  criticalEvents: number;\n  threatEvents: number;\n  violations: number;\n  healthStatus: 'healthy' | 'warning' | 'critical';\n  lastHealthCheck: number;\n  uptime: number;\n}\n\nexport interface SecurityReport {\n  timestamp: number;\n  metrics: SecurityMetrics;\n  topThreats: ThreatEvent[];\n  recentViolations: SecurityViolation[];\n  recommendations: string[];\n  configurationHealth: {\n    valid: boolean;\n    errors: string[];\n    warnings: string[];\n  };\n}\n\n/**\n * Generate comprehensive security report\n */\nexport function generateSecurityReport(securityManager: SecurityManager): SecurityReport {\n  const metrics = securityManager.getSecurityMetrics();\n  const logs = securityManager.getEventLogs();\n\n  // Get top threats by severity\n  const topThreats = logs.threatEvents\n    .sort((a, b) => {\n      const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n      return (severityOrder[b.severity] || 0) - (severityOrder[a.severity] || 0);\n    })\n    .slice(0, 5);\n\n  // Get recent violations\n  const recentViolations = logs.violations\n    .sort((a, b) => b.timestamp - a.timestamp)\n    .slice(0, 10);\n\n  // Generate recommendations based on current state\n  const recommendations = [];\n\n  if (metrics.criticalEvents > 0) {\n    recommendations.push('Review and address critical security events immediately');\n  }\n\n  if (metrics.threatEvents > 10) {\n    recommendations.push('High number of threat events detected - review security posture');\n  }\n\n  if (metrics.healthStatus !== 'healthy') {\n    recommendations.push('Security health check indicates issues - perform system review');\n  }\n\n  return {\n    timestamp: Date.now(),\n    metrics: {\n      totalEvents: metrics.securityEvents,\n      criticalEvents: logs.securityEvents.filter(e => e.severity === 'critical').length,\n      threatEvents: metrics.threatEvents,\n      violations: metrics.violations,\n      healthStatus: metrics.overallHealth || 'healthy',\n      lastHealthCheck: metrics.lastHealthCheck || 0,\n      uptime: Date.now() - (metrics.lastHealthCheck || Date.now())\n    },\n    topThreats,\n    recentViolations,\n    recommendations,\n    configurationHealth: validateSecurityConfig({}) // Would pass actual config in real implementation\n  };\n}\n\n// =============================================================================\n// Type Guards and Utilities\n// =============================================================================\n\n/**\n * Check if error is security-related\n */\nexport function isSecurityError(error: Error): boolean {\n  const securityKeywords = [\n    'security', 'production', 'blocked', 'threat', 'violation',\n    'xss', 'injection', 'unauthorized', 'forbidden'\n  ];\n\n  const message = error.message.toLowerCase();\n  return securityKeywords.some(keyword => message.includes(keyword));\n}\n\n/**\n * Sanitize sensitive data from logs\n */\nexport function sanitizeForLogging(data: any): any {\n  if (typeof data === 'string') {\n    return data\n      .replace(/0x[a-fA-F0-9]{40}/g, '0x[ETHEREUM_ADDRESS]')\n      .replace(/[13][a-km-zA-HJ-NP-Z1-9]{25,34}/g, '[BITCOIN_ADDRESS]')\n      .replace(/-----BEGIN\\s+.*?-----[\\s\\S]*?-----END\\s+.*?-----/gi, '[PRIVATE_KEY]')\n      .replace(/\\b\\w+(\\s+\\w+){11,23}\\b/g, '[MNEMONIC_PHRASE]');\n  }\n\n  if (typeof data === 'object' && data !== null) {\n    const sanitized: any = Array.isArray(data) ? [] : {};\n\n    for (const [key, value] of Object.entries(data)) {\n      if (typeof key === 'string' && /private|secret|key|mnemonic|password/i.test(key)) {\n        sanitized[key] = '[REDACTED]';\n      } else {\n        sanitized[key] = sanitizeForLogging(value);\n      }\n    }\n\n    return sanitized;\n  }\n\n  return data;\n}\n\n// =============================================================================\n// Export Default Security Instance (for convenience)\n// =============================================================================\n\n/**\n * Default security instance for quick setup\n * Automatically detects environment and configures appropriate security level\n */\nexport const defaultSecurity = SecurityPresets.autoDetect();\n\n/**\n * Legacy compatibility - maintain backwards compatibility with existing production guard\n */\nexport { createProductionGuard as createProductionCheck };\nexport type { ProductionCheckResult as ProductionGuardResult };"],"names":["SecurityLevel","createSecurityManager","createStrictSecurityManager","createPermissiveSecurityManager","initializeDefaultSecurity"],"mappings":"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"}